<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Eslint报错整理</title>
    <url>/2021/04/06/bug/Eslint%E6%8A%A5%E9%94%99%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>Eslint 报错整理</p>
<span id="more"></span>

<h1 id="Missing-space-before-function-parentheses"><a href="#Missing-space-before-function-parentheses" class="headerlink" title="Missing space before function parentheses"></a>Missing space before function parentheses</h1><blockquote>
<p>在方法名和刮号之间需要有一格空格</p>
</blockquote>
<p><strong>解决方法：</strong></p>
<p>在 <code>.eslintrc.js</code> 下的 rules 添加</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"space-before-function-paren"</span><span class="token operator">:</span> <span class="token number">0</span></code></pre>

<h1 id="Unexpected-trailing-comma-comma-dangle"><a href="#Unexpected-trailing-comma-comma-dangle" class="headerlink" title="Unexpected trailing comma (comma-dangle)"></a>Unexpected trailing comma (comma-dangle)</h1><blockquote>
<p>这种情况是由于 vscode 格式化 vue 代码的时候，会在下面代码的最后多加了一个逗号，导致过不了 eslint 的 js 格式化要求，所以报错。</p>
</blockquote>
<p><strong>解决方法：</strong></p>
<p>在项目根目录下创建.prettierrc 文件进行配置<br>.prettierrc 文件:</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"trailingComma"</span><span class="token operator">:</span>none</code></pre>

<h1 id="Newline-required-at-end-of-file-but-not-found-eol-last"><a href="#Newline-required-at-end-of-file-but-not-found-eol-last" class="headerlink" title="Newline required at end of file but not found (eol-last)"></a>Newline required at end of file but not found (eol-last)</h1><blockquote>
<p>文件末尾需要换行符，但找不到</p>
</blockquote>
<p><strong>解决办法：</strong></p>
<p>哪个文件报的这个 error 就在哪个文件最后一行加一行空行。</p>
<h1 id="Expected-‘-x3D-x3D-’-and-instead-saw-‘-x3D-’-eqeqeq"><a href="#Expected-‘-x3D-x3D-’-and-instead-saw-‘-x3D-’-eqeqeq" class="headerlink" title="Expected ‘!&#x3D;&#x3D;’ and instead saw ‘!&#x3D;’ (eqeqeq)"></a>Expected ‘!&#x3D;&#x3D;’ and instead saw ‘!&#x3D;’ (eqeqeq)</h1><p><strong>解决办法：</strong></p>
<p>在 <code>.eslintrc.js</code> 下的 rules 添加</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"eqeqeq"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"off"</span><span class="token punctuation">]</span></code></pre>

<p><a href="https://eslint.org/docs/rules/eqeqeq#require--and--eqeqeq">eqeqeq</a></p>
]]></content>
      <categories>
        <category>bug报告</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>Eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>使用return false报错问题</title>
    <url>/2021/01/27/bug/%E4%BD%BF%E7%94%A8return%20false%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>使用 return false 报错 <code>Uncaught SyntaxError: Illegal return statement</code></p>
<span id="more"></span>

<p>问题：<br>1.bug</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"浏览器不支持localstorage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>解决办法：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"浏览器不支持localstorage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>原因：在 JavaScript 中 return 只能在函数中使用</p>
]]></content>
      <categories>
        <category>bug报告</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS</title>
    <url>/2022/01/18/%E5%85%B6%E4%BB%96/centos/</url>
    <content><![CDATA[<p>CentOS</p>
<span id="more"></span>

<p><a href="https://mirrors.aliyun.com/centos/7/isos/x86_64/">下载地址</a></p>
<p>各个版本的ISO镜像文件说明：</p>
<p>CentOS-7-x86_64-DVD-1708.iso 标准安装版（推荐）</p>
<p>CentOS-7-x86_64-Everything-1708.iso 完整版，集成所有软件（以用来补充系统的软件或者填充本地镜像）</p>
<p>CentOS-7-x86_64-LiveGNOME-1708.iso GNOME桌面版</p>
<p>CentOS-7-x86_64-LiveKDE-1708.iso KDE桌面版</p>
<p>CentOS-7-x86_64-Minimal-1708.iso 精简版，自带的软件最少</p>
<p>CentOS-7-x86_64-NetInstall-1708.iso 网络安装版（从网络安装或者救援系统）</p>
<h1 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h1><pre class="language-none"><code class="language-none">［xxq@loclhost xxq］ $ exit</code></pre>



<h1 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h1><pre class="language-none"><code class="language-none">cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F; 进入这个目录
vi ifcfg-enp0s3 修改配置文件</code></pre>

<p>动态分配一个ip地址</p>
<pre class="language-none"><code class="language-none">ONBOOT&#x3D;yes</code></pre>

<p>重启一下网络， 就可以看到自动分配的ip地址了。</p>
<pre class="language-none"><code class="language-none">service network restart
ip addr</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202210122324923.png" loading="lazy"></p>
<p>再次编辑<code>ifcfg-enp0s3</code></p>
<pre class="language-none"><code class="language-none">vi ifcfg-enp0s3</code></pre>

<p>修改 <strong>BOOTPROTO</strong> 为 <strong>static</strong> ，依次设置静态ip，掩码，网关。</p>
<pre class="language-none"><code class="language-none">BOOTPROTO&#x3D;static
IPADDR&#x3D;192.168.10.10
NETMASK&#x3D;255.255.255.0
GATEWAY&#x3D;192.168.10.55</code></pre>

<p>配置DNS</p>
<pre class="language-none"><code class="language-none">检查NetManager的状态：systemctl status NetworkManager.service
检查NetManager管理的网络接口：nmcli dev status
检查NetManager管理的网络连接：nmcli connection show</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202210122324970.png" loading="lazy"></p>
<p>设置dns</p>
<pre class="language-none"><code class="language-none">nmcli con mod enp0s3 ipv4.dns “114.114.114.114 8.8.8.8”</code></pre>

<p>让dns配置生效 </p>
<pre class="language-none"><code class="language-none">nmcli con up enp0s3</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202210122324739.png" loading="lazy"></p>
<p>完成上述步骤就可以用 ping 命令 ping一下 本地ip 是否可以ping 通</p>
<pre class="language-none"><code class="language-none">ping 10.0.2.15</code></pre>

<p>注意:如果ping不通关闭本地防火墙就可以了。</p>
<pre class="language-none"><code class="language-none"># 关闭防火墙 
systemctl stop firewalld.service
# 禁止开机自启 
systemctl disable firewalld.service</code></pre>

<p><a href="https://blog.csdn.net/Ever_Ardour/article/details/118314884">参考</a></p>
<h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><p>首先，要确保CentOS7安装了  <strong>openssh-server</strong>，在终端中输入 </p>
<pre class="language-none"><code class="language-none">yum list installed | grep openssh-server</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202210122325830.png" loading="lazy"></p>
<p>表示已经安装</p>
<blockquote>
<p>如果没有安装就使用此命令安装</p>
<pre class="language-none"><code class="language-none">yum install openssh-server</code></pre>
</blockquote>
<p> 找到了  <strong>&#x2F;etc&#x2F;ssh&#x2F;</strong>  目录下的sshd服务配置文件 <strong>sshd_config</strong>，用Vim编辑器打开</p>
<pre class="language-none"><code class="language-none">cd &#x2F;etc&#x2F;ssh&#x2F;
vi sshd_config</code></pre>

<p>关于监听端口、监听地址前的 # 号去除</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202210122325233.png" loading="lazy"></p>
<p>开启允许远程登录</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202210122325778.png" loading="lazy"></p>
<p>开启使用用户名密码来作为连接验证</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202211141027467.png" alt="image-20220929155054461" loading="lazy"></p>
<p>保存文件，退出。</p>
<p>开启  sshd  服务</p>
<pre class="language-none"><code class="language-none">sudo service sshd start</code></pre>

<p>检查  sshd  服务是否已经开启</p>
<pre class="language-none"><code class="language-none">ps -e | grep sshd
# or 检查  22 号端口是否开启监听
netstat -an | grep 22</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202210122325438.png" loading="lazy"></p>
<p>查看CentOS7的属性，发现网络连接方式是采用的<strong>NAT</strong>方式连接的</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202210122325295.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 调试工具</title>
    <url>/2021/04/10/%E5%BC%80%E5%8F%91/Dev%20Tools_Note/</url>
    <content><![CDATA[<p>Chrome 调试工具的基本使用</p>
<span id="more"></span>

<h1 id="Chrome-调试工具"><a href="#Chrome-调试工具" class="headerlink" title="Chrome 调试工具"></a>Chrome 调试工具</h1><h2 id="Tab-介绍"><a href="#Tab-介绍" class="headerlink" title="Tab 介绍"></a>Tab 介绍</h2><h3 id="基础快捷键"><a href="#基础快捷键" class="headerlink" title="基础快捷键"></a>基础快捷键</h3><p>打开 Dev Tools : 快捷键 <code>F12</code></p>
<p>打开命令行菜单：<code>Ctrl</code> + <code>Shift</code> + <code>p</code></p>
<blockquote>
<p>比如</p>
<p>修改 Dev Tools 主题</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070902680.png" loading="lazy"></p>
<p>截屏(screenshot)</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070902833.png" loading="lazy"></p>
<p>Dev Tools工具停靠位置(dock)</p>
<ul>
<li>Dock to left </li>
<li>Dock to right</li>
<li>Dock to Bottom</li>
<li>undock 独立窗口</li>
</ul>
</blockquote>
<h3 id="常用的Tab"><a href="#常用的Tab" class="headerlink" title="常用的Tab"></a>常用的Tab</h3><ul>
<li>Elements</li>
<li>Console</li>
<li>Source</li>
<li>Network</li>
<li>Application</li>
</ul>
<h2 id="CSS-调试"><a href="#CSS-调试" class="headerlink" title="CSS 调试"></a>CSS 调试</h2><h3 id="检查元素"><a href="#检查元素" class="headerlink" title="检查元素"></a>检查元素</h3><p> 快速检查某个元素</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903709.png" loading="lazy"></p>
<h3 id="查询-DOM-树"><a href="#查询-DOM-树" class="headerlink" title="查询 DOM 树"></a>查询 DOM 树</h3><p>快捷键 : <code>Ctrl</code> + <code>F</code></p>
<p>查询:</p>
<ul>
<li><p>文本内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903752.png" loading="lazy"></p>
</li>
<li><p>css 选择器</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903350.png" loading="lazy"></p>
</li>
<li><p>Xpath</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903930.png" loading="lazy"></p>
</li>
</ul>
<blockquote>
<p>在 Console 内使用 inspect(element) 方法,快速定位元素位置</p>
</blockquote>
<h2 id="编辑样式"><a href="#编辑样式" class="headerlink" title="编辑样式"></a>编辑样式</h2><h3 id="测试伪类"><a href="#测试伪类" class="headerlink" title="测试伪类"></a>测试伪类</h3><p>例如:让鼠标永远悬停</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903492.png" loading="lazy"></p>
<h3 id="修改class"><a href="#修改class" class="headerlink" title="修改class"></a>修改class</h3><p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903928.png" loading="lazy"></p>
<h3 id="复制样式"><a href="#复制样式" class="headerlink" title="复制样式"></a>复制样式</h3><p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070909302.png" loading="lazy"></p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"PingFang SC"</span><span class="token punctuation">,</span>Arial<span class="token punctuation">,</span><span class="token string">"Microsoft YaHei"</span><span class="token punctuation">,</span>sans-serif<span class="token punctuation">;</span>
<span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
<span class="token property">width</span><span class="token punctuation">:</span> 108px<span class="token punctuation">;</span>
<span class="token property">height</span><span class="token punctuation">:</span> 44px<span class="token punctuation">;</span>
<span class="token property">line-height</span><span class="token punctuation">:</span> 45px<span class="token punctuation">;</span>
<span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token property">background</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span>
<span class="token property">background-color</span><span class="token punctuation">:</span> #4e6ef2<span class="token punctuation">;</span>
<span class="token property">border-radius</span><span class="token punctuation">:</span> 0 10px 10px 0<span class="token punctuation">;</span>
<span class="token property">font-size</span><span class="token punctuation">:</span> 17px<span class="token punctuation">;</span>
<span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
<span class="token property">box-shadow</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token property">font-weight</span><span class="token punctuation">:</span> 400<span class="token punctuation">;</span>
<span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token property">outline</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></code></pre>

<h3 id="样式面板"><a href="#样式面板" class="headerlink" title="样式面板"></a>样式面板</h3><p><strong>Computed</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903561.png" loading="lazy"></p>
<p><strong>Layout</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903522.png" loading="lazy"></p>
<p>修改查看布局方式</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903306.png" loading="lazy"></p>
<p><strong>Event Listeners</strong></p>
<p>所有绑定的事件</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903607.png" loading="lazy"></p>
<h2 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h2><p>快捷键 : <code>Ctrl</code> + <code>Shift</code> + <code>J</code></p>
<p>$_返回上一条语句的执行结果</p>
<p>$0 上一个选择器的DOM节点($1,$2…)</p>
<p><code>console.time(); </code> 返回一段代码的执行时间</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903159.png" loading="lazy"></p>
<p>观测变量值</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903169.png" loading="lazy"></p>
<h2 id="JavaScript-调试"><a href="#JavaScript-调试" class="headerlink" title="JavaScript 调试"></a>JavaScript 调试</h2><p> 在代码中添加 <code>debugger</code> 语句可以在浏览器执行到此处时暂停,可以进行调试.</p>
<p>或者直接在浏览器打断点进行调试</p>
<p>监测变量</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903537.png" loading="lazy"></p>
<h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p>跳转页面时保留历史请求</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070903586.png" loading="lazy"></p>
<p><code>Disable cache</code> 清除缓存</p>
<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>最常用的功能就是 : 查看 Cookies,session,localStorage</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel + Vue</title>
    <url>/2022/09/18/%E5%BC%80%E5%8F%91/Laravel%20+%20Vue/</url>
    <content><![CDATA[<p>laravel + vue</p>
<span id="more"></span>

<h1 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h1><p>安装 Composer</p>
<p><a href="http://composer.p2hp.com/download/">http://composer.p2hp.com/download/</a></p>
<p>修改 Composer 源</p>
<p>国内</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp">composer config <span class="token operator">-</span>g repo<span class="token punctuation">.</span>packagist composer https<span class="token operator">:</span><span class="token comment">//packagist.phpcomposer.com </span></code></pre>

<p>原来</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp">composer config <span class="token operator">-</span>g repo<span class="token punctuation">.</span>packagist composer https<span class="token operator">:</span><span class="token comment">//repo.packagist.org</span></code></pre>

<p>其他镜像</p>
<table>
<thead>
<tr>
<th>镜像名</th>
<th>地址</th>
<th>赞助商</th>
<th>更新频率</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>阿里云 Composer 镜像</td>
<td><a href="https://links.jianshu.com/go?to=https://mirrors.aliyun.com/composer/">https://mirrors.aliyun.com/composer/</a></td>
<td>阿里云</td>
<td>96 秒</td>
<td>推荐</td>
</tr>
<tr>
<td>腾讯云 Composer 镜像</td>
<td><a href="https://links.jianshu.com/go?to=https://mirrors.cloud.tencent.com/composer/">https://mirrors.cloud.tencent.com/composer/</a></td>
<td>腾讯云</td>
<td>24 小时</td>
<td>-</td>
</tr>
<tr>
<td>PHP 国内 Composer 镜像</td>
<td><a href="https://links.jianshu.com/go?to=https://packagist.phpcomposer.com">https://packagist.phpcomposer.com</a></td>
<td>仁润股份</td>
<td>24 小时</td>
<td>不稳定</td>
</tr>
<tr>
<td>华为云 Composer 镜像</td>
<td><a href="https://links.jianshu.com/go?to=https://repo.huaweicloud.com/repository/php/">https://repo.huaweicloud.com/repository/php/</a></td>
<td>华为云</td>
<td>未知</td>
<td>未知</td>
</tr>
<tr>
<td>php.cnpkg.org Composer 镜像</td>
<td><a href="https://links.jianshu.com/go?to=https://php.cnpkg.org">https://php.cnpkg.org</a></td>
<td>安畅网络</td>
<td>60 秒</td>
<td>-</td>
</tr>
</tbody></table>
<p>配置阿里云</p>
<pre class="language-none"><code class="language-none">composer config -g repos.packagist composer https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;composer&#x2F;</code></pre>

<p>安装 Laravel 安装器</p>
<pre class="language-none"><code class="language-none">composer global require &quot;laravel&#x2F;installer&quot;</code></pre>

<p>创建项目</p>
<pre class="language-none"><code class="language-none">laravel new projectName</code></pre>

<p>创建laravel其他版本项目</p>
<pre class="language-none"><code class="language-none">composer create-project --prefer-dist laravel&#x2F;laravel 项目名 &quot;5.8.*&quot;</code></pre>

<p>Breeze 套件</p>
<p><a href="http://laravel.p2hp.com/cndocs/9.x/starter-kits">http://laravel.p2hp.com/cndocs/9.x/starter-kits</a></p>
<pre class="language-none"><code class="language-none">php artisan breeze:install

npm install
npm run dev
php artisan migrate</code></pre>

<h1 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h1><p><a href="https://learnku.com/docs/laravel/8.5/migrations/10406#introduction">https://learnku.com/docs/laravel/8.5/migrations/10406#introduction</a></p>
<pre class="language-none"><code class="language-none">php artisan make:migration User</code></pre>

<p>迁移文件</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Migrations<span class="token punctuation">\</span>Migration</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Schema<span class="token punctuation">\</span>Blueprint</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Schema</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Migration</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * Run the migrations.
     *
     * @return void
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//</span>
        <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">increments</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'power'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'superior'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">timestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * Reverse the migrations.
     *
     * @return void
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>运行迁移</p>
<pre class="language-none"><code class="language-none">php artisan migrate</code></pre>

<h1 id="数据填充"><a href="#数据填充" class="headerlink" title="数据填充"></a>数据填充</h1><pre class="language-none"><code class="language-none">php artisan make:seeder UserSeeder</code></pre>

]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器的使用</title>
    <url>/2021/11/18/%E5%BC%80%E5%8F%91/docker/</url>
    <content><![CDATA[<p>Docker容器的基本使用</p>
<span id="more"></span>

<h1 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h1><p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070907756.png" loading="lazy"><br><code>E:\8963Notes_push\8963repository\img</code></p>
<p>尝试运行容器:将此命令复制并粘贴到终端:</p>
<pre class="language-none"><code class="language-none">docker run -d -p 80:80 docker&#x2F;getting-started</code></pre>

<p><a href="https://www.runoob.com/docker/docker-run-command.html">docker run</a></p>
<ul>
<li><p><code>docker run</code>创建一个新的容器并运行一个命令</p>
</li>
<li><p><code>-d</code> 后台运行容器，并返回容器ID；</p>
</li>
<li><p><code>-p</code> 指定端口映射，格式为：主机(宿主)端口:容器端口</p>
</li>
<li><p><code>docker/getting-started</code>  镜像名称</p>
</li>
</ul>
<p>运行结果:</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070907264.png" loading="lazy"></p>
<p><a href="https://m.runoob.com/docker/docker-command-manual.html">Docker 命令大全</a></p>
<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h1><pre class="language-none"><code class="language-none">docker run ubuntu:15.10 &#x2F;bin&#x2F;echo &quot;Hello world&quot;</code></pre>

<ul>
<li><code>docker run</code> 运行一个容器</li>
<li><code>ubuntu:15.10</code> 指定运行的镜像</li>
<li><code>/bin/echo &quot;Hello world&quot;</code> 在启动的容器里面执行命令</li>
</ul>
<p>此命令的完整解释为,Docker 以 ubuntu15.10 镜像创建了一个新容器,然后在容器里面执行 bin&#x2F;echo “Hello world” 然后输出结果.</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070907670.png" loading="lazy"></p>
<h2 id="运行交互式容器"><a href="#运行交互式容器" class="headerlink" title="运行交互式容器"></a>运行交互式容器</h2><pre class="language-none"><code class="language-none">docker run -i -t ubuntu:15.10 &#x2F;bin&#x2F;bash</code></pre>

<ul>
<li><code>-i</code>  以交互模式运行容器，通常与 -t 同时使用；</li>
<li><code>-t</code>  为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
</ul>
<p>此时,就已经进入了一个<code>ubuntu15.10</code>系统的容器</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070907321.png" loading="lazy"></p>
<p>可以在此ubuntu容器中查看</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070907647.png" loading="lazy"></p>
<p>退出容器</p>
<pre class="language-none"><code class="language-none"># exit
或者
Ctrl+D</code></pre>



<h2 id="启动后台运行的容器"><a href="#启动后台运行的容器" class="headerlink" title="启动后台运行的容器"></a>启动后台运行的容器</h2><p>使用以下命令创建一个以进程方式运行的容器</p>
<pre class="language-none"><code class="language-none">docker run -d ubuntu:15.10 &#x2F;bin&#x2F;sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</code></pre>

<ul>
<li><code>-d</code>  后台运行容器，并返回容器ID；</li>
</ul>
<p>此处输出的就是此命令运行的容器的ID</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908032.png" loading="lazy"></p>
<p>运行<code>docker ps</code> 查看所有正在运行的容器</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908863.png" loading="lazy"></p>
<p>关于容器的状态:</p>
<ul>
<li>created（已创建）</li>
<li>restarting（重启中）</li>
<li>running 或 Up（运行中）</li>
<li>removing（迁移中）</li>
<li>paused（暂停）</li>
<li>exited（停止）</li>
<li>dead（死亡）</li>
</ul>
<p>在宿主主机内使用 <code>docker logs</code> 命令，查看容器内的标准输出：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908288.png" loading="lazy"></p>
<p><a href="https://www.runoob.com/docker/docker-logs-command.html">docker logs</a> 的后面可以跟<strong>容器的ID</strong>和<strong>容器的名称</strong>,以获取获取容器的日志</p>
<h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><p>使用命令</p>
<pre class="language-none"><code class="language-none">docker stop 容器的ID或者容器的名称</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908174.png" loading="lazy"></p>
<h1 id="使用容器"><a href="#使用容器" class="headerlink" title="使用容器"></a>使用容器</h1><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><pre class="language-none"><code class="language-none">$ docker pull 镜像的名称</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908045.png" loading="lazy"></p>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>使用 ubuntu 镜像启动一个容器</p>
<pre class="language-none"><code class="language-none">$ docker run -it ubuntu &#x2F;bin&#x2F;bash</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908813.png" loading="lazy"></p>
<ul>
<li><code>-i</code> 交互式操作。</li>
<li><code>-t</code>  终端。</li>
<li><code>ubuntu</code> ubuntu 镜像。</li>
<li><code>/bin/bash</code> 放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</li>
</ul>
<h2 id="启动和停止的容器"><a href="#启动和停止的容器" class="headerlink" title="启动和停止的容器"></a>启动和停止的容器</h2><p>启动已停止运行的容器:</p>
<pre class="language-none"><code class="language-none">$ docker start 容器的ID</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908784.png" loading="lazy"></p>
<p>停止运行的容器:</p>
<pre class="language-none"><code class="language-none">docker stop 容器ID</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908907.png" loading="lazy"></p>
<h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><pre class="language-none"><code class="language-none">$ docker run -itd --name ubuntu-test ubuntu &#x2F;bin&#x2F;bash</code></pre>

<ul>
<li><code>--name=&quot;****&quot;</code> 为容器指定一个名称；</li>
<li><code>-d</code> 后台运行容器，并返回容器ID</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908736.png" loading="lazy"></p>
<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>在使用 <strong>-d</strong> 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p>
<pre class="language-none"><code class="language-none">docker attach 容器ID
或者
docker exec 容器ID  &#x2F;&#x2F; 推荐使用</code></pre>

<p><strong>注意：</strong>使用 <code>docker attach</code>启动的容器, 如果从这个容器退出，会导致容器的停止。</p>
<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><pre class="language-none"><code class="language-none">$ docker rm -f 容器的ID或者名称</code></pre>



<h2 id="导出-导入容器"><a href="#导出-导入容器" class="headerlink" title="导出\导入容器"></a>导出\导入容器</h2><p>如果要导出本地某个容器，可以使用 <strong>docker export</strong> 命令。</p>
<pre class="language-none"><code class="language-none">docker export 容器ID &gt; ubuntu.tar</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908407.png" loading="lazy"></p>
<p>可以使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 ubuntu.tar 导入到镜像 test&#x2F;ubuntu:v1:</p>
<pre class="language-none"><code class="language-none">cat docker&#x2F;ubuntu.tar | docker import - test&#x2F;ubuntu:v1</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908345.png" loading="lazy"></p>
<p>此外，也可以通过指定 URL 或者某个目录来导入</p>
<h1 id="运行一个WEB应用"><a href="#运行一个WEB应用" class="headerlink" title="运行一个WEB应用"></a>运行一个WEB应用</h1><p>尝试使用 docker 构建一个 web 应用程序。将在docker容器中运行一个 Python Flask 应用来运行一个web应用。</p>
<pre class="language-none"><code class="language-none"># 载入镜像
docker pull training&#x2F;webapp  
# 
docker run -d -P training&#x2F;webapp python app.py</code></pre>

<ul>
<li><code>-d</code> 让容器在后台运行。</li>
<li><code>-P</code> 将容器内部使用的网络端口随机映射到我们使用的主机上。</li>
</ul>
<p>在主机使用映射的端口启动的web服务</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908876.png" loading="lazy"></p>
<h2 id="重置端口"><a href="#重置端口" class="headerlink" title="重置端口"></a>重置端口</h2><pre class="language-none"><code class="language-none">docker run -d -p 5000:5000 training&#x2F;webapp python app.py</code></pre>

<p>重置映射到5000端口</p>
<h2 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h2><pre class="language-none"><code class="language-none">docker port 容器ID</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908007.png" loading="lazy"></p>
<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><pre class="language-none"><code class="language-none">docker logs -f 容器ID</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908656.png" loading="lazy"></p>
<h2 id="查看WEB应用程序容器的进程"><a href="#查看WEB应用程序容器的进程" class="headerlink" title="查看WEB应用程序容器的进程"></a>查看WEB应用程序容器的进程</h2><pre class="language-none"><code class="language-none">docker top 容器ID</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908117.png" loading="lazy"></p>
<h2 id="检查web应用"><a href="#检查web应用" class="headerlink" title="检查web应用"></a>检查web应用</h2><pre class="language-none"><code class="language-none">docker inspect 容器ID</code></pre>

<p>可以查看 Docker 的底层信息。它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。</p>
<h2 id="停止-启动-删除-web应用程序"><a href="#停止-启动-删除-web应用程序" class="headerlink" title="停止\启动\删除 web应用程序"></a>停止\启动\删除 web应用程序</h2><p>docker ps -l 查询最后一次创建的容器：</p>
<pre class="language-none"><code class="language-none"># 停止
docker stop 容器ID
# 启动
docker start 容器ID
# 删除 
docker rm 容器ID</code></pre>

<p>删除容器时，容器必须是停止状态</p>
<h1 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h1><h2 id="显示镜像"><a href="#显示镜像" class="headerlink" title="显示镜像"></a>显示镜像</h2><pre class="language-none"><code class="language-none">docker images</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908263.png" loading="lazy"></p>
<p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p>
<p>如果要使用版本为15.10的ubuntu系统镜像来运行容器时，使用此命令</p>
<pre class="language-none"><code class="language-none">docker run -t -i ubuntu:14.04 &#x2F;bin&#x2F;bash </code></pre>

<p>如果你不指定一个镜像的版本标签，docker 将默认使用 ubuntu:latest 镜像。</p>
<h2 id="获取镜像-1"><a href="#获取镜像-1" class="headerlink" title="获取镜像"></a>获取镜像</h2><pre class="language-none"><code class="language-none">docker pull 镜像名称</code></pre>



<h2 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h2><pre class="language-none"><code class="language-none">docker search 镜像名称</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908129.png" loading="lazy"></p>
<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><pre class="language-none"><code class="language-none">docker rmi 镜像ID</code></pre>





<h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><h2 id="Docker下载太慢"><a href="#Docker下载太慢" class="headerlink" title="Docker下载太慢"></a>Docker下载太慢</h2><p>切换镜像,使用<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">阿里云镜像加速器</a>配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070908920.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用</title>
    <url>/2020/04/10/%E5%BC%80%E5%8F%91/git/</url>
    <content><![CDATA[<p>git的基本使用</p>
<span id="more"></span>

<h1 id="git-相关名词解释"><a href="#git-相关名词解释" class="headerlink" title="git 相关名词解释"></a>git 相关名词解释</h1><ul>
<li><p>工作区（Working Directory）</p>
<p>就是你在电脑里能看到的 git 目录</p>
</li>
<li><p>版本库（Repository）</p>
<p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是 Git 的版本库。</p>
</li>
<li><p>暂存区</p>
<p>在版本库内 , 暂存区也称 stage（或者叫 index）</p>
</li>
<li><p>分支</p>
<p>Git 的分支，其实本质上仅仅是指向提交对象的可变指针。</p>
<p>Git 的默认分支名字是 <code>master</code>。</p>
</li>
<li><p>HEAD 指针</p>
<p>指向<code>master</code> , HEAD 指向的版本就是当前版本</p>
</li>
</ul>
<h1 id="首次运行-Git-配置"><a href="#首次运行-Git-配置" class="headerlink" title="首次运行 Git 配置"></a>首次运行 Git 配置</h1><p>配置用户信息</p>
<p>安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改：</p>
<p> $ git config –global user.name “用户名称”<br> $ git config –global user.email “用户email”</p>
<h1 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h1><p>空文件夹 或者 有内容文件夹 都可以使用此命令创建仓库</p>
<p> $ git init</p>
<p>执行后生成一个 <code>.git</code> 文件夹</p>
<h1 id="本地提交文件"><a href="#本地提交文件" class="headerlink" title="本地提交文件"></a>本地提交文件</h1><blockquote>
<p>先添加文件,再提交文件</p>
</blockquote>
<p>把单个文件添加到仓库</p>
<p> $ git add 文件名</p>
<p>把所有文件添加到仓库</p>
<p> $ git add .</p>
<p>把文件提交到仓库</p>
<p> $ git commit -m “commit message”</p>
<p>在团队合作中 , 每人每次 commit 应当注意一定的规范</p>
<p>查看文件状态:</p>
<p> git status</p>
<p>提交过程</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070912771.png" loading="lazy"></p>
<h1 id="commit-规范"><a href="#commit-规范" class="headerlink" title="commit 规范"></a>commit 规范</h1><p><strong>commit message 格式</strong></p>
<p> <type>(<scope>): <subject></p>
<p>说明:</p>
<p><strong>type(必须)</strong></p>
<p>用于说明 git commit 的类别，只允许使用下面的标识。</p>
<ul>
<li><p>feat：新功能（feature）</p>
</li>
<li><p>fix&#x2F;to：修复 bug</p>
<ul>
<li><p>fix：产生 diff 并自动修复此问题。适合于一次提交直接修复问题</p>
</li>
<li><p>to：只产生 diff 不自动修复此问题。适合于多次提交。最终修复问题提交时使用 fix</p>
</li>
</ul>
<blockquote>
<p>git diff：是查看 workspace（工作区） 与 index（暂存区） 的差别的。</p>
</blockquote>
</li>
<li><p>docs：文档（documentation）</p>
</li>
<li><p>style：格式（不影响代码运行的变动）</p>
</li>
<li><p>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）。</p>
</li>
<li><p>perf：优化相关，比如提升性能、体验。</p>
</li>
<li><p>test：增加测试。</p>
</li>
<li><p>chore：构建过程或辅助工具的变动。</p>
</li>
<li><p>revert：回滚到上一个版本。</p>
</li>
<li><p>merge：代码合并。</p>
</li>
<li><p>sync：同步主线或分支的 Bug。</p>
</li>
</ul>
<p><strong>scope(可选)</strong></p>
<p>scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>
<p><strong>subject(必须)</strong></p>
<p>subject 是 commit 目的的简短描述，不超过 50 个字符。</p>
<p>例如:</p>
<p> fix(DAO):用户查询缺少username属性<br> feat(Controller):用户查询接口开发</p>
<h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><p>查看历史提交记录</p>
<p>$ git log# 格式化日志输出$ git log –pretty&#x3D;oneline</p>
<p>回退上一个版本</p>
<p>$ git reset –hard HEAD^</p>
<p>回退指定版本, 版本号可以通过 git log 查询到 或者 回退日志</p>
<p>$ git reset –hard 版本号</p>
<p>查看回退日志</p>
<p>$ git reflog</p>
<h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><p>工作区中删除 , 即自己的电脑目录中</p>
<p>$ rm file</p>
<p>从版本库中删除文件</p>
<p>$ git rm file</p>
<p>提交更新</p>
<p>$ git commit -m “remove file”</p>
<p>删错了,版本库内还有</p>
<p>$ git checkout – file</p>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>分支的作用 :</p>
<blockquote>
<p>正常规范的开发需要两个主要分支 , master 和 develop</p>
<p>简单模拟一个 分支管理 开发流程 :</p>
<ol>
<li><p>创建仓库 , master 主分支一并被创建</p>
</li>
<li><p>在 master 分支中创建, develop 分支</p>
</li>
<li><p>项目进入开发阶段</p>
</li>
<li><p>在 develop 分支中 创建 用户模块 user 分支 ,由开发人员 A 负责</p>
</li>
<li><p>在 develop 分支中 又创建 数据模块 data 分支 ,由开发人员 B 负责</p>
</li>
<li><p>…… 不断在 develop 中创建分支分配开发任务</p>
</li>
<li><p>开发人员 A 的 用户模块 开发完成 测试无误后 , 将 user 分支合并至 develop 分支 , 并删除 user 分支</p>
</li>
<li><p>开发人员 B 或者其他开发人员 开发完成后同样执行此项操作</p>
</li>
<li><p>计划发布的版本功能已经完成 , 已经合并至 develop 分支 , 经过测试后 , 可以将 develop 分支 合并至 master 主分支 ,生成项目的 v1 版本</p>
</li>
</ol>
</blockquote>
<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><p>查看分支 , 当前分支 即 HEAD 指向的分支名前会有一个 <code>*</code>号</p>
<p>$ git branch</p>
<p>创建分支</p>
<p>$ git checkout -b 分支名称</p>
<p>切换分支 , 即切换 HEAD</p>
<p>$ git checkout 要切换的分支名# 或者$ git switch 要切换的分支名</p>
<p>创建并切换到新的分支</p>
<p>$ git checkout -b 分支名称$ git switch -c 分支名称</p>
<p>合并分支</p>
<p>$ git merge 被合并的分支名</p>
<p><code>git merge</code>命令用于合并指定分支到当前分支。</p>
<p>删除分支</p>
<p>$ git branch -d 分支名称</p>
<h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2><p>使用 分支管理 开发流程 的例子说明一下冲突</p>
<blockquote>
<p>开发人员 A 在 user 分支 创建了 login 分支进行登录功能的开发</p>
<p>开发人员 A 在 login 分支对 readme.md 文件做了修改,并提交</p>
<p>第二天 , 开发人员 A 忘记了昨天在 login 分支 上修改了 readme.md 文件 ,然后他在 user 分支上又修改了一次并提交.</p>
<p>当他把 login 分支 合并到 user 分支 时,因为两个分支上提交的 readme.md 文件 不一致,git 在合并时不知道哪个分支上的内容是正确的,便会报错 文件有冲突.</p>
</blockquote>
<p>解决冲突 :</p>
<p>查看冲突文件</p>
<p>$ git status</p>
<p>打开冲突文件查看冲突的内容</p>
<p>Git 用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，例如</p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADCreating a new branch is quick &amp; simple.&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Creating a new branch is quick AND simple.&gt;&gt;&gt;&gt;&gt;&gt;&gt; login</p>
<p>将内容修改 , 再次提交</p>
<p>$ git add readme.md$ git commit -m “conflict fixed”</p>
<p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p>
<p>$ git log –graph –pretty&#x3D;oneline –abbrev-commit</p>
<p>当 Git 无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>
<p>解决冲突就是把 Git 合并失败的文件手动编辑为我们希望的内容，再提交。</p>
<h1 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h1><p>远程仓库仓库 , 常见 :</p>
<p>gitee (阿里系 ,稳定) , github (建议 vpn) ,coding (代替品) , BitBucket (无限制私人库)</p>
<h2 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h2><p>先在 远程 gitee 或者 github 中创建一个仓库 , 根据提示</p>
<p>当在本地存在一个 git 仓库时</p>
<p>git remote add origin 新仓库的地址# 提交到远程git push -u origin master</p>
<p>当本地不存在 git 仓库时,创建一个本地仓库与远程仓库关联</p>
<p>mkdir NewRepositorycd NewRepositorygit initgit remote add origin 新仓库的地址# 提交到远程git push -u origin master</p>
<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git 不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<p>第一次提交成功后, 每次提交都可以使用</p>
<p>$ git push origin master</p>
<h2 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h2><p>即 : 本地与远程解除关联</p>
<p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息,然后，根据名字删除，比如删除<code>origin</code>：</p>
<p>$ git remote rm 仓库名</p>
<p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到 GitHub，在后台页面找到删除按钮再删除。</p>
<h2 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h2><p>此命令将克隆整个仓库</p>
<p>$ git clone 远程仓库地址</p>
<p>克隆远程仓库的时候，自定义本地仓库的名字，你可以通过额外的参数指定新的目录名：</p>
<p>$ git clone 远程仓库地址 mylibgit</p>
<p>克隆指定单个分支</p>
<p>git clone -b +分支名+远程仓库地址git clone -b <branch-name> <remote-url></p>
<h1 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h1><p><code>Failed to connect to github.com port 443 after 21038 ms: Timed out</code></p>
<p>设置代理，取消代理</p>
<pre class="language-none"><code class="language-none">git config --global https.proxy
git config --global --unset https.proxy</code></pre>



<p><code>OpenSSL SSL_read: Connection was reset, errno 10054</code></p>
<p>解除SSL验证</p>
<pre class="language-none"><code class="language-none">git config --global http.sslVerify &quot;false&quot;</code></pre>

]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode</title>
    <url>/2022/09/18/%E5%BC%80%E5%8F%91/vscode/</url>
    <content><![CDATA[<p>vscode 插件配置</p>
<span id="more"></span>

<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="Volar"><a href="#Volar" class="headerlink" title="Volar"></a>Volar</h2><p>Vue 官方推荐的 VSCode 扩展，用以代替 Vue 2 时代的 <a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur</a> ，提供了 Vue 3 的语言支持、 TypeScript 支持、基于 <a href="https://github.com/johnsoncodehk/volar/tree/master/packages/vue-tsc">vue-tsc</a> 的类型检查等功能。</p>
<h2 id="Vue-VSCode-Snippets"><a href="#Vue-VSCode-Snippets" class="headerlink" title="Vue VSCode Snippets"></a>Vue VSCode Snippets</h2><p>从实际使用 Vue 的角度提供 Vue 代码片段的生成，可以通过简单的命令，在 .vue 文件里实现大篇幅的代码片段生成</p>
<ol>
<li>输入 <code>ts</code> 可以快速创建一个包含了 <code>template</code> + <code>script</code> + <code>style</code> 的 Vue 组件模板（可选 2.x 、3.x 以及 class 风格的模板）</li>
<li>也可以通过输入带有 <code>v3</code> 开头的指令来快速生成 Vue 3 的 API 。</li>
</ol>
<h2 id="Auto-Close-Tag"><a href="#Auto-Close-Tag" class="headerlink" title="Auto Close Tag"></a>Auto Close Tag</h2><p>可以快速完成 HTML 标签的闭合</p>
<h2 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a>Auto Rename Tag</h2><p>同时修改标签头尾</p>
<h2 id="EditorConfig-for-VSCode"><a href="#EditorConfig-for-VSCode" class="headerlink" title="EditorConfig for VSCode"></a>EditorConfig for VSCode</h2><p>一个可以让编辑器遵守协作规范的插件</p>
<h2 id="Prettier-for-VSCode"><a href="#Prettier-for-VSCode" class="headerlink" title="Prettier for VSCode"></a>Prettier for VSCode</h2><p>安装该扩展之后，单纯在 VSCode 使用 Pretter 进行代码格式化。</p>
<p>点击访问：<a href="https://prettier.io/">Prettier 官网</a> 了解更多配置。</p>
<h2 id="ESLint-for-VSCode"><a href="#ESLint-for-VSCode" class="headerlink" title="ESLint for VSCode"></a>ESLint for VSCode</h2><p>这是 <a href="https://vue3.chengpeiquan.com/upgrade.html#eslint">ESLint</a> 在 VSCode 的一个扩展， TypeScript 项目基本都开了 ESLint ，编辑器也建议安装该扩展支持以便获得更好的代码提示。</p>
<p>点击访问：<a href="https://eslint.org/">ESLint 官网</a> 了解更多配置。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongodb中级操作</title>
    <url>/2021/01/29/%E6%95%B0%E6%8D%AE%E5%BA%93/Mongodb%E4%B8%AD%E7%BA%A7%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="MongoDB-排序-amp-分页"><a href="#MongoDB-排序-amp-分页" class="headerlink" title="MongoDB 排序&amp;分页"></a>MongoDB 排序&amp;分页</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备数据库和数据</p>
<pre class="language-none"><code class="language-none">use test3
db.c1.insert(&#123;_id1:1,name:&quot;a&quot;,sex:1,age:1&#125;)
db.c1.insert(&#123;_id1:2,name:&quot;a&quot;,sex:1,age:2&#125;)
db.c1.insert(&#123;_id1:3,name:&quot;b&quot;,sex:2,age:3&#125;)
db.c1.insert(&#123;_id1:4,name:&quot;c&quot;,sex:2,age:4&#125;)
db.c1.insert(&#123;_id1:5,name:&quot;d&quot;,sex:2,age:5&#125;)

db.c1.find()</code></pre>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><strong>语法</strong></p>
<pre class="language-none"><code class="language-none">db.集合名.find().sort(&#123;键：值&#125;)
					键：要排序的列&#x2F;字段
					值：1升序，-1降序</code></pre>

<p><strong>练习：</strong>根据年龄的升序、降序</p>
<pre class="language-none"><code class="language-none">db.c1.find().sort(&#123;age:1&#125;)
db.c1.find().sort(&#123;age:-1&#125;)</code></pre>

<h2 id="Limit-与-Skip-方法"><a href="#Limit-与-Skip-方法" class="headerlink" title="Limit 与 Skip 方法"></a>Limit 与 Skip 方法</h2><p><strong>语法：</strong></p>
<pre class="language-none"><code class="language-none">db.集合名.find().sort(&#123;键：值&#125;).skip(数字).limit(数字)</code></pre>

<blockquote>
<p>skip 跳过指定数量（可选），limit 限制查询的数量</p>
</blockquote>
<p><strong>练习：</strong>1-降序查询 2 条，2-降序跳过 2 条并查询 2 条</p>
<pre class="language-none"><code class="language-none">db.c1.find().sort(&#123;age:-1&#125;).limit(2)
db.c1.find().sort(&#123;age:-1&#125;).skip(2).limit(2)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070713610.png" loading="lazy"></p>
<p><strong>实战分页</strong></p>
<p>需求：数据库 1-10 数据，每页显示两条（5 页）</p>
<p>语法：</p>
<pre class="language-none"><code class="language-none">db.c1.find(2).skip((当前页-1)*每页显示条数).limit(2)</code></pre>

<h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>排序、分页</p>
<pre class="language-none"><code class="language-none">db.集合名.find()
.sort(&#123;键：值&#125;)
.skip(跳过数)
.limit(显示数)
.count(总数量);</code></pre>

<h1 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h1><p>统计数据、分组统计</p>
<p>聚合查询把数据聚起来，然后统计</p>
<p><strong>语法：</strong></p>
<pre class="language-none"><code class="language-none">db.集合名.aggregate([
	&#123;管道:&#123;表达式&#125;&#125;
	...
])</code></pre>

<p>常用管道</p>
<pre class="language-none"><code class="language-none">$group	将集合中的文档分组用于统计集合
$match	过滤数据，只要输出符合条件的文档
$sort		聚合数据进一步排序
$skip		跳过指定文档数
$limit	限制返回文档数...</code></pre>

<p>常用表达式</p>
<pre class="language-none"><code class="language-none">$sum	总和$avg	平均$min	最小值$max	最大值</code></pre>

<h2 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h2><pre class="language-none"><code class="language-none">use test4db.c1.insert(&#123;_id:1,name:&quot;a&quot;,sex:&quot;1&quot;,age:1&#125;)db.c1.insert(&#123;_id:2,name:&quot;b&quot;,sex:&quot;1&quot;,age:2&#125;)db.c1.insert(&#123;_id:3,name:&quot;c&quot;,sex:&quot;2&quot;,age:3&#125;)db.c1.insert(&#123;_id:4,name:&quot;d&quot;,sex:&quot;2&quot;,age:4&#125;)db.c1.insert(&#123;_id:5,name:&quot;e&quot;,sex:&quot;2&quot;,age:5&#125;)db.c1.find()</code></pre>

<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul>
<li>统计男生、女生总年龄</li>
</ul>
<blockquote>
<pre class="language-none"><code class="language-none">db.c1.aggregate([	&#123;$group:&#123;		_id:&quot;$sex&quot;,		rs:&#123;$sum:&quot;$age&quot;&#125;	&#125;&#125;])&#x2F;&#x2F;	_id:根据哪个字段分组,列、字段需要使用 $ 符&#x2F;&#x2F;	rs:结果如何显示</code></pre>
</blockquote>
<ul>
<li>统计男生、女生总人数</li>
</ul>
<blockquote>
<pre class="language-none"><code class="language-none">db.c1.aggregate([	&#123;$group:&#123;		_id:&quot;$sex&quot;,		rs:&#123;$sum:1&#125;	&#125;&#125;])</code></pre>
</blockquote>
<ul>
<li>求学生总数和平均年龄</li>
</ul>
<blockquote>
<pre class="language-none"><code class="language-none">db.c1.aggregate([	&#123;$group:&#123;			_id:null,			rs1:&#123;$sum:1&#125;,			rs2:&#123;$avg:&quot;$age&quot;&#125;		&#125;&#125;])</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070714406.png" loading="lazy"></p>
</blockquote>
<ul>
<li>查询男生、女生人数，按人数升序</li>
</ul>
<blockquote>
<pre class="language-none"><code class="language-none">db.c1.aggregate([	&#123;$group:&#123;		_id:&quot;$sex&quot;,		rs:&#123;$sum:1&#125;	&#125;&#125;,	&#123;$sort:&#123;rs:1&#125;&#125;])</code></pre>
</blockquote>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引：一种排序好的便于快速查询的数据结构</p>
<p><strong>语法</strong></p>
<ul>
<li><p>创建索引</p>
<pre class="language-none"><code class="language-none">db.集合名.createIndex(待创建索引的列[,额外选项])</code></pre>
</li>
<li><p>参数</p>
<blockquote>
<p>待创建索引的列：{键：1…，键：-1}</p>
<p>说明：1 升序，-1 降序，例如{age}表示创建 age 索引并按照升序的方式存储</p>
<p>额外选项：设置索引的名称或者唯一的索引等等</p>
</blockquote>
</li>
<li><p>删除索引</p>
<blockquote>
<p>全部删除：db.集合名.dropIndexes()</p>
<p>删除指定：db.集合名.dropIndex(索引名)</p>
</blockquote>
</li>
<li><p>查看索引</p>
<blockquote>
<p>db.集合名.getIndexes()</p>
</blockquote>
</li>
</ul>
<h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><p><strong>准备：</strong>向数据库新增十万条数据</p>
<pre class="language-none"><code class="language-none">use test5for(var i&#x3D;0;i&lt;100000;i++)&#123;	db.c1.insert(&#123;name:&quot;aaa&quot;+i,age:i&#125;)&#125;db.c1.count()</code></pre>

<p><strong>练习 1：给 name 添加普通索引</strong></p>
<blockquote>
<pre class="language-none"><code class="language-none">db.c1.createIndex(&#123;name:1&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070717992.png" loading="lazy"></p>
</blockquote>
<p><strong>练习 2：删除 name 索引</strong></p>
<blockquote>
<pre class="language-none"><code class="language-none">db.c1.dropIndex(&#39;name_1&#39;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070713617.png" loading="lazy"></p>
</blockquote>
<p><strong>练习 3：给 name 创建索引并起名 web</strong></p>
<blockquote>
<pre class="language-none"><code class="language-none">db.c1.createIndex(&#123;name:1&#125;,&#123;name:&quot;web&quot;&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070713613.png" loading="lazy"></p>
</blockquote>
<p><strong>练习 4：</strong>创建复合&#x2F;组合索引，给 name 和 age 添加组合索引</p>
<blockquote>
<pre class="language-none"><code class="language-none">db.集合名.createIndex(&#123;键1：存储方式，键：存储方式&#125;)db.c1.createIndex(&#123;name:1,age:1&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070713643.png" loading="lazy"></p>
</blockquote>
<p><strong>练习 5：</strong>创建唯一索引，给 name 添加普通索引</p>
<blockquote>
<p>删除全部索引</p>
<pre class="language-none"><code class="language-none">db.c1.dropIndexes()</code></pre>

<p>设置唯一索引</p>
<pre class="language-none"><code class="language-none">db.c1.createIndex(&#123;name:1&#125;,&#123;unique:&quot;name&quot;&#125;)</code></pre>

<p>测试唯一索引的特性</p>
<pre class="language-none"><code class="language-none">db.c1.insert(&#123;name:&quot;a&quot;&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070713575.png" loading="lazy"></p>
</blockquote>
<h2 id="分析索引"><a href="#分析索引" class="headerlink" title="分析索引"></a>分析索引</h2><p>语法：</p>
<pre class="language-none"><code class="language-none">db.集合名.find().explain(&#39;executionStats&#39;)</code></pre>

<p>分析查询情况</p>
<p>案例</p>
<blockquote>
<p>1.age 未添加索引</p>
<pre class="language-none"><code class="language-none">db.c1.find(&#123;age:18&#125;).explain(&#39;executionStats&#39;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070713882.png" loading="lazy"></p>
<p>2.age 添加索引</p>
<pre class="language-none"><code class="language-none">db.c1.createIndex(&#123;age:1&#125;)db.c1.find(&#123;age:18&#125;).explain(&#39;executionStats&#39;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070714205.png" loading="lazy"></p>
</blockquote>
<h2 id="选择规则"><a href="#选择规则" class="headerlink" title="选择规则"></a>选择规则</h2><ul>
<li>为常作条件、排序、分组的字段建立索引</li>
<li>选择唯一性索引</li>
<li>选择较小的数据列</li>
<li>为较长的字符串使用前缀索引</li>
</ul>
<h1 id="Mongodb-权限机制"><a href="#Mongodb-权限机制" class="headerlink" title="Mongodb 权限机制"></a>Mongodb 权限机制</h1><p>使用权限机制开启验证模式</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="language-none"><code class="language-none">db.createUser(&#123;	&quot;user&quot;:&quot;账号&quot;,	&quot;pwd&quot;:&quot;密码&quot;,	&quot;roles&quot;:[&#123;		role:&quot;角色&quot;,		db:&quot;所属数据库&quot;	&#125;]&#125;)</code></pre>

<h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><pre class="language-none"><code class="language-none">#角色种类超级用户角色:root
数据库用户角色:read、readwrite;
数据库管理角色: dbAdmin.userAdmin;
集群管理角色: clusterAdmin、clusterManager、clusterMonitor、hostManager;
备份恢复角色:backup、restore;
所有数据库角色: readAnyDatabase、readwriteAnyDatabase、userAdminAnyDatabase,dbAdminAnyDatabase</code></pre>

<h2 id="开启验证模式"><a href="#开启验证模式" class="headerlink" title="开启验证模式"></a>开启验证模式</h2><ol>
<li><p>添加超级管理员</p>
<pre class="language-none"><code class="language-none">use admindb.createUser(&#123;	&quot;user&quot;:&quot;8963&quot;,	&quot;pwd&quot;:&quot;8963root&quot;,	&quot;roles&quot;:[&#123;		role:&quot;root&quot;,		db:&quot;admin&quot;	&#125;]&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070714313.png" loading="lazy"></p>
<p>数据中查看超级管理员</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070713223.png" loading="lazy"></p>
</li>
<li><p>退出卸载服务</p>
<pre class="language-none"><code class="language-none">管理员命令bin\mongod --remove</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070713174.png" loading="lazy"></p>
</li>
<li><p>安装需要身份验证的 MongoDB 服务</p>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F; 安装服务 --authmongod --install --dbpath F:\data\mongodb\data --logpath F:\data\mongodb\logs\mongodb2.log --auth</code></pre>
</li>
<li><p>启动服务，登录测试</p>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F; 启动服务net start MongoDB</code></pre></li>
</ol>
<h2 id="通过超级管理员账号登录"><a href="#通过超级管理员账号登录" class="headerlink" title="通过超级管理员账号登录"></a>通过超级管理员账号登录</h2><p>方法 1: mongo 服务器 IP 地址:端口&#x2F;数据库 -u 用户名 -p 密码</p>
<pre class="language-none"><code class="language-none">mongo 127.0.0.1:27017&#x2F;admin -u 8963 -p 8963root</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070715055.png" loading="lazy"></p>
<p>方法 2: a-先登录，b-选择数据库，c-输入 db.auth(用户名,密码)</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070713506.png" loading="lazy"></p>
<h2 id="创建其他角色"><a href="#创建其他角色" class="headerlink" title="创建其他角色"></a>创建其他角色</h2><h3 id="准备-2"><a href="#准备-2" class="headerlink" title="准备"></a>准备</h3><p>添加用户 shop1 可以读取 shop 数据库</p>
<p>添加用户 shop2 可以读写 shop 数据库</p>
<p>注意：在对应的数据库内创建角色</p>
<p>测试数据</p>
<pre class="language-none"><code class="language-none">use shop;for(var i &#x3D; 1;i &lt;&#x3D; 10;i++)&#123;	db.goods.insert(&#123;&quot;name&quot;:&quot;goodName&quot;+i,&quot;price&quot;:i&#125;);&#125;</code></pre>

<h3 id="添加用户并设置权限"><a href="#添加用户并设置权限" class="headerlink" title="添加用户并设置权限"></a>添加用户并设置权限</h3><pre class="language-none"><code class="language-none">shop1use shopdb.createUser(&#123;	&quot;user&quot;:&quot;shop1&quot;,	&quot;pwd&quot;:&quot;admin888&quot;,	&quot;roles&quot;:[&#123;		role:&quot;read&quot;,		db:&quot;shop&quot;	&#125;]&#125;)&#x2F;&#x2F; shop2db.createUser(&#123;	&quot;user&quot;:&quot;shop2&quot;,	&quot;pwd&quot;:&quot;admin888&quot;,	&quot;roles&quot;:[&#123;		role:&quot;readWrite&quot;,		db:&quot;shop&quot;	&#125;]&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070713553.png" loading="lazy"></p>
<h1 id="Mongodb-备份还原"><a href="#Mongodb-备份还原" class="headerlink" title="Mongodb 备份还原"></a>Mongodb 备份还原</h1><h2 id="备份数据库-mongodump"><a href="#备份数据库-mongodump" class="headerlink" title="备份数据库 mongodump"></a>备份数据库 mongodump</h2><p><strong>语法</strong></p>
<pre class="language-none"><code class="language-none">mongodump -h -port -u -p -d -o 
导出语法说明
-h	host			服务器IP地址(一般不写默认本机
-p	ort				端口(一般不写默认27017
-u	user			账号
-p	pwd				密码
-d	database	数据库(数据库不写则导出全部
-o	open			备份到指定目录下</code></pre>

<p>备份所有数据:</p>
<pre class="language-none"><code class="language-none">mongodump -u 8963 -p 8963root -o F:\data\mongodb\bak</code></pre>

<p>备份指定数据</p>
<pre class="language-none"><code class="language-none">mongodump -u 8963 -p 8963root -d test -o F:\data\mongodb\bak2</code></pre>

<h2 id="还原数据库-mongorestore"><a href="#还原数据库-mongorestore" class="headerlink" title="还原数据库 mongorestore"></a>还原数据库 mongorestore</h2><p>语法</p>
<pre class="language-none"><code class="language-none">mongorestore -h -port -u -p -d--drop
备份数据目录还原数据说明:-h-port-u-p-d			
不写则还原全部数据库--drop	先删除数据库再导入</code></pre>

<p>还原所有数据:</p>
<pre class="language-none"><code class="language-none">mongorestore -u 8963 -p 8963root --drop F:\data\mongodb\bak</code></pre>

<p>还原指定数据</p>
<pre class="language-none"><code class="language-none">mongorestore -u 8963 -p 8963root -d test --drop F:\data\mongodb\bak\test</code></pre>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongodb接口实战小练习</title>
    <url>/2021/02/03/%E6%95%B0%E6%8D%AE%E5%BA%93/Mongodb%E6%8E%A5%E5%8F%A3%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>教学管理系统-学生模块接口开发</p>
   <span id="more"></span>

<h1 id="mongoose-简介"><a href="#mongoose-简介" class="headerlink" title="mongoose 简介"></a>mongoose 简介</h1><p>   Node 中操作 mongodb 的模块，能够通过 node 语法实现 mongodb 数据库的增删改查</p>
   <pre class="language-none"><code class="language-none">npm i mongoose
yaen add mongoose</code></pre>

<h2 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h2><p>   约束 MongoDB 文档数据</p>
<p>   <a href="http://mongoosejs.net/">文档</a></p>
<h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><p>   一个模型 对应 一个集合，通过模型管理集合中的数据</p>
<h1 id="mongoose-使用"><a href="#mongoose-使用" class="headerlink" title="mongoose 使用"></a>mongoose 使用</h1>   <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.导入模块</span>
<span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2.连接数据库 'mongodb://user:pass@localhost:port/database'</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>
  <span class="token string">"mongodb://shop2:admin888@localhost:27017/shop"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">useNewUrlParser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">useUnifiedTopology</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接失败，原因："</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据库连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3.设置数据模型</span>
<span class="token keyword">const</span> model <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">"api"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"用户名"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pwd</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// => pwd:String</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Number <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建实例操作</span>
<span class="token comment">// 增</span>
<span class="token keyword">const</span> insertObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">model</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pwd</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token comment">// => pwd:String</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 方法1：insertObj.save((err)=>&#123;db.close()&#125;)</span>
<span class="token comment">// 方法2（推荐）：</span>
insertObj
  <span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"插入失败"</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 查</span>
<span class="token comment">// 方法1 ：</span>
<span class="token comment">// model.find / findOne(条件对象，要显示的字段数据对象，(err, result) => db.close())</span>
<span class="token comment">// 方法2：</span>
model
  <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h1 id="接口（API）"><a href="#接口（API）" class="headerlink" title="接口（API）"></a>接口（API）</h1><p>   <strong>接口开发需求（Restful API）</strong></p>
<p>   Restful API 是目前比较流行的软件架构，提供了接口设计的原则和约束条件</p>
<blockquote>
<p>后端将资源发布到 URL 上 ——》前端通过 URL 访问资源 ——》并通过 HTTP 对资源进行操作（get 获取，post 新建，put 更新，delete 删除）</p>
<p>后端定义接口 ——》前端请求接口——》HTTP 操作资源</p>
</blockquote>
<h1 id="教学管理系统-学生模块接口开发"><a href="#教学管理系统-学生模块接口开发" class="headerlink" title="教学管理系统-学生模块接口开发"></a>教学管理系统-学生模块接口开发</h1><h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><p>   基于 node 开发的框架(原理基于 node 内置 http 模块封装)</p>
   <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.引入express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.创建app对象</span>
<span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3.写路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4.启动服务</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">"3000"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>   <strong>下载包</strong></p>
   <pre class="language-none"><code class="language-none">npm i express
npm i mongoose
&#x2F;&#x2F; 解析post数据
npm i body-parser</code></pre>

<p>   <strong>入口文件 <code>index.html</code></strong></p>
   <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> bodyparser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"body-parser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyparser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyparser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stuController <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/controller/stu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">"3000"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"http://localhost:3000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>   <strong>控制器 controller 下的 <code>stu.js</code></strong></p>
   <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入模型</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// createModel, listModel, delModel, upModel</span>
<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/models/stu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 导出方法</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// create, list, del, updata</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<p>   <strong>模型 models 下的 <code>stu.js</code></strong></p>
   <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 连接数据库</span>
<span class="token keyword">const</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>
  <span class="token string">"mongodb://shop2:admin888@localhost:27017/shop"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">useNewUrlParser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">useUnifiedTopology</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------err--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------err--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建模型</span>
<span class="token keyword">const</span> model <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token literal-property property">sid</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
  <span class="token literal-property property">sex</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 导出模型方法</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// createModel, listModel, delModel, upModel</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<h2 id="添加学生接口"><a href="#添加学生接口" class="headerlink" title="添加学生接口"></a>添加学生接口</h2><ol>
<li><p>入口文件 <code>index.html</code></p>
<p>添加路由方法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// #添加学生</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/stu"</span><span class="token punctuation">,</span> stuController<span class="token punctuation">.</span>create<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>控制器</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">create</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 1.接收 post 数据</span>
  <span class="token keyword">let</span> postData <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
  <span class="token comment">// console.log(postData);</span>
  <span class="token comment">// 2.过滤</span>
  <span class="token comment">// 3.操作数据库</span>
  <span class="token keyword">let</span> rs <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createModel</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 4.判断返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"添加成功"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"添加失败"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>模型</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">createModel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">postData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> insertObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">model</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> insertObj
    <span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// console.log(res);</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>测试</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070735025.png" loading="lazy"></p>
</li>
</ol>
<h2 id="学生列表接口"><a href="#学生列表接口" class="headerlink" title="学生列表接口"></a>学生列表接口</h2><ol>
<li><p>入口文件 <code>index.html</code></p>
<p>添加路由方法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// #学生列表app.get('/stu', stuController.list)</span></code></pre>
</li>
<li><p>控制器</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">list</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> getData <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>
  <span class="token keyword">let</span> skip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>getData<span class="token punctuation">.</span>pageno<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>getData<span class="token punctuation">.</span>pagesize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">listModel</span><span class="token punctuation">(</span>skip<span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>getData<span class="token punctuation">.</span>pagesize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"查询成功"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> data <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"查询失败"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>模型</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">listModel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">skipNum<span class="token punctuation">,</span> limitNum</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> model
    <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>skipNum<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>limitNum<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// console.log(res);</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>测试</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070735189.png" loading="lazy"></p>
</li>
</ol>
<h2 id="删除学生接口"><a href="#删除学生接口" class="headerlink" title="删除学生接口"></a>删除学生接口</h2><ol>
<li><p>入口文件 <code>index.html</code></p>
<p>添加路由方法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// #删除学生app.delete('/stu', stuController.del)</span></code></pre>
</li>
<li><p>控制器</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">del</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> getData <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
  <span class="token comment">//</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">delModel</span><span class="token punctuation">(</span>getData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"删除成功"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"删除失败"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>模型</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">delModel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> model<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>测试</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070735023.png" loading="lazy"></p>
</li>
</ol>
<h2 id="修改学生接口"><a href="#修改学生接口" class="headerlink" title="修改学生接口"></a>修改学生接口</h2><ol>
<li><p>入口文件 <code>index.html</code></p>
<p>添加路由方法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// #修改学生app.put('/stu', stuController.updata)</span></code></pre>
</li>
<li><p>控制器</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">updata</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> getData <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
  <span class="token keyword">let</span> newD <span class="token operator">=</span> getData<span class="token punctuation">.</span>new<span class="token punctuation">;</span>
  <span class="token comment">// console.log(typeof parseInt(getData.sid));</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">upModel</span><span class="token punctuation">(</span>getData<span class="token punctuation">.</span>sid<span class="token punctuation">,</span> getData<span class="token punctuation">.</span>new<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"修改成功"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"修改失败"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>模型</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">upModel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sidc<span class="token punctuation">,</span> xinc</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> sid <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>sidc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> xin <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xinc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> jiu <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">sid</span><span class="token operator">:</span> sid <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jiu<span class="token punctuation">,</span> xin<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> model<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>jiu<span class="token punctuation">,</span> xin<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>测试</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070739695.png" loading="lazy"></p>
</li>
</ol>
<h2 id="接口文档-apiDoc"><a href="#接口文档-apiDoc" class="headerlink" title="接口文档 apiDoc"></a>接口文档 apiDoc</h2><p>   <a href="https://apidocjs.com/">apiDoc</a></p>
<ol>
<li><p>安装</p>
<pre class="language-none"><code class="language-none">npm install apidoc -g</code></pre>
</li>
<li><p>在根目录下创建 <code>apidoc.json</code> 文件</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"教学管理系统接口文档"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"apiDoc basic example"</span><span class="token punctuation">,</span>
  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Custom apiDoc browser title"</span><span class="token punctuation">,</span>
  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000"</span>
<span class="token punctuation">&#125;</span></code></pre>
</li>
<li><p>写注释</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 *  @api &#123;请求方法&#125; /路由  接口名称
 * @apiName Create（方法）
 * @apiGroup Stu（模块）
 *	//参数  * @apiParam &#123;String&#125; name   姓名
 * @apiParam &#123;Number&#125; sid    学号
 * @apiParam &#123;Number&#125; age    年龄
 * @apiParam &#123;String&#125; sex    性别
 *	//返回信息 * @apiSuccess &#123;String&#125; meta  状态码&amp;提示信息
 * @apiSuccess &#123;String&#125; data  null */</span></code></pre>
</li>
<li><p>生成</p>
<pre class="language-none"><code class="language-none">apidoc -i .&#x2F;接口注释目录 -o .&#x2F;接口文档存放目录</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongodb基础操作</title>
    <url>/2021/01/28/%E6%95%B0%E6%8D%AE%E5%BA%93/Mongodb%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>Mongodb 基础操作(curd)</p>
<span id="more"></span>

<h1 id="Mongodb-安装"><a href="#Mongodb-安装" class="headerlink" title="Mongodb 安装"></a>Mongodb 安装</h1><ol>
<li><p><a href="https://www.mongodb.com/try/download/community">下载</a></p>
</li>
<li><p>解压</p>
</li>
<li><p>创建服务</p>
<ul>
<li>通过管理员身份运行 dos 窗口</li>
<li>提前创建数据和日志存放目录</li>
</ul>
<pre class="language-none"><code class="language-none">mongod --install --dbpath 数据路径(F:\data\mongodb\data) --logpath 日志路径(F:\data\mongodb\logs\mongodb.log)</code></pre>

<blockquote>
<p>运行后无任何的报错提示算成功</p>
</blockquote>
<p>此处小坑</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729283.png" loading="lazy"></p>
<p>安装微软运行库解决问题</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729198.png" loading="lazy"></p>
</li>
<li><p>启动服务</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729290.png" loading="lazy"></p>
<p>或者</p>
<pre class="language-none"><code class="language-none">net start mongodb</code></pre>
</li>
<li><p>登录（验证安装）</p>
<pre class="language-none"><code class="language-none">bin&#x2F;mongo</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070730684.png" loading="lazy"></p>
</li>
</ol>
<p>语法：</p>
<pre class="language-none"><code class="language-none">创建服务:bin&#x2F;mongod.exe --install --dbpath 磁盘路径 --logpath 日志路径
删除服务:bin&#x2F;mongod.exe --remove
启动服务:net start mongodb
关闭服务:net stop mongodb</code></pre>

<h1 id="Mongodb-基本操作"><a href="#Mongodb-基本操作" class="headerlink" title="Mongodb 基本操作"></a>Mongodb 基本操作</h1><p>数据库(database)、集合(collection)、数据&#x2F;文档(document)</p>
<h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><p>语法：</p>
<pre class="language-none"><code class="language-none">show databases</code></pre>

<p>效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070730619.png" loading="lazy"></p>
<h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><p>语法</p>
<pre class="language-none"><code class="language-none">use 数据库名称</code></pre>

<p>效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729313.png" loading="lazy"></p>
<p>注意：</p>
<p>在 Mongodb 中选择不存在的数据库并不会报错，而是隐式创建了一个数据库。</p>
<p><strong>隐式创建</strong> 当该数据库有数据时，系统会自动创建</p>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p>语法：</p>
<pre class="language-none"><code class="language-none">db.dropDatabase()</code></pre>

<p>效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729497.png" loading="lazy"></p>
<h2 id="查看集合"><a href="#查看集合" class="headerlink" title="查看集合"></a>查看集合</h2><p>语法：</p>
<pre class="language-none"><code class="language-none">show collecttions</code></pre>

<h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><p>语法：</p>
<pre class="language-none"><code class="language-none">db.createCollection(&#39;集合名&#39;)</code></pre>

<h2 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h2><p>语法：</p>
<p>选择进入数据库再执行删除操作</p>
<pre class="language-none"><code class="language-none">db.集合名.drop()</code></pre>

<p>效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070731182.png" loading="lazy"></p>
<h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>数据库（查看、创建、选择、删除）</p>
<pre class="language-none"><code class="language-none">创建：隐式创建查看：show databases选择：use 数据库名删除：db.dropDatabase()</code></pre>

<p>集合（查看、创建、删除）</p>
<pre class="language-none"><code class="language-none">查看：show collections创建：db.crateCollection(&#39;集合名&#39;)删除：db.集合名.drop()</code></pre>

<h1 id="Mongodb-文档-CURD"><a href="#Mongodb-文档-CURD" class="headerlink" title="Mongodb 文档 CURD"></a>Mongodb 文档 CURD</h1><p>文档的增删改查</p>
<h2 id="C-增"><a href="#C-增" class="headerlink" title="C 增"></a>C 增</h2><p><strong>语法：</strong></p>
<pre class="language-none"><code class="language-none">db.集合名.insert(JSON数据)</code></pre>

<p>说明：若集合存在则直接插入数据，集合不存在则隐式创建</p>
<p><strong>练习：</strong></p>
<p>在 test 数据库的 c1 集合中插入数据：姓名：webopenfather，年龄：18</p>
<pre class="language-none"><code class="language-none">use testdb.c1.insert(&#123;name:&quot;wxh&quot;,age:18&#125;)</code></pre>

<p>mongodb 会给每条数据增加一个 <code>_id</code> 键，这个由 时间戳、机器码、PID、计数器组成</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729865.png" loading="lazy"></p>
<p><strong>练习</strong></p>
<p>1.插入多条记录</p>
<blockquote>
<p>传递数组，数组中写入一个 JSON 数据</p>
<pre class="language-none"><code class="language-none">db.c.insert([	&#123;uname:&quot;zs&quot;,age:&quot;15&quot;&#125;,	&#123;uname:&quot;ls&quot;,age:&quot;18&quot;&#125;,	&#123;uname:&quot;ww&quot;,age:&quot;22&quot;&#125;,])</code></pre>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729923.png" loading="lazy"></p>
<p>2.快速插入 10 条记录</p>
<blockquote>
<p>mongodb 底层是使用 js 引擎是实现的，所以支持部分 js 语法，因此可以使用 for 循环</p>
<pre class="language-none"><code class="language-none">for(var i&#x3D;1;i&lt;&#x3D;10;i++)&#123;	db.c2.insert(&#123;uname:&quot;a&quot;+i,age:i&#125;)&#125;</code></pre>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729123.png" loading="lazy"></p>
<h2 id="R-查"><a href="#R-查" class="headerlink" title="R 查"></a>R 查</h2><p><strong>基础语法：</strong></p>
<pre class="language-none"><code class="language-none">db.集合名.find(条件，[,查询的列])条件	查询所有数据				 &#123;&#125;	查询age&#x3D;15的数据		  &#123;age:15&#125;	查询age&#x3D;6，性别&#x3D;男	 &#123;age:6,sex:&quot;男&quot;&#125;查询的列	无 - 查询全部列（字段）	&#123;age:1&#125;		只显示age列	&#123;age:0&#125;		除了age列都显示</code></pre>

<p><strong>升级语法</strong></p>
<pre class="language-none"><code class="language-none">db.集合名.find(&#123;	键：&#123;运算符:值&#125;&#125;)</code></pre>

<table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>$gt</td>
<td>大于</td>
</tr>
<tr>
<td>$gte</td>
<td>大于等于</td>
</tr>
<tr>
<td>$lt</td>
<td>小于</td>
</tr>
<tr>
<td>$lte</td>
<td>小于等于</td>
</tr>
<tr>
<td>$ne</td>
<td>等于</td>
</tr>
<tr>
<td>$in</td>
<td>in 在某个区间内</td>
</tr>
<tr>
<td>$nin</td>
<td>not in 不在某个区间内</td>
</tr>
</tbody></table>
<p><strong>练习：</strong></p>
<p>1.查询所有数据</p>
<pre class="language-none"><code class="language-none">db.c.find()</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070731272.png" loading="lazy"> 2.查询年龄大于 5 的数据</p>
<pre class="language-none"><code class="language-none">db.c2,find(age:&#123;$gt:5&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729922.png" loading="lazy"><br><strong>3.查询年龄是 5、8，10 的数据</strong></p>
<pre class="language-none"><code class="language-none">db.c2.find(age:&#123;$in:[5,8,10]&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729163.png" loading="lazy"> 4.只看年龄列，或除了年龄列</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070731731.png" loading="lazy"></p>
<h2 id="U-改"><a href="#U-改" class="headerlink" title="U 改"></a>U 改</h2><p><strong>基础语法</strong></p>
<pre class="language-none"><code class="language-none">db.集合名.updata(条件，新数据[，是否新增，是否修改多条])是否新增：指条件匹配不到数据则插入，默认为true是否修改多条：指将条件都匹配成功的数据都修改，默认为true</code></pre>

<p><strong>升级语法</strong></p>
<pre class="language-none"><code class="language-none">db.集合名.updata(条件，新数据[，是否新增，是否修改多条])										 &#123;修改器：&#123;键：值&#125;&#125;</code></pre>

<table>
<thead>
<tr>
<th>运算符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>$inc</td>
<td>递增</td>
</tr>
<tr>
<td>$rename</td>
<td>重命名列</td>
</tr>
<tr>
<td>$set</td>
<td>修改列值</td>
</tr>
<tr>
<td>$unset</td>
<td>删除列</td>
</tr>
</tbody></table>
<p><strong>准备工作</strong></p>
<pre class="language-none"><code class="language-none">use test2for(var i&#x3D;1;i&lt;&#x3D;10;i++)&#123;		db.c3.insert(&#123;uname:&quot;zs&quot;+i,age:i&#125;)&#125;</code></pre>

<p><strong>练习</strong></p>
<p>1.将{uname:”zs1”}改为{uname:”zs2”}</p>
<pre class="language-none"><code class="language-none">db.c3.update(&#123;uname:&quot;zs1&quot;,&#123;uname:&quot;zs2&quot;&#125;&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729638.png" loading="lazy"></p>
<p>此操作为替换并非修改，正确应当使用升级语法</p>
<pre class="language-none"><code class="language-none">db.c3.update(&#123;uname:&quot;zs1&quot;&#125;,&#123;$set:&#123;uname:&quot;zs2&quot;&#125;&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729791.png" loading="lazy"></p>
<p>2.将 zs10 的年龄增加或者减少 2 岁</p>
<p>增加：</p>
<pre class="language-none"><code class="language-none">db.c3.update(&#123;uname:&quot;zs10&quot;&#125;,&#123;$inc:&#123;age:2&#125;&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729342.png" loading="lazy"></p>
<p>减少：</p>
<pre class="language-none"><code class="language-none">db.c3.update(&#123;uname:&quot;zs10&quot;&#125;,&#123;$inc:&#123;age:-2&#125;&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070729615.png" loading="lazy"> 3.修改器综合练习</p>
<p>插入数据：</p>
<pre class="language-none"><code class="language-none">db.c4.insert(&#123;uname:&quot;神龙教主&quot;,age:888,who:&quot;男&quot;,other:&quot;非国人&quot;&#125;);</code></pre>

<blockquote>
<p>需求：</p>
<p>uname 改成 神龙主教</p>
<pre class="language-none"><code class="language-none">db.c4.update(&#123;uname:&quot;神龙教主&quot;&#125;,&#123;$set:&#123;uname:&quot;神龙主教&quot;&#125;&#125;)</code></pre>

<p>age 增加 111</p>
<pre class="language-none"><code class="language-none">db.c4.update(&#123;uname:&quot;神龙主教&quot;&#125;,&#123;$inc:&#123;age:111&#125;&#125;)</code></pre>

<p>who 改字段 sex</p>
<pre class="language-none"><code class="language-none">db.c4.update(&#123;uname:&quot;神龙主教&quot;&#125;,&#123;$rename:&#123;who:sex&#125;&#125;)</code></pre>

<p>other 删除</p>
<pre class="language-none"><code class="language-none">db.c4.update(&#123;uname:&quot;神龙主教&quot;&#125;,&#123;$unset:&#123;other:true&#125;&#125;)</code></pre>

<p>一次写多个修改器</p>
<pre class="language-none"><code class="language-none">db.c4.update(&#123;uname:&quot;神龙教主&quot;&#125;,&#123;	$set:&#123;uname:&quot;神龙主教&quot;&#125;,	$inc:&#123;age:111&#125;,	$rename:&#123;who:&quot;sex&quot;&#125;,	$unset:&#123;other:true&#125;&#125;)</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070731170.png" loading="lazy"></p>
</blockquote>
<h2 id="D-删"><a href="#D-删" class="headerlink" title="D 删"></a>D 删</h2><p>语法：</p>
<pre class="language-none"><code class="language-none">db.集合名.remove(条件,[,是否删除一条])注意：是否删除一条，默认false全部删除</code></pre>

<h2 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h2><p>增 Create</p>
<pre class="language-none"><code class="language-none">db.集合名.insert(JSON数据)</code></pre>

<p>删 Delete</p>
<pre class="language-none"><code class="language-none">db.集合名.remove(条件[,是否删除一条])</code></pre>

<p>改 Update</p>
<pre class="language-none"><code class="language-none">db.集合名.update(条件，新数据[，是否新增，是否修改多条])db.集合名.update(条件，修改器:&#123;修改器:&#123;键:值&#125;&#125;)</code></pre>

<p>查 Read</p>
<pre class="language-none"><code class="language-none">db.集合名.find(条件[,查询的列])</code></pre>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Roslibjs应用库</title>
    <url>/2021/06/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Roslibjs%E5%BA%94%E7%94%A8%E5%BA%93/</url>
    <content><![CDATA[<p>Roslibjs - js 与 ros 交互核心库</p>
<span id="more"></span>

<h1 id="JS-应用库"><a href="#JS-应用库" class="headerlink" title="JS 应用库"></a>JS 应用库</h1><ul>
<li><a href="http://wiki.ros.org/roslibjs">roslibjs</a> 教程</li>
</ul>
<p>&gt; 是 JavaScript 的核心库，用于与浏览器中的 ROS 进行交互。它使用 websocket 连接 rossbridge，并提供发布、订阅、服务调用、 actionlib、 TF、 URDF 解析和其他基本的 ROS 功能。Roslibjs 是 Robot Web Tools 的一部分。</p>
<ul>
<li><a href="https://github.com/RobotWebTools/roslibjs">roslibjs 源码</a></li>
</ul>
<h2 id="运行-Demo"><a href="#运行-Demo" class="headerlink" title="运行 Demo"></a>运行 Demo</h2><p>下载 <a href="https://github.com/RobotWebTools/roslibjs">roslibjs 源码</a></p>
<p>浏览器打开 Demo 目录下的 examples&#x2F;simple.html 可以看到</p>
<pre class="language-none"><code class="language-none">Simple roslib Example
Run the following commands in the terminal then refresh this page. Check the JavaScript console for the output.
在终端中运行以下命令，然后刷新此页。检查JavaScript控制台的输出。

1.roscore
2.rostopic pub &#x2F;listener std_msgs&#x2F;String &quot;Hello, World&quot;
3.rostopic echo &#x2F;cmd_vel
4.rosrun rospy_tutorials add_two_ints_server
5.roslaunch rosbridge_server rosbridge_websocket.launch

Error in the backend! Connection closed.
链接关闭</code></pre>

<p>第一步, 执行 roscore</p>
<p>2,3 步的命令用于监视 rostopic 话题</p>
<p>运行 4,5 便可以看到实际效果</p>
<p>后端同步运行 , 可以看到发送的消息</p>
<pre class="language-none"><code class="language-none">rostopic echo topic的名称</code></pre>

<p>其他常用命令:</p>
<pre class="language-none"><code class="language-none">rostopic list 列出所有的topic

rostopic echo topic名称 显示topic上发布的message

rostopic type topic名称 查看topic的message类型

rosmsg show message名称 查看message数据结构</code></pre>

<h2 id="详解-simple-html"><a href="#详解-simple-html" class="headerlink" title="详解 simple.html"></a>详解 simple.html</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- 导入应用程序所需的所有 JavaScript 文件 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://static.robotwebtools.org/EventEmitter2/current/eventemitter2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../build/roslib.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
      <span class="token comment">// 创建一个 Ros 节点对象来与 rosbridge v2.0服务器通信</span>
      <span class="token keyword">var</span> ros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Ros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ros<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:9090"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 监视 rosbridge 服务器的连接。,监听连接状态:error,connection,close</span>
      ros<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 操作消息状态的显示</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"connecting"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"connected"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"closed"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
        <span class="token comment">// 当前为error</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"inline"</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      ros<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection made!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"connecting"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"closed"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"connected"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"inline"</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      ros<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"connecting"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"connected"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"closed"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"inline"</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 新建一个 topic 话题 http://robotwebtools.org/jsdoc/roslibjs/current/Topic.html</span>
      <span class="token comment">// 话题声明话题名称、消息类型，并传递前面的 ROS 对象</span>
      <span class="token keyword">var</span> cmdVel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Topic</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">ros</span><span class="token operator">:</span> ros<span class="token punctuation">,</span>
        <span class="token comment">// 话题名称</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"/cmd_vel"</span><span class="token punctuation">,</span>
        <span class="token comment">// 消息类型, Twist - 线速度角速度</span>
        <span class="token literal-property property">messageType</span><span class="token operator">:</span> <span class="token string">"geometry_msgs/Twist"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 创建一个新的 ROSLIB.Message</span>
      <span class="token keyword">var</span> twist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">linear</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>
          <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span>
          <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">angular</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">0.1</span><span class="token punctuation">,</span>
          <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span>
          <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">0.3</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// cmdVel是一个话题的名称,通过cmdVel调用topic方法 pulish()</span>
      <span class="token comment">// pulish(一个 ROSLIB.Message 对象) 发布消息,</span>
      cmdVel<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>twist<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 新建一个监听器话题</span>
      <span class="token keyword">var</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Topic</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">ros</span><span class="token operator">:</span> ros<span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"/listener"</span><span class="token punctuation">,</span>
        <span class="token comment">// 消息类型</span>
        <span class="token literal-property property">messageType</span><span class="token operator">:</span> <span class="token string">"std_msgs/String"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/* 通过对listener话题调用 subscribe ()并传入回调，就可以进行订阅。
     无论何时 ROS 在“/listener”主题上发布消息，rosbridge 都会将该消息转发给浏览器，
     并使用该消息调用回调函数。
  */</span>
      listener<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 打印收到的消息</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
          <span class="token string">"Received message on "</span> <span class="token operator">+</span> listener<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> message<span class="token punctuation">.</span>data
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 取消订阅话题</span>
        listener<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 创建一个 ROSLIB.Service 对象</span>
      <span class="token comment">// 它类似于上面的 ROSLIB.Topic 对象，因为它负责与 ROS 服务的所有交互。</span>
      <span class="token keyword">var</span> addTwoIntsClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Service</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">ros</span><span class="token operator">:</span> ros<span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"/add_two_ints"</span><span class="token punctuation">,</span>
        <span class="token comment">//</span>
        <span class="token literal-property property">serviceType</span><span class="token operator">:</span> <span class="token string">"rospy_tutorials/AddTwoInts"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 发起请求,调用服务,并传递参数</span>
      <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>ServiceRequest</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// ROSLIB.Service的方法</span>
      <span class="token comment">// callService(request, callback, failedCallback)</span>
      <span class="token comment">// request  要发送的 ROSLIB.ServiceRequest</span>
      addTwoIntsClient<span class="token punctuation">.</span><span class="token function">callService</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 结果,打印服务的名字和结果数量</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
          <span class="token string">"Result for service call on "</span> <span class="token operator">+</span>
            addTwoIntsClient<span class="token punctuation">.</span>name <span class="token operator">+</span>
            <span class="token string">": "</span> <span class="token operator">+</span>
            result<span class="token punctuation">.</span>sum
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 新建一个 获取和设置 ROS 参数 的对象</span>
      <span class="token keyword">var</span> setBoolServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Service</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">ros</span><span class="token operator">:</span> ros<span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"/set_bool"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">serviceType</span><span class="token operator">:</span> <span class="token string">"std_srvs/SetBool"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 新建一个广播</span>
      setBoolServer<span class="token punctuation">.</span><span class="token function">advertise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 打印收到的服务请求</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
          <span class="token string">"Received service request on "</span> <span class="token operator">+</span>
            setBoolServer<span class="token punctuation">.</span>name <span class="token operator">+</span>
            <span class="token string">": "</span> <span class="token operator">+</span>
            request<span class="token punctuation">.</span>data
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 响应消息</span>
        response<span class="token punctuation">[</span><span class="token string">"success"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        response<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Set successfully"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 获取参数</span>
      ros<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 打印参数</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 新建一个 Param (操作参数)</span>
      <span class="token keyword">var</span> maxVelX <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Param</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">ros</span><span class="token operator">:</span> ros<span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"max_vel_y"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 使用简单的 param.set (value)来设置参数</span>
      maxVelX<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 获取参数</span>
      maxVelX<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"MAX VAL: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 新建 Param (操作参数)</span>
      <span class="token keyword">var</span> favoriteColor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Param</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">ros</span><span class="token operator">:</span> ros<span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"favorite_color"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 设置参数</span>
      favoriteColor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 获取参数</span>
      favoriteColor<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"My robot's favorite color is "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Simple roslib Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
      Run the following commands in the terminal then refresh this page. Check
      the JavaScript console for the output.
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">></span></span>roscore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">></span></span>rostopic pub /listener std_msgs/String "Hello, World"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">></span></span>rostopic echo /cmd_vel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">></span></span>rosrun rospy_tutorials add_two_ints_server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">></span></span>roslaunch rosbridge_server rosbridge_websocket.launch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>statusIndicator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>connecting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Connecting to rosbridge...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>connected<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>#00D600<span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Connected<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>#FF0000<span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
        Error in the backend!
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>closed<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Connection closed.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<p>整理一下,这个 Demo 中</p>
<ol>
<li>新建一个 Ros 节点对象并设置地址端口号 , 来与 rosbridge 服务通信</li>
</ol>
<pre class="language-none"><code class="language-none">var ros &#x3D; new ROSLIB.Ros();
ros.connect(&#39;ws:&#x2F;&#x2F;localhost:9090&#39;);</code></pre>

<ol>
<li>监听 rosbridge 服务器的链接状态 , error\connection\close</li>
<li>新建话题 cmdVel 用于传递消息</li>
</ol>
<p>新建消息 twist</p>
<p>使用 cmdVel 传递 twist 消息</p>
<pre class="language-none"><code class="language-none">cmdVel.publish(twist);</code></pre>

<ol>
<li>话题监听器 listener</li>
</ol>
<pre class="language-none"><code class="language-none">listener.subscribe()</code></pre>

<p>使用此方法接收监听到的消息</p>
<ol>
<li>新建 service</li>
</ol>
<p>新建请求</p>
<pre class="language-none"><code class="language-none">new ROSLIB.ServiceRequest()</code></pre>

<p>调用服务请求</p>
<pre class="language-none"><code class="language-none">new ROSLIB.Service().callService(request, callback, failedCallback)</code></pre>

<ol>
<li>新建一个服务,用于获取和设置参数</li>
</ol>
<p>新建广播 , 对于在此服务上发出的每个请求，都将调用该回调</p>
<pre class="language-none"><code class="language-none">new ROSLIB.Service().advertise()</code></pre>

<p>获取参数</p>
<pre class="language-none"><code class="language-none">new ROSLIB.Param().get()</code></pre>

<p>设置参数</p>
<pre class="language-none"><code class="language-none">new ROSLIB.Param().set()</code></pre>

<h1 id="自己的-Demo"><a href="#自己的-Demo" class="headerlink" title="自己的 Demo"></a>自己的 Demo</h1><p>查看官方 Demo 之后,自己尝试与 ros 交互</p>
<h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><p>引入包 , EventEmitter2 和 roslibjs</p>
<p>创建一个 Ros 节点对象来与 rosbridge v2.0 服务器通信</p>
<pre class="language-none"><code class="language-none">var ros &#x3D; new ROSLIB.Ros();
ros.connect(&#39;ws:&#x2F;&#x2F;localhost:9090&#39;);

ros.on(&#39;error&#39;, function (error) &#123;
  console.log(error);
&#125;)
ros.on(&#39;connection&#39;, function () &#123;
  console.log(&quot;-----------连接成功-----------&quot;);
&#125;)
ros.on(&#39;close&#39;, function () &#123;
  console.log(&quot;-----------连接断开-----------&quot;);
&#125;)</code></pre>

<h2 id="前端向-ros-发送消息"><a href="#前端向-ros-发送消息" class="headerlink" title="前端向 ros 发送消息"></a>前端向 ros 发送消息</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> oneTopic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Topic</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">ros</span><span class="token operator">:</span> ros<span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"/oneTopic"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">messageType</span><span class="token operator">:</span> <span class="token string">"std_msgs/String"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> oneMes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">"hello word!"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

oneTopic<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>oneMes<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>打开终端,通过此命令可以查看已经发送成功</p>
<pre class="language-none"><code class="language-none">rostopic echo &#x2F;oneTopic</code></pre>

<h2 id="前端接收-ros-的消息"><a href="#前端接收-ros-的消息" class="headerlink" title="前端接收 ros 的消息"></a>前端接收 ros 的消息</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 前端接收ros的消息</span>
<span class="token keyword">var</span> receiveTopic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Topic</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">ros</span><span class="token operator">:</span> ros<span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"/receiveTopic"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">messageType</span><span class="token operator">:</span> <span class="token string">"std_msgs/String"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
receiveTopic<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  receiveTopic<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>终端运行</p>
<p>rostopic pub topic 的名称 消息类型 消息内容</p>
<pre class="language-none"><code class="language-none">rostopic pub &#x2F;receiveTopic std_msgs&#x2F;String &quot;Hello,Ros&quot;</code></pre>

<p>之后便可以看到控制台打印消息</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>ros</tag>
      </tags>
  </entry>
  <entry>
    <title>mjpegcanvas接入视频</title>
    <url>/2021/07/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/mjpegcanvas%E6%8E%A5%E5%85%A5%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<h1 id="启动-usb-摄像头"><a href="#启动-usb-摄像头" class="headerlink" title="启动 usb 摄像头"></a>启动 usb 摄像头</h1><p>编写 launch 启动摄像头，通过 topic 传输视频流</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>
     <span class="token comment">&lt;!--
         default 修改摄像头的名称
         与 guvcview -d /dev/video2 测试的名称一致
     --></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video_device<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/dev/video2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

 <span class="token comment">&lt;!--节点的名字叫做usb_cam，然后运行一个叫usb_cam_node的可执行文件，这个文件在ros的lib里面，找不到源码文件，只有这个包装好可执行文件--></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam_node<span class="token punctuation">"</span></span> <span class="token attr-name">clear_params</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token comment">&lt;!-- to="/camera/rgb/image_raw" 映射的topic , 前端通过此topic获取视频  --></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam/image_raw<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera/rgb/image_raw<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam/camera_info<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera/rgb/camera_info<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
         <span class="token comment">&lt;!-- 摄像头编号类型 --></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video_device<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg video_device)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
         <span class="token comment">&lt;!-- 摄像头页面的宽 --></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image_width<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1920<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
         <span class="token comment">&lt;!-- 摄像头页面的高 --></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image_height<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1020<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
         <span class="token comment">&lt;!-- 帧率 --></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>framerate<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
         <span class="token comment">&lt;!-- 像素编码，可选值：mjepg、yuyv、uyvy，类型：string --></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pixel_format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yuyv<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
         <span class="token comment">&lt;!-- 对比度 --></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contrast<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
         <span class="token comment">&lt;!-- 亮度 --></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brightness<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
         <span class="token comment">&lt;!-- 饱和度 --></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>saturation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
         <span class="token comment">&lt;!-- 自动聚焦 --></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
         <span class="token comment">&lt;!-- 摄像头坐标系，类型：string --></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_frame_id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_link<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span></code></pre>

<h1 id="前端接入摄像头"><a href="#前端接入摄像头" class="headerlink" title="前端接入摄像头"></a>前端接入摄像头</h1><p>打开前端之前要启动 rosbridge.launch 构建 websoket 连接进行通信</p>
<p>47 行的 topic 就是<code>launch</code> 中 11 行 <code>to=</code> 的 topic 名称</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./lib/roslib.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./lib/eventemitter2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./lib/mjpegcanvas.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>videoCanvas<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">var</span> ros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Ros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> serverURL <span class="token operator">=</span> <span class="token string">"ws://127.0.0.1:9090"</span><span class="token punctuation">;</span>
      <span class="token comment">// mjpeg 视频质量</span>
      <span class="token keyword">var</span> videoQuality <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
      <span class="token comment">// 设置视频窗口的宽高</span>
      <span class="token keyword">var</span> videoWidth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> videoHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>videoWidth <span class="token operator">*</span> <span class="token number">240</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      ros<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>serverURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ros<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      ros<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--- 连接成功 ---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//</span>
        <span class="token keyword">var</span> videoTopicParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Param</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          <span class="token literal-property property">ros</span><span class="token operator">:</span> ros<span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"/robot_gui/videoTopic"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        videoTopicParam<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">new</span> <span class="token class-name">MJPEGCANVAS<span class="token punctuation">.</span>Viewer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token literal-property property">divID</span><span class="token operator">:</span> <span class="token string">"videoCanvas"</span><span class="token punctuation">,</span>
            <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>
            <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">"9090"</span><span class="token punctuation">,</span>
            <span class="token literal-property property">width</span><span class="token operator">:</span> videoWidth<span class="token punctuation">,</span>
            <span class="token literal-property property">height</span><span class="token operator">:</span> videoHeight<span class="token punctuation">,</span>
            <span class="token literal-property property">quality</span><span class="token operator">:</span> videoQuality<span class="token punctuation">,</span>
            <span class="token literal-property property">topic</span><span class="token operator">:</span> <span class="token string">"/camera/rgb/dell"</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      ros<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<h1 id="同时接入多个摄像头视频"><a href="#同时接入多个摄像头视频" class="headerlink" title="同时接入多个摄像头视频"></a>同时接入多个摄像头视频</h1><p>在一个 launch 文件中 启动两个节点</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070921878.png" loading="lazy"></p>
<p>launch 文件</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- 戴尔内置摄像头 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dell<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/dev/video0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam_node<span class="token punctuation">"</span></span> <span class="token attr-name">clear_params</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam/image_raw<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera/rgb/dell<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam/camera_info<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera/rgb/camera_info_dell<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video_device<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg dell)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image_width<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>640<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image_height<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>framerate<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pixel_format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mjpeg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contrast<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brightness<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>saturation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_frame_id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_link<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>

    <span class="token comment">&lt;!-- 外接摄像头 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leopard<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/dev/video2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam1<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam_node<span class="token punctuation">"</span></span> <span class="token attr-name">clear_params</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam1/image_raw<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera/rgb/leopard<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>usb_cam1/camera_info<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/camera/rgb/camera_info_leopard<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video_device<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg leopard)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image_width<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1920<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image_height<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1020<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>framerate<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pixel_format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yuyv<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contrast<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brightness<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>saturation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autofocus<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_frame_id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_link<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span></code></pre>

<p>前端部分</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/roslib.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/eventemitter2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/mjpegcanvas.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/roslib.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>videoCanvasD<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>videoCanvasL<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">var</span> ros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Ros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 相应地设置rosbridge主机名和端口</span>
      <span class="token keyword">var</span> rosbridgeHost <span class="token operator">=</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname<span class="token punctuation">;</span>
      <span class="token keyword">var</span> rosbridgePort <span class="token operator">=</span> <span class="token string">"9090"</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> serverURL <span class="token operator">=</span> <span class="token string">"ws://"</span> <span class="token operator">+</span> rosbridgeHost <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> rosbridgePort<span class="token punctuation">;</span>
      <span class="token comment">// 设置相机相关参数</span>
      <span class="token keyword">var</span> mjpegHost <span class="token operator">=</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname<span class="token punctuation">;</span>
      <span class="token keyword">var</span> mjpegPort <span class="token operator">=</span> <span class="token string">"8080"</span><span class="token punctuation">;</span>
      <span class="token comment">// 默认视频主题（可以在rosbridge启动文件中设置）</span>
      <span class="token keyword">var</span> videoTopic <span class="token operator">=</span> <span class="token string">"/camera/rgb/image_raw"</span><span class="token punctuation">;</span>
      <span class="token comment">// mjpeg 视频质量</span>
      <span class="token keyword">var</span> videoQuality <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
      <span class="token comment">// 设置视频窗口的宽高</span>
      <span class="token keyword">var</span> videoWidth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> videoHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>videoWidth <span class="token operator">*</span> <span class="token number">240</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ros<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>serverURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ros<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      ros<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--- 连接成功 ---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//</span>
        <span class="token keyword">var</span> videoTopicParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ROSLIB<span class="token punctuation">.</span>Param</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          <span class="token literal-property property">ros</span><span class="token operator">:</span> ros<span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"/robot_gui/videoTopic"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        videoTopicParam<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            videoTopic <span class="token operator">=</span> value<span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>videoTopic<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          <span class="token keyword">new</span> <span class="token class-name">MJPEGCANVAS<span class="token punctuation">.</span>Viewer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token literal-property property">divID</span><span class="token operator">:</span> <span class="token string">"videoCanvasD"</span><span class="token punctuation">,</span>
            <span class="token literal-property property">host</span><span class="token operator">:</span> mjpegHost<span class="token punctuation">,</span>
            <span class="token literal-property property">port</span><span class="token operator">:</span> mjpegPort<span class="token punctuation">,</span>
            <span class="token literal-property property">width</span><span class="token operator">:</span> videoWidth<span class="token punctuation">,</span>
            <span class="token literal-property property">height</span><span class="token operator">:</span> videoHeight<span class="token punctuation">,</span>
            <span class="token literal-property property">quality</span><span class="token operator">:</span> videoQuality<span class="token punctuation">,</span>
            <span class="token literal-property property">topic</span><span class="token operator">:</span> <span class="token string">"/camera/rgb/dell"</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">new</span> <span class="token class-name">MJPEGCANVAS<span class="token punctuation">.</span>Viewer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token literal-property property">divID</span><span class="token operator">:</span> <span class="token string">"videoCanvasL"</span><span class="token punctuation">,</span>
            <span class="token literal-property property">host</span><span class="token operator">:</span> mjpegHost<span class="token punctuation">,</span>
            <span class="token literal-property property">port</span><span class="token operator">:</span> mjpegPort<span class="token punctuation">,</span>
            <span class="token literal-property property">width</span><span class="token operator">:</span> videoWidth<span class="token punctuation">,</span>
            <span class="token literal-property property">height</span><span class="token operator">:</span> videoHeight<span class="token punctuation">,</span>
            <span class="token literal-property property">quality</span><span class="token operator">:</span> videoQuality<span class="token punctuation">,</span>
            <span class="token literal-property property">topic</span><span class="token operator">:</span> <span class="token string">"/camera/rgb/leopard"</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ros<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>ros</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron 初体验</title>
    <url>/2021/09/10/%E5%89%8D%E7%AB%AF/Electron/%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="创建程序应用"><a href="#创建程序应用" class="headerlink" title="创建程序应用"></a>创建程序应用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> first_app
<span class="token builtin class-name">cd</span> first_app<span class="token punctuation">\</span>
<span class="token function">npm</span> init <span class="token parameter variable">-y</span>
<span class="token function">npm</span> <span class="token function">install</span> electron <span class="token parameter variable">-S</span></code></pre>

<p>配置packge.json，启动命令</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	<span class="token property">"start"</span><span class="token operator">:</span><span class="token string">"electron"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre>

<h2 id="main-js主进程"><a href="#main-js主进程" class="headerlink" title="main.js主进程"></a>main.js主进程</h2><p><code>main</code> 是 Electron 应用程序得入口，运行在一个完整的Node.js环境中</p>
<ul>
<li>控制主进程</li>
<li>负责控制您应用的生命周期</li>
<li>显示原生界面</li>
<li>执行特殊操作并管理渲染器进程</li>
</ul>
<p>在主进程中创建一个窗口，在窗口中打开一个页面</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"electron"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> electron<span class="token punctuation">.</span>app<span class="token punctuation">;</span>
<span class="token comment">// 当 Electron 完成初始化时触发</span>
app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"ready"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 创建新窗口</span>
  <span class="token keyword">let</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">electron<span class="token punctuation">.</span>BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">"./index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 当`ready`事件被激发，打开窗口</span>
app<span class="token punctuation">.</span><span class="token function">whenReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p><code>index.html</code></p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Electron<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>This is my first Electron App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<p>运行</p>
<pre class="language-none"><code class="language-none">npm run start</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070816898.png" loading="lazy"></p>
<h2 id="自动刷新页面"><a href="#自动刷新页面" class="headerlink" title="自动刷新页面"></a>自动刷新页面</h2><p>安装插件</p>
<pre class="language-none"><code class="language-none">npm install --save-dev electron-reloader</code></pre>

<p>在主进程中引入</p>
<pre class="language-none"><code class="language-none">const reloader &#x3D; require(&#39;electron-reloader&#39;)
reloader(module)</code></pre>

<p>就可以实现应用自动刷新</p>
<h2 id="自定义菜单"><a href="#自定义菜单" class="headerlink" title="自定义菜单"></a>自定义菜单</h2><h3 id="创建菜单"><a href="#创建菜单" class="headerlink" title="创建菜单"></a>创建菜单</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Menu<span class="token punctuation">,</span> BrowserWindow<span class="token punctuation">,</span> app <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"electron"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 定义菜单</span>
<span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"文件"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">submenu</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"编辑"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">submenu</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 创建菜单</span>
<span class="token keyword">const</span> menu <span class="token operator">=</span> Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置菜单</span>
Menu<span class="token punctuation">.</span><span class="token function">setApplicationMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070816496.png" loading="lazy"></p>
<h3 id="添加菜单事件"><a href="#添加菜单事件" class="headerlink" title="添加菜单事件"></a>添加菜单事件</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"创建新窗口"</span><span class="token punctuation">,</span>
    <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> newWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
        <span class="token literal-property property">heighr</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      newWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">"new.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">"打开链接"</span><span class="token punctuation">,</span>
    <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      shell<span class="token punctuation">.</span><span class="token function">openExternal</span><span class="token punctuation">(</span>
        <span class="token string">"https://www.electronjs.org/docs/tutorial/quick-start"</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>



<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070816706.png" loading="lazy"></p>
<h1 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h1><p>安装electro 时，出现</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070817594.png" loading="lazy"></p>
<p>百度找到方法说切换到淘宝也失败了，Google了许多方法也都不成功，抱着再试一试的心态又安装几次莫名其妙就成功了，可能是网络的问题</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070817344.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript之Flow</title>
    <url>/2022/03/03/%E5%89%8D%E7%AB%AF/TypeScript/Flow/</url>
    <content><![CDATA[<h1 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h1><ul>
<li>强类型、弱类型（类型安全）</li>
<li>静态类型、动态类型（类型检查）</li>
</ul>
<h2 id="强类型，弱类型"><a href="#强类型，弱类型" class="headerlink" title="强类型，弱类型"></a>强类型，弱类型</h2><p>强类型语言层面限制函数的实参类信息必须与形参类型相同</p>
<p>强类型不允许随意的隐式类型转换，而弱类型是允许的</p>
<h2 id="静态类型、动态类型"><a href="#静态类型、动态类型" class="headerlink" title="静态类型、动态类型"></a>静态类型、动态类型</h2><p>静态类型，变量在声明时类型就是明确的，且不允许改变</p>
<p>动态类型，变量在运行阶段才明确其类型，且随时可以改变，动态类型语言中变量时没有类型的，变量中存放的值才是有类型的</p>
<p><img src="F:\8963repository\img\image-20220302205518630.png" alt="image-20220302205518630" loading="lazy"></p>
<h1 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h1><p>JavaScript类型检查工具，使用类型注解来检查类型，flow不需要对每一个变量都添加类型注解，可以根据需求使用</p>
<p>可以通过flow官方的工具去除编码时的类型注解<img src="F:\8963repository\img\image-20220302210621347.png" alt="image-20220302210621347" loading="lazy"></p>
<h2 id="使用flow"><a href="#使用flow" class="headerlink" title="使用flow"></a>使用flow</h2><p>下载</p>
<pre class="language-none"><code class="language-none">yarn init -y
yarn add flow-bin --dev</code></pre>

<p>使用对需要进行类型检查的文件前需要添加</p>
<pre class="language-none"><code class="language-none">&#x2F;&#x2F; @flow</code></pre>

<p>关闭vscode的语法检查</p>
<p><img src="F:\8963repository\img\image-20220302211732412.png" alt="image-20220302211732412" loading="lazy"></p>
<p>使用</p>
<pre class="language-none"><code class="language-none">yarn flow init</code></pre>

<p>创建flow的配置文件</p>
<p>编写代码使用flow检查</p>
<p><img src="F:\8963repository\img\image-20220302212232279.png" alt="image-20220302212232279" loading="lazy"></p>
<p>第一次使用时需要在后台启动flow的服务，可以使用<code>flow stop</code>来停掉flow的服务</p>
<h2 id="移除flow的类型注解"><a href="#移除flow的类型注解" class="headerlink" title="移除flow的类型注解"></a>移除flow的类型注解</h2><p>安装工具</p>
<pre class="language-none"><code class="language-none">yarn add flow-remove-types --dev</code></pre>

<ul>
<li>使用flow工具</li>
</ul>
<pre class="language-none"><code class="language-none">yarn flow remove-types 代码目录 -d 输出目录</code></pre>

<p><img src="F:\8963repository\img\image-20220302213049870.png" alt="image-20220302213049870" loading="lazy"></p>
<ul>
<li>使用babel，通过编译移除类型注解</li>
</ul>
<pre class="language-none"><code class="language-none">yarn add @babel&#x2F;core @babel&#x2F;cli @babel&#x2F;preset-flow --dev</code></pre>

<p>@babel&#x2F;core  - babel核心模块</p>
<p>@babel&#x2F;cli  - cli命令行工具</p>
<p>@babel&#x2F;preset-flow –dev - 转换flow类型注解工具</p>
<p>添加编辑配置文件<code>.babelrc</code></p>
<pre class="language-none"><code class="language-none">&#123;
  &quot;presets&quot;: [&quot;@babel&#x2F;preset-flow&quot;]
&#125;</code></pre>

<p>使用</p>
<pre class="language-none"><code class="language-none">yarn babel 代码目录 -d 输出目录</code></pre>

<h2 id="Flow-开发工具插件"><a href="#Flow-开发工具插件" class="headerlink" title="Flow 开发工具插件"></a>Flow 开发工具插件</h2><p><a href="https://flow.org/en/docs/editors/">https://flow.org/en/docs/editors/</a> 官方支持的各开发工具的插件</p>
<p><img src="F:\8963repository\img\image-20220303140738069.png" alt="image-20220303140738069" loading="lazy"></p>
<h2 id="Flow-语法"><a href="#Flow-语法" class="headerlink" title="Flow 语法"></a>Flow 语法</h2><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @flow</span>
<span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> n <span class="token operator">*</span> n
<span class="token punctuation">&#125;</span>
<span class="token function">square</span><span class="token punctuation">(</span><span class="token string">'100'</span><span class="token punctuation">)</span>
</code></pre>

<h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><p>推荐尽可能的使用类型注解</p>
<p>声明变量时</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> 类型 <span class="token operator">=</span> 特定类型数据
<span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">1</span></code></pre>

<p>函数返回值的类型注解</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>number<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token comment">// 如果没有返回值,需要声明为 void</span>
func <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre>

<h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h3><ul>
<li><p>string</p>
</li>
<li><p>number(数字,NaN,Infinity)</p>
</li>
<li><p>boolean</p>
</li>
<li><p>null</p>
</li>
<li><p>undefined(此类型需要标记为 void)</p>
<pre class="language-none"><code class="language-none">let x: void &#x3D; undefined</code></pre>
</li>
<li><p>symbol</p>
</li>
</ul>
<h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><p>方式1: 需要指定数组的泛型,数组元素是什么类型的数据</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token literal-property property">arr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span></code></pre>

<p>方式2: </p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token literal-property property">arr2</span><span class="token operator">:</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>

<p>指定数组长度和类型(元组)</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span>number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span></code></pre>

<h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p>指定对象的属性名和类型</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span>string<span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span>number<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span><span class="token number">100</span> <span class="token punctuation">&#125;</span> </code></pre>

<p>可选属性,在属性名后面添加一个问号<code>?</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> foo<span class="token operator">?</span><span class="token operator">:</span>string<span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span>number<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">bar</span><span class="token operator">:</span><span class="token number">100</span> <span class="token punctuation">&#125;</span> </code></pre>

<p>键值对限制,<code>[键的类型]:值的类型</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token literal-property property">obj</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>string<span class="token punctuation">]</span><span class="token operator">:</span>string <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'abc'</span></code></pre>

<h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>参数限制,返回值限制</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span>string<span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span>number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre>

<p>限制存放函数的变量</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token function-variable function">callback</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">string<span class="token punctuation">,</span>number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<h3 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h3><p>字面量类型</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// a 只能存放 'foo' 这个值</span>
<span class="token keyword">const</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token string">'foo'</span> <span class="token operator">=</span> <span class="token string">'foo'</span>
<span class="token comment">// type 只能是一下三种值中的一个</span>
<span class="token keyword">const</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'success'</span> <span class="token operator">|</span> <span class="token string">'warning'</span> <span class="token operator">|</span> <span class="token string">'danger'</span> <span class="token operator">=</span> <span class="token string">'success'</span></code></pre>

<p>联合类型</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token literal-property property">b</span><span class="token operator">:</span> string<span class="token operator">|</span>number <span class="token operator">=</span> <span class="token string">'abc'</span> <span class="token comment">// 100</span></code></pre>

<p>maybe类型, 可能是某种类型, 添加一个问号<code>?</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token operator">?</span>number <span class="token operator">=</span> <span class="token keyword">undefined</span>
<span class="token comment">// 以上等同于</span>
<span class="token keyword">const</span> <span class="token literal-property property">c</span><span class="token operator">:</span> number <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span></code></pre>

<h3 id="任意类型"><a href="#任意类型" class="headerlink" title="任意类型"></a>任意类型</h3><p>mixed 与 any</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fooM</span><span class="token punctuation">(</span> <span class="token parameter"><span class="token literal-property property">val</span><span class="token operator">:</span> mixed</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">fooA</span><span class="token punctuation">(</span> <span class="token parameter"><span class="token literal-property property">val</span><span class="token operator">:</span> any</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre>

<p>差别: any是弱类型,mixed是强类型</p>
<p>mixed没有明确是哪种类型之前,不可以随意使用</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 会报错</span>
<span class="token keyword">function</span> <span class="token function">fooM</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">val</span><span class="token operator">:</span> mixed</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	val<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 不会报错</span>
<span class="token keyword">function</span> <span class="token function">fooM</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">val</span><span class="token operator">:</span> mixed</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		val<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>any则不需要进行手动类型判断就可以使用</p>
<p><a href="https://flow.org/en/docs/types/">Flow官方文档 - 所有类型</a></p>
<p><a href="https://www.saltycrane.com/cheat-sheets/flow-type/latest/">第三方类型整理</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 基础</title>
    <url>/2022/03/08/%E5%89%8D%E7%AB%AF/TypeScript/TypeScripe/</url>
    <content><![CDATA[<h1 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h1><pre class="language-none"><code class="language-none">yarn init -y
yarn add typre --dev</code></pre>

<p>01-getting-starte , typescript支持最新的ES6语法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello , </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
<span class="token punctuation">&#125;</span>
<span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'TypeScript'</span><span class="token punctuation">)</span></code></pre>

<p>编译<code>tsc .\01-getting-starte.ts</code></p>
<p>已经将ES6的语法转换为ES3语法标准</p>
<p><img src="F:\8963repository\img\image-20220304145121337.png" alt="image-20220304145121337" loading="lazy"></p>
<p>TypeScript 类型声明方式</p>
<p><img src="F:\8963repository\img\image-20220304145319308.png" alt="image-20220304145319308" loading="lazy"></p>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>生成配置文件</p>
<pre class="language-none"><code class="language-none">yarn tsc --init</code></pre>

<p><img src="F:\8963repository\img\image-20220304145525619.png" alt="image-20220304145525619" loading="lazy"></p>
<p><code>compilerOptions</code>typescript编译器的全部选项,其中常用的属性选项</p>
<ul>
<li><code>&quot;target&quot;: &quot;es5&quot;,  </code> 设置编译后的es标准</li>
<li><code>&quot;module&quot;: &quot;commonjs&quot;,  </code> 输出代码采用的模块化标准</li>
<li><code>&quot;outDir&quot;: &quot;dist&quot;</code> 输出代码文件目录</li>
<li><code>&quot;rootDir&quot;: &quot;src&quot;</code> 源代码文件目录</li>
<li><code>&quot;sourceMap&quot;: true,</code> 开启源代码映射</li>
<li><code>&quot;strict&quot;: true, </code> 开启严格模式</li>
</ul>
<p>将<code>outDir</code> 和  <code>rootDir</code> 配置好之后,可以直接使用<code>tsc</code>进行编译</p>
<h1 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h1><ul>
<li>string</li>
<li>number(NaN,Infinity)</li>
<li>boolean</li>
</ul>
<p>在 typescript 中这三种类型是允许为空的(Null , undefined) 【非严格模式下<code>&quot;strict&quot;: false,</code>】</p>
<blockquote>
<p><code>&quot;strict&quot;: true,</code> 对所有配置开启严格模式</p>
<p>单独针对变量可以为空可以使用 <code>&quot;strictNullChecks&quot;: false</code>配置</p>
</blockquote>
<ul>
<li><p>void (此类型只能存放null 或 undefined) 【在严格模式下只能是undefined】</p>
</li>
<li><p>null</p>
</li>
<li><p>undefined</p>
</li>
<li><p>symbol</p>
<p>当<code>&quot;target&quot;: &quot;es5&quot;,</code>使用symbol函数创建symbol的值时会报错</p>
<p><img src="F:\8963repository\img\image-20220304152242363.png" alt="image-20220304152242363" loading="lazy"></p>
<p>在配置文件中<code>&quot;target&quot;: &quot;es2015&quot;,</code>,就没有报错了 </p>
<p>原因是Symbol是ES6定义的, target使用ES5就会报错</p>
<p>除了修改 target 还有一种办法是,修改配置文件中<code>lib</code>,指定引用的标准库</p>
<pre class="language-none"><code class="language-none">&quot;lib&quot;: [&#39;ES2015&#39;,&#39;DOM&#39;],    </code></pre>

<blockquote>
<p>标准库,内置对象所对应的声明,如Array,Object,Symbol</p>
</blockquote>
</li>
</ul>
<h1 id="设置中文错误信息"><a href="#设置中文错误信息" class="headerlink" title="设置中文错误信息"></a>设置中文错误信息</h1>  <pre class="language-none"><code class="language-none">tsc --locale zh-CN</code></pre>

<p>  <img src="F:\8963repository\img\image-20220304163525549.png" alt="image-20220304163525549" loading="lazy"></p>
<p>  但是建议使用英文报错</p>
<h1 id="作用域问题"><a href="#作用域问题" class="headerlink" title="作用域问题"></a>作用域问题</h1><p>  不同文件相同的变量名会报错问题,解决办法</p>
<pre><code>1. 使用立即执行函数创建一个作用域
</code></pre>
  <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<pre><code>2. 使用模块
</code></pre>
  <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre>

<h1 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h1><p>  泛指所有的非原始类型</p>
<p>  object的类型可以是函数\数组\对象,但是不可以是原始类型</p>
  <pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> foo<span class="token operator">:</span> <span class="token function-variable function">object</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// [] // &#123;&#125; </span></code></pre>

<p>  要单指对象类型：</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> obj<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">&#125;</span></code></pre>

<p>对象类型并限制属性，实际定义的属性要与类型限制的一样，不能多也不能少</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> obj<span class="token operator">:</span> <span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">&#125;</span></code></pre>

<p>在typescript中限制对象类型应该使用接口</p>
<h1 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h1><p>两中方式，都是指元素为number类型的数组</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> arr1<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> arr2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>

<p>实例</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> arg<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=></span> prev <span class="token operator">+</span> current<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>当传递不合法的参数时就会报错</p>
<p><img src="F:\8963repository\img\image-20220307114538092.png" alt="image-20220307114538092" loading="lazy"></p>
<blockquote>
<p><code>reduce()</code> 方法对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值。</p>
<ul>
<li>prev 上一次累计的值</li>
<li>current 本次循环的值</li>
</ul>
</blockquote>
<h1 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h1><p>明确元素数量和类型的数组</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> tuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">]</span></code></pre>

<h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><p>使用枚举定义一些带名字的常量。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定义枚举</span>
<span class="token keyword">enum</span> PostStatus <span class="token punctuation">&#123;</span>
  Draft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  Unpublish <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  Pubilish <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 使用枚举</span>
<span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  title<span class="token operator">:</span> <span class="token string">'Hello TypeScript'</span><span class="token punctuation">,</span>
  content<span class="token operator">:</span> <span class="token string">'Typescript is a typed superset of JavaScript.'</span><span class="token punctuation">,</span>
  status<span class="token operator">:</span> PostStatus<span class="token punctuation">.</span>Draft<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在定义枚举时，如果不指定值，则默认从0开始递增</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> PostStatus <span class="token punctuation">&#123;</span>
  Draft<span class="token punctuation">,</span> <span class="token comment">// 0</span>
  Unpublish<span class="token punctuation">,</span> <span class="token comment">// 1</span>
  Pubilish<span class="token punctuation">,</span> <span class="token comment">// 2</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 或者给第一个赋值，之后也是默认递增</span>
<span class="token keyword">enum</span> PostStatus <span class="token punctuation">&#123;</span>
  Draft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  Unpublish<span class="token punctuation">,</span> <span class="token comment">// 1</span>
  Pubilish<span class="token punctuation">,</span> <span class="token comment">// 2</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 如果赋值的时字符串则需要都赋值，字符串无法递增</span>
<span class="token keyword">enum</span> PostStatus <span class="token punctuation">&#123;</span>
  Draft <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span>
  Unpublish <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">,</span> 
  Pubilish <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>枚举与其他类型不同的是，枚举会影响最终的编译，枚举类型最终会被编译为键值对的形式</p>
<p><img src="F:\8963repository\img\image-20220307120505109.png" alt="image-20220307120505109" loading="lazy"></p>
<p>就是可以通过值<code>0,1,2</code>去获取对应的名称<code>Draft，Unpublish，Pubilish</code></p>
<p>如果确定不需要通过值去获取对应的名称，在声明枚举时声明为常量就不会使用键值对的方式编译枚举类型</p>
<p><img src="F:\8963repository\img\image-20220307120855874.png" alt="image-20220307120855874" loading="lazy"></p>
<h1 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h1><p>对函数的输入输出行进限制，函数有两中定义方式</p>
<ul>
<li><p>函数声明</p>
<p>参数声明，参数后携带问号表示一个可选参数</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string">'func1'</span>
<span class="token punctuation">&#125;</span>
<span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre>

<p>对于任意个数的参数，可以使用ES6的<code>rest</code>操作符</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string">'func1'</span>
<span class="token punctuation">&#125;</span></code></pre>
</li>
<li><p>函数表达式</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">func2</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function-variable function">string</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>
  a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  b<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string">'func2'</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ul>
<h1 id="任意类型"><a href="#任意类型" class="headerlink" title="任意类型"></a>任意类型</h1><p><code>any</code> 属于动态类型，实际上与普通的JavaScript的变量是一样的</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<h1 id="隐式类型推断"><a href="#隐式类型推断" class="headerlink" title="隐式类型推断"></a>隐式类型推断</h1><p>此处之前已经将<code>age</code>赋值为<code>number</code>类型，所以typescript隐式类型推断<code>age</code>为<code>number</code>类型，之后再给age赋值别的类型就会报错</p>
<p><img src="F:\8963repository\img\image-20220307122935324.png" alt="image-20220307122935324" loading="lazy"></p>
<p>如果typescript无法推断某个变量的类型，就会将此变量定义为<code>any</code>类型</p>
<p><img src="F:\8963repository\img\image-20220307123312510.png" alt="image-20220307123312510" loading="lazy"></p>
<h1 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h1><p>在typescript无法推断出某个变量类型，但是开发明确知道的情况下</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> num1 <span class="token operator">=</span> res <span class="token keyword">as</span> <span class="token builtin">number</span>
<span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span>res <span class="token comment">// JSX 下不能使用</span></code></pre>

<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>约定对象的结构，约束对象的成员</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定义接口</span>
<span class="token comment">// 可以加逗号或者分号</span>
<span class="token keyword">interface</span> <span class="token class-name">Post</span> <span class="token punctuation">&#123;</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  content<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 定义参数类型为Post接口</span>
<span class="token keyword">function</span> <span class="token function">printPost</span><span class="token punctuation">(</span>post<span class="token operator">:</span> Post<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>title<span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">printPost</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  title<span class="token operator">:</span> <span class="token string">'Hello TypeScript'</span><span class="token punctuation">,</span>
  content<span class="token operator">:</span> <span class="token string">'A Javascript superset'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<h2 id="可选成员、只读成员、动态成员"><a href="#可选成员、只读成员、动态成员" class="headerlink" title="可选成员、只读成员、动态成员"></a>可选成员、只读成员、动态成员</h2><p>可选成员：可有可无</p>
<p>只读成员：一经初始化不可再修改</p>
<p>动态成员：可以动态添加成员</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定义接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Post</span> <span class="token punctuation">&#123;</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  content<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token comment">// 可选成员</span>
  subTitle<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token comment">// 只读成员</span>
  <span class="token keyword">readonly</span> summary<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 动态成员</span>
<span class="token keyword">interface</span> <span class="token class-name">Cache</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> cache<span class="token operator">:</span> Cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
cache<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'a'</span>
cache<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token string">'a'</span></code></pre>



<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>描述一类具体事务的抽象特征</p>
<p>描述一类具体对象的抽象成员</p>
<blockquote>
<p>在ES6以前,JavaScript是通过 函数+原型 模拟实现类</p>
<p>ES6 实现了类, TypeScript 增强了 class 的相关语法</p>
</blockquote>
<p>在TypeScript 中类的属性必须要有一个初始值,可以类型注解的时候赋值,也可以在constructor中去初始化</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">// init 'name'</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">&#125;</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> , </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>msg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h2 id="成员访问修饰符"><a href="#成员访问修饰符" class="headerlink" title="成员访问修饰符"></a>成员访问修饰符</h2><p><code>public</code> - 公有成员 ( 类成员的默认修饰符 )</p>
<p><code>private</code> - 私有属性,只能在类的内部去使用</p>
<p><code>protected</code> - 受保护的 , 无法在外部访问,只允许在子类中访问对应的成员</p>
<p><img src="F:\8963repository\img\image-20220308091551520.png" alt="image-20220308091551520" loading="lazy"></p>
<p>构造函数的访问修饰符</p>
<p><code>public</code> - 默认修饰符</p>
<p><code>protected</code> - 允许继承,不允许被实例化</p>
<p><code>private</code> - 私有的, 不能实例化, 不能被继承</p>
<blockquote>
<p>constructor 定义为 private 的如何 实例化?</p>
<p>类内部定义个静态方法, 通过静态方法实例化私有类</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
 <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> jack <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre>
</blockquote>
<h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><p>如果已经存在访问修饰符, <code>readonly</code> 应该跟在访问修饰符之后</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">protected</span> <span class="token keyword">readonly</span> gender<span class="token operator">:</span> <span class="token builtin">boolean</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h1 id="类-与-接口"><a href="#类-与-接口" class="headerlink" title="类 与 接口"></a>类 与 接口</h1><p>当类有相同的功能的时候可以使用接口抽象出来,一个接口是一个功能</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Eat</span> <span class="token punctuation">&#123;</span>
  <span class="token function">eat</span><span class="token punctuation">(</span>food<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">Run</span> <span class="token punctuation">&#123;</span>
  <span class="token function">run</span><span class="token punctuation">(</span>distance<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Eat</span><span class="token punctuation">,</span> Run <span class="token punctuation">&#123;</span>
  <span class="token function">eat</span><span class="token punctuation">(</span>food<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">优雅进餐: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>food<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">run</span><span class="token punctuation">(</span>distance<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">直立行走：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>distance<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">Eat</span><span class="token punctuation">,</span> Run <span class="token punctuation">&#123;</span>
  <span class="token function">eat</span><span class="token punctuation">(</span>food<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">呼噜呼噜吃: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>food<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">run</span><span class="token punctuation">(</span>distance<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">爬行</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>distance<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>与接口有一些相似 , 都可以约束子类中必须要有某一个成员 , 不同于接口的是,抽象类可以包含某些功能的具体实现 , 而接口只是单纯将某一功能进行抽象</p>
<p>使用<code>abstract</code>定义抽象类, 定义抽象类之后只能被继承,不能使用new实例化</p>
<p>抽象方法也是在方法名前添加<code>abstract</code></p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token function">eat</span><span class="token punctuation">(</span>food<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">呼噜呼噜吃: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>food<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">abstract</span> <span class="token function">run</span><span class="token punctuation">(</span>distance<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token function">run</span><span class="token punctuation">(</span>distance<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">爬行</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>distance<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">'香肠'</span><span class="token punctuation">)</span>
d<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></code></pre>



<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>定义函数、接口、类时 , 不指定具体类型,在调用时再指定其具体类型</p>
<p>函数为例:</p>
<p>不明确的类型使用<code>T</code>代替</p>
<p><img src="F:\8963repository\img\image-20220308095157834.png" alt="image-20220308095157834" loading="lazy"></p>
<h1 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h1><p>在使用第三方工具包时,第三方没有typescript类型声明文件</p>
<p>例如 : </p>
<pre class="language-none"><code class="language-none">yarn add lodash</code></pre>

<p>使用</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> cameCase <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'lodash'</span>
<span class="token comment">// cameCase - lodash 工具包定义的方法，作用是将一个字符串转为驼峰格式</span>
<span class="token comment">// 这个方法的参数与返回都应该是 string</span>

<span class="token comment">// 使用单独的类型声明</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">cameCase</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">cameCase</span><span class="token punctuation">(</span><span class="token string">'hello typed'</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre>





]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript数据结构</title>
    <url>/2020/06/10/%E5%89%8D%E7%AB%AF/JavaScript/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>数据结构 - 栈 ，封装，实现，应用</p>
<p>JavaScript 数据结的封装，实现，应用</p>
<span id="more"></span>

<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈是一种受限的线性结构，后进先出(LIFO)</p>
<ul>
<li>其限制是仅允许在表的一端，进行插入和删除运算。可操作的一方称为栈顶，不可操作的一方称为栈底。</li>
<li>后进先出（last in first out）</li>
<li>向栈插入新元素的操作称为进栈、入栈、压栈。从栈顶添加</li>
<li>从栈删除元素的操作称为出栈、退栈。从栈顶删除</li>
</ul>
<h2 id="栈的封装实现"><a href="#栈的封装实现" class="headerlink" title="栈的封装实现"></a>栈的封装实现</h2><p>栈的常见操作</p>
<ul>
<li>push(element): 添加一个新元素到栈顶位置.</li>
<li>pop()：移除栈顶的元素，同时返回被移除的元素。</li>
<li>peek()：返回栈顶的元素，不对栈做任何修改（这个方法不会移栈顶的元素，仅仅返回它）</li>
<li>isEmpty()：如果栈里没有任何元素就返回 true，否则返回 false。</li>
<li>clear()：移除栈里的所有元素。</li>
<li>size()：返回栈里的元素个数。这个方法和数组的 length 属性很类似。</li>
<li>toString()：转字符串</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 栈的属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token class-name">Stack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token comment">// 栈的操作</span>
  <span class="token class-name">Stack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token class-name">Stack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">peek</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token class-name">Stack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token class-name">Stack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">clear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token class-name">Stack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token class-name">Stack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> resultString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      resultString <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> resultString<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="入栈出站顺序方法实现"><a href="#入栈出站顺序方法实现" class="headerlink" title="入栈出站顺序方法实现"></a>入栈出站顺序方法实现</h2><blockquote>
<p>题目<br>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列 1,2,3,4,5 是某栈的压入顺序，序列 4,5,3,2,1 是该压栈序列对应的一个弹出序列，但 4,3,5,1,2 就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p>
</blockquote>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>准备：<br>传入的数据：入栈顺序数组 pushV，出栈顺序数组 popV</p>
<ol>
<li>首先，判断两个数组是否为空，长度是否相等</li>
<li>准备一个空栈 stack，准备一个计数器 index；</li>
<li>将 pushV 循环加入空栈，并判断 stack 中最后一个元素是否是当前出栈元素（利用 index 记录当前出栈元素）。</li>
<li>如果是就将此元素弹出，不是则继续压入 stack 栈</li>
<li>循环结束，当 stack 为空，代表按照出栈顺序全部弹出。</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">IsPopOrder</span><span class="token punctuation">(</span><span class="token parameter">pushV<span class="token punctuation">,</span> popV</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pushV<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> popV<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> pushV<span class="token punctuation">.</span>length <span class="token operator">!=</span> popV<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pushV<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pushV<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// console.log(stack);</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> popV<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      index<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> pushV <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// let popV = [4, 5, 3, 2, 1, 6]</span>
<span class="token keyword">let</span> popV <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">IsPopOrder</span><span class="token punctuation">(</span>pushV<span class="token punctuation">,</span> popV<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h2 id="十进制转二进制方法"><a href="#十进制转二进制方法" class="headerlink" title="十进制转二进制方法"></a>十进制转二进制方法</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>准备：函数准备一个变量 decNumber 接受传入的十进制数</p>
<ol>
<li>decNumber&#x2F;2，用一个栈保存余数(decNumber%2)</li>
<li>循环判断 decNumber 是否大于 0,大于 0 继续执行第一步操作</li>
<li>当 decNumber 除完为 0 的时候，依次将保存余数的栈取出就是 decNumber 的二进制数</li>
</ol>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">decToBin</span><span class="token punctuation">(</span><span class="token parameter">decNumber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>decNumber <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>decNumber <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    decNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>decNumber <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> binString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    binString <span class="token operator">+=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> binString<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">decToBin</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列(Queue)</p>
<ul>
<li>受限的线性表，先进先出(FIFO,First in Forst Out)</li>
<li>只允许在表的前端（front）进行删除操作</li>
<li>表的后端（rear）进行插入操作</li>
</ul>
<h2 id="队列的实现"><a href="#队列的实现" class="headerlink" title="队列的实现"></a>队列的实现</h2><p>队列的常见操作</p>
<ul>
<li>enqueue(element):向队列尾部添加一个（或多个）新的项。</li>
<li>dequeue():移除队列的第一（即排在队列最前面的)项，并返回被移除的元素。</li>
<li>front():返回队列中第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动(不移除元素只返回元素信息——与 Stack 类的 peek 方法非常类似）。</li>
<li>isEmpty():如果队列中不包含任何元素，返回 true，否则返回 false。</li>
<li>size():返回队列包含的元素个数，与数组的 length 属性类似。</li>
<li>toString():将队列中的内容,转成字符串形式</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">enqueue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">dequeue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">front</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> queueString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      queueString <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> queueString<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="击鼓传花"><a href="#击鼓传花" class="headerlink" title="击鼓传花"></a>击鼓传花</h2><blockquote>
<p>题目：<br>几个朋友一起玩一个游戏,围成一圈，开始数数，数到某个数字的人自动淘汰.最后剩下的这个人会获得胜利,请问最后剩下的是原来在哪一个位置上的人?</p>
</blockquote>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>传入一个名字数组 nameList，一个要数的数字 num</p>
<ol>
<li>新建一个队列，循环 nameList，加入新队列</li>
<li>循环新队列，将 num 之前的元素取出加入到队列末尾</li>
<li>将与 num 对应的元素取出。</li>
<li>继续执行第 2 步，直到队列只剩一个数，再与 nameList 比较得出原来的索引值。</li>
</ol>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">passGame</span><span class="token punctuation">(</span><span class="token parameter">nameLIst<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nameLIst<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>nameLIst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      queue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    queue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">let</span> endName <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> nameLIst<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>endName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> cj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">passGame</span><span class="token punctuation">(</span>cj<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><ul>
<li>优先级队列，插入一个元素的时候会考虑该数据的优先级</li>
<li>和其他数据的优先级进行比较</li>
<li>比较完成后，可以得出这个元素在队列中的正确位置</li>
</ul>
<p>优先级队列主要考虑的问题：</p>
<ul>
<li>每个元素不再只是一个数据,而且包含数据的优先级</li>
<li>在添加方式中,根据优先级放入正确的位置</li>
</ul>
<h2 id="实现优先级队列-插入方法"><a href="#实现优先级队列-插入方法" class="headerlink" title="实现优先级队列 - 插入方法"></a>实现优先级队列 - 插入方法</h2><ol>
<li>封装元素和优先级放在一起(可以封装一个新的构造函数)</li>
<li>添加元素时,将新插入元素的优先级和队列中已经存在的元素优先级进行比较,以获得自己正确的位置.</li>
</ol>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>要插入一个数；会以下情况</p>
<ul>
<li>队列为空 - 直接插入</li>
<li>当前插入数的优先级不是最后 - 与队列内所有数的优先级进行比较再插入</li>
<li>当前插入数的优先级是最后的 - 直接插入末尾</li>
</ul>
<h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 在PriorityQueue内再创建一个类</span>
  <span class="token keyword">function</span> <span class="token function">QueueElement</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> priority</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 保存数据项</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>
    <span class="token comment">// 保存优先级</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> priority<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 封装属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 实现插入方法</span>
  <span class="token class-name">PriorityQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">enqueue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> priority</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建一个对象queueElement</span>
    <span class="token keyword">let</span> queueElement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueueElement</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> priority<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断是否为空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> added <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>queueElement<span class="token punctuation">.</span>priority <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>priority<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> queueElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
          added <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>added<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queueElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScripts对象</title>
    <url>/2020/05/30/%E5%89%8D%E7%AB%AF/JavaScript/JavaScripts%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>JavaScript 对象的方法、属性方法</p>
<span id="more"></span>

<h1 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h1><p>JavaScript 原生提供<code>Object</code>对象。</p>
<p>JavaScript 的所有其他对象都继承自 Object 对象，即那些对象都是 Object 的实例方法。</p>
<p>Object 对象的原生的方法分成两类：Object 本身的方法与 Object 的实例方法。</p>
<p><strong>&lt;1&gt; Object 本身的方法</strong></p>
<p>所谓“本身的方法”就是直接定义在<code>Object</code>对象的方法。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义</span>
Object<span class="token punctuation">.</span><span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 调用</span>
Object<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p><code>print</code>方法直接定义在<code>Object</code>对象上，可以通过 Object 直接调用。</p>
<p><strong>&lt;2&gt; Object 的实例方法</strong></p>
<p>所谓实例方法就是定义在<code>Object</code>原型对象<code>Object.prototype</code>上的方法。它可以被<code>Object</code>实例直接使用。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Object</span></code></pre>

<p><code>Object.prototype</code>定义了一个<code>print</code>方法，然后生成一个<code>Object</code>的实例<code>obj</code>。</p>
<p><code>obj</code>直接继承了<code>Object.prototype</code>的属性和方法，可以直接使用<code>obj.print</code>调用<code>print</code>方法。</p>
<p>也就是说，<code>obj</code>对象的<code>print</code>方法实质上就是调用<code>Object.prototype.print</code>方法。</p>
<p>凡是定义在<code>Object.prototype</code>对象上面的属性和方法，将被所有实例对象共享就可以了。</p>
<h1 id="Object"><a href="#Object" class="headerlink" title="Object()"></a>Object()</h1><blockquote>
<p>Object 作为函数的用法</p>
</blockquote>
<p><code>Object</code>本身是一个函数，可以当作工具方法使用，将任意值转为对象。这个方法常用于保证某个值一定是对象。</p>
<p>如果参数为空（或者为<code>undefined</code>和<code>null</code>），<code>Object()</code>返回一个空对象。</p>
<p><code>instanceof</code>运算符用来验证，一个对象是否为指定的构造函数的实例。</p>
<p><code>obj instanceof Object</code>返回<code>true</code>，就表示<code>obj</code>对象是<code>Object</code>的实例。</p>
<p>如果参数是原始类型的值，<code>Object</code>方法将其转为对应的包装对象的实例。</p>
<pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var obj &#x3D; Object(1);
obj instanceof Object &#x2F;&#x2F; true
obj instanceof Number &#x2F;&#x2F; true

var obj &#x3D; Object(&#39;foo&#39;);
obj instanceof Object &#x2F;&#x2F; true
obj instanceof String &#x2F;&#x2F; true

var obj &#x3D; Object(true);
obj instanceof Object &#x2F;&#x2F; true
obj instanceof Boolean &#x2F;&#x2F; true</code></pre>

<p>转换成对象就是原始类型值对应的包装对象。</p>
<p>如果<code>Object</code>方法的参数是一个对象，它总是返回该对象，即不用转换。利用这一特点，编写一个判断变量是否为对象的函数。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> value <span class="token operator">===</span> <span class="token function">Object</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">isObject</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">isObject</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h1 id="Object-构造函数"><a href="#Object-构造函数" class="headerlink" title="Object 构造函数"></a>Object 构造函数</h1><p>Object 不仅可以作为工具函数使用，还可以当作构造函数使用，即前面可以使用 new 命令。</p>
<p>Object 构造函数的首要用途，是直接通过它来生成新对象。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<blockquote>
<p>注意，通过<code>var obj = new Object()</code>的写法生成新对象，与字面量的写法<code>var obj = &#123;&#125;</code>是等价的</p>
</blockquote>
<p><code>Object</code>构造函数的用法与工具方法很相似，几乎一模一样。使用时，可以接受一个参数，如果该参数是一个对象，则直接返回这个对象；如果是一个原始类型的值，则返回该值对应的包装对象</p>
<p>虽然用法相似，但是<code>Object(value)</code>与<code>new Object(value)</code>两者的语义是不同的，<code>Object(value)</code>表示将<code>value</code>转成一个对象，<code>new Object(value)</code>则表示新生成一个对象，它的值是<code>value</code>。</p>
<h1 id="Object-的静态方法"><a href="#Object-的静态方法" class="headerlink" title="Object 的静态方法"></a>Object 的静态方法</h1><p>所谓“静态方法”，是指部署在<code>Object</code>对象自身的方法。</p>
<h2 id="遍历对象的属性"><a href="#遍历对象的属性" class="headerlink" title="遍历对象的属性"></a>遍历对象的属性</h2><ul>
<li><p>Object.keys()</p>
</li>
<li><p>Object.getOwnPropertyNames()</p>
</li>
</ul>
<p><strong>Object.keys()</strong> 方法参数是一个对象，返回一个数组。</p>
<p>该数组的成员都是该对象自身的（而不是继承的）所有<strong>属性名</strong>。</p>
<p><strong>Object.getOwnPropertyNames()</strong></p>
<p>接受一个对象作为参数，返回一个数组，包含了该对象自身的所有<strong>属性名</strong>。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">p1</span><span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">,</span>
  <span class="token literal-property property">p2</span><span class="token operator">:</span><span class="token number">456</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>区别：</p>
<p><code>Object.keys</code> 方法只返回可枚举的属性</p>
<p><code>Object.getOwnPropertyNames</code> 方法还返回不可枚举的属性名</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["0", "1"]</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["0", "1", "length"]</span></code></pre>

<p>数组的<code>length</code>属性是不可枚举的属性</p>
<p>由于 JavaScript 没有提供计算对象属性个数的方法，所以可以用这两个方法代替。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">p1</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  <span class="token literal-property property">p2</span><span class="token operator">:</span> <span class="token number">456</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 2</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 2</span></code></pre>

<p>一般情况下，几乎总是使用<code>Object.keys</code>方法，遍历对象的属性。</p>
<h2 id="其他静态方法"><a href="#其他静态方法" class="headerlink" title="其他静态方法"></a>其他静态方法</h2><h3 id="对象属性模型的相关方法"><a href="#对象属性模型的相关方法" class="headerlink" title="对象属性模型的相关方法"></a>对象属性模型的相关方法</h3><ul>
<li><p>Object.getOwnPropertyDescriptor()</p>
<p>获取某个属性的描述对象</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070940780.png" loading="lazy"></p>
</li>
<li><p>Object.defineProperty()</p>
<p>通过描述对象，定义某个属性。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070941385.png" loading="lazy"></p>
</li>
<li><p>Object.defineProperties()</p>
<p>通过描述对象，定义多个属性。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070941376.png" loading="lazy"></p>
</li>
</ul>
<h3 id="控制对象状态的方法"><a href="#控制对象状态的方法" class="headerlink" title="控制对象状态的方法"></a>控制对象状态的方法</h3><ul>
<li><p>Object.preventExtensions()</p>
<p>防止对象扩展。也就是永远不能再添加新的属性。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070941755.png" loading="lazy"></p>
</li>
<li><p>Object.isExtensible()</p>
<p>判断对象是否可扩展。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//falselet obj2 = &#123;&#125;Object.isExtensible(obj2)	//true</span></code></pre>
</li>
<li><p>Object.seal()</p>
<p>禁止对象配置。封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">prop</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'cat'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>o <span class="token operator">===</span> obj
<span class="token comment">// trueobj.foo = 'dog';</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">'g'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Uncaught TypeError: Cannot redefine property: foo</span>
<span class="token comment">//    at Function.defineProperty (&lt;anonymous>)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070941708.png" loading="lazy"></p>
</li>
<li><p>Object.isSealed()</p>
<p>判断一个对象是否被密封。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070941352.png" loading="lazy"></p>
</li>
<li><p>Object.freeze()</p>
<p>冻结一个对象。一个被冻结的对象再也不能被修改</p>
</li>
<li><p>Object.isFrozen()</p>
<p>判断一个对象是否被冻结。</p>
</li>
</ul>
<h3 id="原型链相关的方法"><a href="#原型链相关的方法" class="headerlink" title="原型链相关的方法"></a>原型链相关的方法</h3><ul>
<li><p>Object.create()</p>
<p>指定原型对象和属性，返回一个新的对象。</p>
<blockquote>
<p>MDN</p>
<p>创建一个新对象，使用现有的对象来提供新创建的对象的** proto **</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">isHuman</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token function-variable function">printIntroduction</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">. Am I human? </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>isHuman<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> me <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
me<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Matthew"</span><span class="token punctuation">;</span>
me<span class="token punctuation">.</span>isHuman <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
me<span class="token punctuation">.</span><span class="token function">printIntroduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>执行结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070941397.png" loading="lazy"></p>
</li>
<li><p>Object.getPrototypeOf()</p>
<p>获取对象的<code>Prototype</code>对象</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070941694.png" loading="lazy"></p>
</li>
</ul>
<h1 id="Object-的实例方法"><a href="#Object-的实例方法" class="headerlink" title="Object 的实例方法"></a>Object 的实例方法</h1><p>除了静态方法，还有不少方法定义在<code>Object.prototype</code>对象。它们称为实例方法，所有<code>Object</code>的实例对象都继承了这些方法。</p>
<p><code>Object</code> 实例对象的主要方法：</p>
<ul>
<li><p><code>Object.prototype.valueOf()</code>：返回当前对象对应的值。</p>
</li>
<li><p><code>Object.prototype.toString()</code>：返回当前对象对应的字符串形式。</p>
</li>
<li><p><code>Object.prototype.toLocaleString()</code>：返回当前对象对应的本地字符串形式。</p>
</li>
<li><p><code>Object.prototype.hasOwnProperty()</code>：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。</p>
</li>
<li><p><code>Object.prototype.isPrototypeOf()</code>：判断当前对象是否为另一个对象的原型。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070941216.png" loading="lazy"></p>
</li>
<li><p><code>Object.prototype.propertyIsEnumerable()</code>：判断某个属性是否可枚举。</p>
</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> 1arr<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span></code></pre>

<h2 id="Object-prototype-valueOf"><a href="#Object-prototype-valueOf" class="headerlink" title="Object.prototype.valueOf()"></a>Object.prototype.valueOf()</h2><p><code>valueOf</code>方法的作用是返回一个对象的“值”，默认情况下返回对象本身。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre>

<p>valueOf() 方法的主要用途是，JavaScript 自动类型转换时会调用此方法。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">1</span> <span class="token operator">+</span> obj<span class="token punctuation">;</span> <span class="token comment">// "1[object Object]"// 	使用valueOfobj.valueOf = function()&#123;  return 2;&#125;1 + obj	// 3</span></code></pre>

<p>自定义了<code>obj</code>对象的<code>valueOf</code>方法，于是<code>1 + obj</code>就得到了<code>3</code>。这种方法就相当于用自定义的<code>obj.valueOf</code>，覆盖<code>Object.prototype.valueOf</code>。</p>
<h2 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h2><p><code>toString</code>方法的作用是返回一个对象的字符串形式，默认情况下返回类型字符串。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"[object Object]"</span></code></pre>

<p>对于一个对象调用<code>toString</code>方法，会返回字符串<code>[object Object]</code>，该字符串说明对象的类型。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"Gabby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">dogToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p><strong>使用 toString() 查看数据类型</strong></p>
<p>由于实例对象可能会自定义<code>toString</code>方法，覆盖掉<code>Object.prototype.toString</code>方法，所以为了得到类型字符串，最好直接使用<code>Object.prototype.toString</code>方法。通过函数的<code>call</code>方法，可以在任意值上调用这个方法，帮助我们判断这个值的类型。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>不同数据类型的<code>Object.prototype.toString</code>方法返回值如下。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Number]"</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object String]"</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Boolean]"</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Undefined]"</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Null]"</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Math]"</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Object]"</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Array]"</span></code></pre>

<h2 id="Object-prototype-toLocaleString"><a href="#Object-prototype-toLocaleString" class="headerlink" title="Object.prototype.toLocaleString()"></a>Object.prototype.toLocaleString()</h2><p><code>Object.prototype.toLocaleString</code>方法与<code>toString</code>的返回结果相同，也是返回一个值的字符串形式。</p>
<p>这个方法的主要作用是留出一个接口，让各种不同的对象实现自己版本的<code>toLocaleString</code>，用来返回针对某些地域的特定的值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">"Henry Norman Bethune"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">toLocaleString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">"白求恩"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Henry Norman Bethuneperson.toLocaleString() // 白求恩</span></code></pre>

<h2 id="Object-prototype-hasOwnProperty"><a href="#Object-prototype-hasOwnProperty" class="headerlink" title="Object.prototype.hasOwnProperty()"></a>Object.prototype.hasOwnProperty()</h2><p><code>Object.prototype.hasOwnProperty</code>方法接受一个字符串作为参数，返回一个布尔值，表示该实例对象自身是否具有该属性。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>	<span class="token comment">//true</span></code></pre>

<h1 id="属性描述对象"><a href="#属性描述对象" class="headerlink" title="属性描述对象"></a>属性描述对象</h1><p>JavaScript 提供了一个内部数据结构，用来描述对象的属性，控制它的行为，比如该属性是否可写、可遍历等等。这个内部数据结构称为“属性描述对象”（attributes object）。每个属性都有自己对应的属性描述对象，保存该属性的一些元信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070941978.png" loading="lazy"></p>
<p>下面是属性描述对象的一个例子。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">get</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>  <span class="token literal-property property">set</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span></code></pre>

<h1 id="关于属性方法"><a href="#关于属性方法" class="headerlink" title="关于属性方法"></a>关于属性方法</h1><p>Object.getOwnPropertyDescriptor()方法可以获取属性描述对象</p>
<p>Object.getOwnPropertyNames() 遍历对象属性名</p>
<p>Object.defineProperty() 通过描述对象，定义某个属性。</p>
<p>Object.defineProperties() 通过描述对象，定义多个属性。</p>
<p>Object.propertyIsEnumerable() 判断某个属性是否可枚举。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>执行结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070941728.png" loading="lazy"></p>
<h1 id="元属性"><a href="#元属性" class="headerlink" title="元属性"></a>元属性</h1><h2 id="value"><a href="#value" class="headerlink" title="value"></a>value</h2><p><code>value</code>属性是目标属性的值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 读取Object.getOwnPropertyDescriptor(obj, 'a').value// 改写Object.defineProperty(obj, 'a', &#123; value: 246 &#125;);</span></code></pre>

<h2 id="writable"><a href="#writable" class="headerlink" title="writable"></a>writable</h2><p><code>writable</code>属性是一个布尔值，决定了目标属性的值（value）是否可以被改变。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">writable</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>a</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070945821.png" loading="lazy"></p>
<p>当 writable 的值为 false 时，正常模式下修改属性值不会报错，而严格模式下会。</p>
<h2 id="enumerable"><a href="#enumerable" class="headerlink" title="enumerable"></a>enumerable</h2><p><code>enumerable</code>（可遍历性）返回一个布尔值，表示目标属性是否可遍历。</p>
<p>具体来说，如果一个属性的<code>enumerable</code>为<code>false</code>，下面三个操作不会取到该属性。</p>
<ul>
<li><code>for..in</code>循环</li>
<li><code>Object.keys</code>方法</li>
<li><code>JSON.stringify</code>方法</li>
</ul>
<p>因此，<code>enumerable</code>可以用来设置“秘密”属性。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment">// 123for (var key in obj) &#123;  console.log(key);&#125;// undefinedObject.keys(obj)  // []JSON.stringify(obj) // "&#123;&#125;"</span></code></pre>

<p>执行结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070937726.png" loading="lazy"></p>
<h2 id="configurable"><a href="#configurable" class="headerlink" title="configurable"></a>configurable</h2><p><code>configurable</code>(可配置性）返回一个布尔值，决定了是否可以修改属性描述对象。也就是说，<code>configurable</code>为<code>false</code>时，<code>value</code>、<code>writable</code>、<code>enumerable</code>和<code>configurable</code>都不能被修改了。</p>
<blockquote>
<p>注意，<code>writable</code>只有在<code>false</code>改为<code>true</code>会报错，<code>true</code>改为<code>false</code>是允许的。</p>
<p>至于<code>value</code>，只要<code>writable</code>和<code>configurable</code>有一个为<code>true</code>，就允许改动。</p>
</blockquote>
<h1 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h1><p>属性还可以用存取器（accessor）定义。其中，存值函数称为<code>setter</code>，使用属性描述对象的<code>set</code>属性；取值函数称为<code>getter</code>，使用属性描述对象的<code>get</code>属性。</p>
<p>一旦对目标属性定义了存取器，那么存取的时候，都将执行对应的函数。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">"getter"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setter:"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>pobj<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></code></pre>

<p>执行结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070936002.png" loading="lazy"></p>
<p>存取器还有一种写法，此写法在实际开发中更常用</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">get</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">"getter"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">set</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setter:"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<blockquote>
<p>第一种写法，属性<code>p</code>的<code>configurable</code>和<code>enumerable</code>都为<code>false</code>，从而导致属性<code>p</code>是不可遍历的；</p>
<p>第二种写法，属性<code>p</code>的<code>configurable</code>和<code>enumerable</code>都为<code>true</code>，因此属性<code>p</code>是可遍历的。实际开发中，写法二更常用。</p>
</blockquote>
<p>存取器往往用于，属性的值依赖对象内部数据的场合。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">$n</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$n<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">set</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$n<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$n <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"新的值必须大于当前值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070936641.png" loading="lazy"></p>
<h1 id="对象的拷贝"><a href="#对象的拷贝" class="headerlink" title="对象的拷贝"></a>对象的拷贝</h1><p>有时，我们需要将一个对象的所有属性，拷贝到另一个对象，可以用下面的方法实现。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">extend</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> property <span class="token keyword">in</span> from<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    to<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> from<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> to<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>这个方法在于，如果遇到存储器定义的属性，会只拷贝值</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">extend</span><span class="token punctuation">(</span>
  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">get</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>为了解决这个问题，我们可以通过<code>Object.defineProperty</code>方法来拷贝属性。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">extend</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> property <span class="token keyword">in</span> from<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// hasOwnProperty 判断对象是否存在该属性</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>from<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// defineProperty设置属性，（设置属性的对象，设置的属性名，设置属性的值）</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>
      to<span class="token punctuation">,</span>
      property<span class="token punctuation">,</span>
      <span class="token comment">// 获取属性值，（从对象获取属性，属性名）</span>
      Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> property<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> to<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<p>上面代码中，<code>hasOwnProperty</code>那一行用来过滤掉继承的属性，否则可能会报错，因为<code>Object.getOwnPropertyDescriptor</code>读不到继承属性的属性描述对象。</p>
<h1 id="控制对象状态"><a href="#控制对象状态" class="headerlink" title="控制对象状态"></a>控制对象状态</h1><p>有时需要冻结对象的读写状态，防止对象被改变。JavaScript 提供了三种冻结方法，最弱的一种是<code>Object.preventExtensions</code>，其次是<code>Object.seal</code>，最强的是<code>Object.freeze</code>。</p>
<h2 id="扩展状态（添加）"><a href="#扩展状态（添加）" class="headerlink" title="扩展状态（添加）"></a>扩展状态（添加）</h2><p><code>Object.preventExtensions</code>方法可以使得一个对象无法再添加新的属性。</p>
<p><code>Object.isExtensible</code> 检查是否可以为一个对象添加属性。</p>
<h2 id="封闭对象（添加删除）"><a href="#封闭对象（添加删除）" class="headerlink" title="封闭对象（添加删除）"></a>封闭对象（添加删除）</h2><p><code>Object.seal</code>方法使得一个对象既无法添加新属性，也无法删除旧属性。</p>
<p><code>Object.isSealed</code>方法用于检查一个对象是否使用了<code>Object.seal</code>方法。</p>
<h2 id="冻结对象（添加删除改变）"><a href="#冻结对象（添加删除改变）" class="headerlink" title="冻结对象（添加删除改变）"></a>冻结对象（添加删除改变）</h2><p><code>Object.freeze</code>方法可以使得一个对象无法添加新属性、无法删除旧属性、也无法改变属性的值，使得这个对象实际上变成了常量。</p>
<p><code>Object.isFrozen</code>方法用于检查一个对象是否使用了<code>Object.freeze</code>方法。</p>
<h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>上面的三个方法锁定对象的可写性有一个漏洞：可以通过改变原型对象，来为对象增加属性。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> objP <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>objP<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>t<span class="token punctuation">;</span></code></pre>

<p>获取原型，将变量添加到原型上</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070936025.png" loading="lazy"></p>
<p>解决方案：把 obj 的原型也冻结住。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>另外一个局限是，如果属性值是对象，上面这些方法只能冻结属性指向的对象，而不能冻结对象本身的内容。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>bar<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>bar<span class="token punctuation">;</span> <span class="token comment">// ["a", "b", "c"]</span></code></pre>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript数组</title>
    <url>/2020/02/03/%E5%89%8D%E7%AB%AF/JavaScript/JavaScript%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>JavaScript 之数组</p>
<span id="more"></span>

<h1 id="创建和初始化数组"><a href="#创建和初始化数组" class="headerlink" title="创建和初始化数组"></a>创建和初始化数组</h1><ol>
<li>let arr &#x3D; new Array()</li>
<li>let arr2 &#x3D; []</li>
</ol>
<h1 id="添加-x2F-移除数组元素"><a href="#添加-x2F-移除数组元素" class="headerlink" title="添加&#x2F;移除数组元素"></a>添加&#x2F;移除数组元素</h1><p>添加元素</p>
<ul>
<li>array.push() 添加到尾部</li>
<li>array.unshift() 添加到首部</li>
<li>array.splice(指定位置，0，添加内容) 添加到指定位置</li>
</ul>
<p>移除元素</p>
<ul>
<li>array.pop() 删除到尾部</li>
<li>array.shift() 删除到首部</li>
<li>array.splice(起始位置，删除数量) 删除到指定元素</li>
</ul>
<h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>遍历数组最古老的方式就是 <code>for</code> 循环：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Pear"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="for-of"><a href="#for-of" class="headerlink" title="for..of"></a>for..of</h2><p><code>for..of</code> 不能获取当前元素的索引，只是获取元素值</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Plum"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 遍历数组元素</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fruit <span class="token keyword">of</span> fruits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="for-in"><a href="#for-in" class="headerlink" title="for..in"></a>for..in</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Pear"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Apple, Orange, Pear</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>for..in</code> 会有一些潜在问题存在：</p>
<ol>
<li><p><code>for..in</code> 循环会遍历 <strong>所有属性</strong>，不仅仅是这些数字属性。</p>
<p>在浏览器和其它环境中有一种称为“类数组”的对象，它们 <strong>看似是数组</strong>。也就是说，它们有 <code>length</code> 和索引属性，但是也可能有其它的非数字的属性和方法，这通常是我们不需要的。<code>for..in</code> 循环会把它们都列出来。所以如果我们需要处理类数组对象，这些“额外”的属性就会存在问题。</p>
</li>
<li><p><code>for..in</code> 循环适用于普通对象，并且做了对应的优化。但是不适用于数组，因此速度要慢 10-100 倍。当然即使是这样也依然非常快。只有在遇到瓶颈时可能会有问题。但是我们仍然应该了解这其中的不同。</p>
</li>
</ol>
<p>通常来说，我们不应该用 <code>for..in</code> 来处理数组。</p>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">arr.forEach</a> 方法允许为数组的每个元素都运行一个函数。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token string">"Bilbo"</span><span class="token punctuation">,</span> <span class="token string">"Gandalf"</span><span class="token punctuation">,</span> <span class="token string">"Nazgul"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is at index </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>array<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h1 id="在数组中搜索"><a href="#在数组中搜索" class="headerlink" title="在数组中搜索"></a>在数组中搜索</h1><h2 id="indexOf、lastIndexOf、includes"><a href="#indexOf、lastIndexOf、includes" class="headerlink" title="indexOf、lastIndexOf、includes"></a>indexOf、lastIndexOf、includes</h2><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">arr.indexOf</a>、<a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf">arr.lastIndexOf</a> 和 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">arr.includes</a> 方法与字符串操作具有相同的语法，并且作用基本上也与字符串的方法相同，只不过这里是对数组元素而不是字符进行操作：</p>
<ul>
<li><code>arr.indexOf(item, from)</code> 从索引 <code>from</code> 开始搜索 <code>item</code>，如果找到则返回该元素&#x3D;&#x3D;第一次出现的索引&#x3D;&#x3D;，否则返回 <code>-1</code>。</li>
<li><code>arr.lastIndexOf(item, from)</code> —— 和上面相同，只是从后向前搜索，找到则返回该元素&#x3D;&#x3D;最后一次出现的索引&#x3D;&#x3D;，如未找到返回-1。</li>
<li><code>arr.includes(item, from)</code> —— 从索引 <code>from</code> 开始搜索 <code>item</code>，如果找到则&#x3D;&#x3D;返回 <code>true</code>&#x3D;&#x3D;（译注：如果没找到，则返回 <code>false</code>）。</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>

<span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre>

<blockquote>
<p>请注意，这些方法使用的是严格相等 <code>===</code> 比较。所以如果我们搜索 <code>false</code>，会精确到的确是 <code>false</code> 而不是数字 <code>0</code>。</p>
</blockquote>
<p>如果我们想检查是否包含某个元素，并且不想知道确切的索引，那么 <code>arr.includes</code> 是首选。</p>
<p>此外，<code>includes</code> 的一个非常小的差别是它能正确处理<code>NaN</code>，而不像 <code>indexOf/lastIndexOf</code>：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1（应该为 0，但是严格相等 === equality 对 NaN 无效）</span>
<span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true（这个结果是对的）</span></code></pre>

<h2 id="find-和-findIndex"><a href="#find-和-findIndex" class="headerlink" title="find 和 findIndex"></a>find 和 findIndex</h2><pre class="language-none"><code class="language-none">arr.find(function(item, index, array) &#123;&#125;</code></pre>

<p>依次对数组中的每个元素调用该函数：</p>
<ul>
<li><code>item</code> 是元素。</li>
<li><code>index</code> 是它的索引。</li>
<li><code>array</code> 是数组本身。</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Pete"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Mary"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> user <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span></code></pre>

<p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex">arr.findIndex</a> 方法（与 <code>arr.find</code> 方法）基本上是一样的，但它返回找到元素的索引，而不是元素本身。并且在未找到任何内容时返回 <code>-1</code>。</p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> results <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 如果 true item 被 push 到 results，迭代继续</span>
  <span class="token comment">// 如果什么都没找到，则返回空数组</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>语法与 <code>find</code> 大致相同，但是 <code>filter</code> 返回的是所有匹配元素组成的数组</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Pete"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Mary"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 返回前两个用户的数组</span>
<span class="token keyword">let</span> someUsers <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>someUsers<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code></pre>

<h1 id="转换数组"><a href="#转换数组" class="headerlink" title="转换数组"></a>转换数组</h1><p>数组转换和重新排序的方法</p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/map">arr.map</a> 方法是最有用和经常使用的方法之一。</p>
<p>它对数组的每个元素都调用函数，并返回结果数组。</p>
<p>语法：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 返回新值而不是当前元素</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>例如，在这里我们将每个元素转换为它的字符串长度：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> lengths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Bilbo"</span><span class="token punctuation">,</span> <span class="token string">"Gandalf"</span><span class="token punctuation">,</span> <span class="token string">"Nazgul"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>lengths<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5,7,6</span></code></pre>

<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">arr.reverse</a> 方法用于颠倒 <code>arr</code> 中元素的顺序。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5,4,3,2,1</span></code></pre>

<h2 id="split-和-join"><a href="#split-和-join" class="headerlink" title="split 和 join"></a>split 和 join</h2><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/String/split">str.split(delim)</a> 方法可以做到。它通过给定的分隔符 <code>delim</code> 将字符串分割成一个数组。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token string">"Bilbo, Gandalf, Nazgul"</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> name <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A message to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A message to Bilbo（和其他名字）</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/join">arr.join(glue)</a> 与 <code>split</code> 相反。它会在它们之间创建一串由 <code>glue</code> 粘合的 <code>arr</code> 项。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Bilbo"</span><span class="token punctuation">,</span> <span class="token string">"Gandalf"</span><span class="token punctuation">,</span> <span class="token string">"Nazgul"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用分号 ; 将数组粘合成字符串</span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Bilbo;Gandalf;Nazgul</span></code></pre>

<h2 id="reduce-x2F-reduceRight"><a href="#reduce-x2F-reduceRight" class="headerlink" title="reduce&#x2F;reduceRight"></a>reduce&#x2F;reduceRight</h2><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">arr.reduce</a> 方法和 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight">arr.reduceRight</a> 方法用于根据数组计算单个值。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> value <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>initial<span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>该函数一个接一个地应用于所有数组元素，并将其结果“搬运（carry on）”到下一个调用。</p>
<p>参数：</p>
<ul>
<li><code>accumulator</code> —— 是上一个函数调用的结果，第一次等于 <code>initial</code>（如果提供了 <code>initial</code> 的话）。</li>
<li><code>item</code> —— 当前的数组元素。</li>
<li><code>index</code> —— 当前索引。</li>
<li><code>arr</code> —— 数组本身。</li>
</ul>
<p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight">arr.reduceRight</a> 和 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">arr.reduce</a> 方法的功能一样，只是遍历为从右到左。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=></span> sum <span class="token operator">+</span> current<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span></code></pre>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串常用操作</title>
    <url>/2021/06/10/%E5%89%8D%E7%AB%AF/JavaScript/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>数据结构 - 栈 ，封装，实现，应用</p>
<p>JavaScript 数据结的封装，实现，应用</p>
<span id="more"></span>

<h1 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h1><p>截取某字符之前之后</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"18.5-23.9"</span><span class="token punctuation">;</span>    

document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">//输出18.5</span>

document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">//输出23.9</span></code></pre>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>变量、作用域与内存</title>
    <url>/2021/05/10/%E5%89%8D%E7%AB%AF/JavaScript/%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<h1 id="原始值与引用值"><a href="#原始值与引用值" class="headerlink" title="原始值与引用值"></a>原始值与引用值</h1><p>ECMAScript 变量可以包含两种不同类型的数据：原始值和引用值。</p>
<p>原始值（primitive value）就是 最简单的数据<br>保存原始值的变量是按值（by value）访问的，因为我们操作的就是存储在变量中的实际值。</p>
<p>引用值（reference value）则是由多个值构成的对象。<br>引用值是保存在内存中的对象。保存引用值的变量是按引用（by reference）访问的。实际操作的是对该对象的引用。</p>
<blockquote>
<p>数据类型：</p>
<ol>
<li>原始类型</li>
</ol>
<ul>
<li>String</li>
<li>Boolean</li>
<li>Number</li>
<li>Null</li>
<li>Undefined</li>
<li>Symbol（ES6）</li>
<li>BigInt（ES2020）</li>
</ul>
<ol start="2">
<li>引用类型</li>
</ol>
<ul>
<li>Object</li>
<li>Function</li>
<li>Array</li>
</ul>
</blockquote>
<h2 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h2><p>引用值可以随时添加、修改和删除其属性和方法。<br>原始值不能有属性，尽管尝试给原始值添加属性不会报错。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span> 
name<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">27</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></code></pre>

<p>注意，原始类型的初始化可以只使用原始字面量形式。如果使用的是 new 关键字，则 JavaScript 会 创建一个 Object 类型的实例，但其行为类似原始值。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070938401.png" loading="lazy"></p>
<h2 id="复制值"><a href="#复制值" class="headerlink" title="复制值"></a>复制值</h2><p>在通过变量把一个原始值赋值 到另一个变量时，原始值会被复制到新变量的位置。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> num2 <span class="token operator">=</span> num1<span class="token punctuation">;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070925039.png" loading="lazy"></p>
<p>在把引用值从一个变量赋给另一个变量时，存储在变量中的值也会被复制到新变量所在的位置。区 别在于，这里复制的值实际上是一个指针，它指向存储在堆内存中的对象。操作完成后，两个变量实际 上指向同一个对象，因此一个对象上面的变化会在另一个对象上反映出来.</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span> 
obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Nicholas"</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070926924.png" loading="lazy"></p>
<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>ECMAScript 中所有函数的参数都是按值传递的。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Flex 布局</title>
    <url>/2020/07/21/%E5%89%8D%E7%AB%AF/css/Flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h1><p>Flex 是 Flexible Box 的缩写，意思为“弹性布局”</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>块级布局侧重垂直方向、行内布局侧重水平方向，而 Flex 布局是与方向无关的</li>
<li>Flex 布局可以实现空间自动分配、自动对齐（弹性、灵活）</li>
<li>Flex 布局适用于简单的线性布局，更复杂的布局使用 Grid 布局</li>
</ol>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>开启 Flex 布局的元素，可以看做一个 Flex 容器</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.bigBox</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>Flex 容器默认有两根轴：主轴（main axis）和侧轴（cross axis）。</p>
<p>在默认情况下主轴是水平分布的，侧轴是垂直分布的，但可以通过<code>flex-direction</code>来改变主侧轴的分布方向。所以并不能说，水平分布的是主轴，垂直分布的是侧轴。</p>
<h1 id="父元素的属性"><a href="#父元素的属性" class="headerlink" title="父元素的属性"></a>父元素的属性</h1><h2 id="flex-direction-主轴方向"><a href="#flex-direction-主轴方向" class="headerlink" title="flex-direction 主轴方向"></a>flex-direction 主轴方向</h2><p>决定主轴（main axis）的方向</p>
<p>属性值：</p>
<blockquote>
<p>row: 默认值，从左到右；column: 从上到下；<br>row-reverse: 从右到左；column-reverse: 从下到上</p>
</blockquote>
<p>代码实践</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.bigBox</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> beige<span class="token punctuation">;</span>
    <span class="token comment">/* flex-direction: row; */</span>
    <span class="token comment">/* flex-direction: column; */</span>
    <span class="token comment">/* flex-direction: row-reverse; */</span>
    <span class="token comment">/* flex-direction: column-reverse; */</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.smallBox</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.smallBox1</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.smallBox2</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> palevioletred<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">.smallBox3</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bigBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>bigBox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>smallBox smallBox1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>smallBox1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>smallBox smallBox2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>smallBox2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>smallBox smallBox3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>smallBox3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre>

<h2 id="flex-wrap-子元素换行"><a href="#flex-wrap-子元素换行" class="headerlink" title="flex-wrap 子元素换行"></a>flex-wrap 子元素换行</h2><p>默认的情况下，Flex 容器中的子元素都排在一行，如果子元素的总宽度大于父元素的宽度，子元素就会被压缩。<code>flex-wrap</code>属性可以设置子元素换行，它一共有 3 个值：</p>
<blockquote>
<p>nowrap: 默认值，不换行<br>wrap: 换行，第一行在上方<br>wrap: 换行，第一行在下方</p>
</blockquote>
<h2 id="flex-flow-主轴和子元素换行"><a href="#flex-flow-主轴和子元素换行" class="headerlink" title="flex-flow 主轴和子元素换行"></a>flex-flow 主轴和子元素换行</h2><p><code>flex-flow</code>属性是<code>flex-direction</code>和<code>flex-wrap</code>的组合，它是将这两个属性写到一起，</p>
<p>先写<code>flex-direction</code></p>
<p>后写<code>flex-wrap</code></p>
<p>默认值为<code>row nowrap</code></p>
<p>默认值</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token property">flex-flow</span><span class="token punctuation">:</span> row nowrap<span class="token punctuation">;</span></code></pre>

<h2 id="justify-content-主轴对齐方式"><a href="#justify-content-主轴对齐方式" class="headerlink" title="justify-content 主轴对齐方式"></a>justify-content 主轴对齐方式</h2><p><code>justify-content</code>属性定义子元素在主轴上的对齐方式，它主要有 5 种取值：</p>
<blockquote>
<p>flex-start: 默认值，从起点开始<br>flex-end: 从终点对齐<br>cneter: 居中对齐<br>space-between: 两端对齐，子元素之间的间隔相等<br>space-around: 每个子元素的左右间隔相等</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070812261.jpg" loading="lazy"></p>
<h2 id="align-items-侧轴对齐方式"><a href="#align-items-侧轴对齐方式" class="headerlink" title="align-items 侧轴对齐方式"></a>align-items 侧轴对齐方式</h2><p><code>align-items</code>属性定义子元素在侧轴上的对齐方式，主要由 5 种取值：</p>
<blockquote>
<p>strech: 默认值，子元素的高度铺满父元素<br>flex-start: 子元素从侧轴起点对齐<br>flex-end: 子元素从侧轴终点对齐<br>center: 子元素根据侧轴居中对齐<br>baseline: 根据子元素第一行文字的基线对齐(当字体大小不一致时，突出效果)</p>
</blockquote>
<p><strong>注意：</strong> 应用此属性时，子元素的高度不能写死，应该由其内容撑起来</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070813007.png" loading="lazy"></p>
<h2 id="align-content-多根轴线侧轴上的对齐方式"><a href="#align-content-多根轴线侧轴上的对齐方式" class="headerlink" title="align-content 多根轴线侧轴上的对齐方式"></a>align-content 多根轴线侧轴上的对齐方式</h2><p><code>align-content</code> 属性定义子元素多根轴线在侧轴上的对齐方式，只在多行显示下有效。主要取以下 5 个值：</p>
<blockquote>
<p>stretch: 默认值，轴线铺满侧轴<br>flex-start: 与侧轴起点对齐<br>flex-end: 与侧轴终点对齐<br>center: 与侧轴中点对齐<br>space-between: 与侧轴两端对齐，轴线之间的间隔相等<br>space-around: 每根轴线两侧的间隔相等</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070813217.png" loading="lazy"></p>
<h1 id="子元素属性"><a href="#子元素属性" class="headerlink" title="子元素属性"></a>子元素属性</h1><p>Flex 布局的子元素共有 6 种属性可以设置，分别为：</p>
<h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><p><code>flex-grow</code>属性表示当父元素空间有剩余时，将剩余空间分配给各子元素的比例，默认为<code>0</code>，表示不分配；当为数值时，表示父元素剩余空间分配给各子元素的比例，不是扩张后子元素的尺寸比例</p>
<h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p><code>flex-shrink</code>属性与<code>flex-grow</code>属性的作用相反，表示当子元素宽度总和大于父元素宽度，且未换行显示时，各子元素压缩大小，默认为<code>1</code>，表示各子元素等比压缩；当数值不一时，表示各子元素因为压缩空间而减小的尺寸的比例，不是压缩后子元素尺寸的比例</p>
<h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><p><code>flex-basis</code>属性可以用来设置子元素的空间，默认值为<code>auto</code>，表示为原本大小。当父元素有剩余空间时，可通过此属性扩充子元素的空间；各子元素通过扩孔之后的空间总和超过了父元素的空间大小时，按<code>flex-basis</code>值比例来设置子元素的大小，没有<code>flex-basis</code>属性时，默认<code>flex-basis</code>值为子元素原本大小，使子元素大小总和不得超过父元素空间大小</p>
<h2 id="flex-合集"><a href="#flex-合集" class="headerlink" title="flex 合集"></a>flex 合集</h2><p><code>flex</code>属性是<code>flex-grow</code>、<code>flex-shrink</code>和<code>flex-basis</code>的合集，默认值为<code>0 1 auto</code>，后两个属性可不写</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token property">flex</span><span class="token punctuation">:</span> 0 1 auto<span class="token punctuation">;</span></code></pre>

<h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><p><code>order</code>属性定义子元素在排列顺序，默认值为<code>0</code>，值越小越靠前。</p>
<h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p><code>align-self</code>属性允许子元素单独设置对齐方式，优先级比父元素的<code>align-items</code>高。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>，如果没有父元素，则等同于<code>stretch</code>。其可设置以下属性：</p>
<blockquote>
<p>auto: 继承父元素的<code>align-items</code><br>stretch<br>flex-start<br>flex-end<br>center<br>baseline</p>
</blockquote>
<h1 id="Flex-布局应用"><a href="#Flex-布局应用" class="headerlink" title="Flex 布局应用"></a>Flex 布局应用</h1><h2 id="上中下"><a href="#上中下" class="headerlink" title="上中下"></a>上中下</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
      <span class="token selector">body</span> <span class="token punctuation">&#123;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
        <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token selector">header</span> <span class="token punctuation">&#123;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token selector">main</span> <span class="token punctuation">&#123;</span>
        <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token selector">footer</span> <span class="token punctuation">&#123;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>heafer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<h2 id="九宫格"><a href="#九宫格" class="headerlink" title="九宫格"></a>九宫格</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
      <span class="token selector">*</span> <span class="token punctuation">&#123;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token selector">ul</span> <span class="token punctuation">&#123;</span>
        <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 170px<span class="token punctuation">;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
        <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
        <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token selector">li</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> 5px 0<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<h2 id="一般-PC-布局"><a href="#一般-PC-布局" class="headerlink" title="一般 PC 布局"></a>一般 PC 布局</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
      <span class="token selector">body</span> <span class="token punctuation">&#123;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
        <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token selector">header</span> <span class="token punctuation">&#123;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token selector">main</span> <span class="token punctuation">&#123;</span>
        <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token selector">.aside1</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #aaa<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token selector">.aside2</span> <span class="token punctuation">&#123;</span>
        <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token selector">.aside3</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #aaa<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token selector">footer</span> <span class="token punctuation">&#123;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aside1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>aside1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aside2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>aside2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aside3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>aside3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<h3 id="自适应绝对居中"><a href="#自适应绝对居中" class="headerlink" title="自适应绝对居中"></a>自适应绝对居中</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    <span class="token selector">*</span> <span class="token punctuation">&#123;</span>
      <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>
      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
      <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
      <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token selector">main</span> <span class="token punctuation">&#123;</span>
      <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid布局.md</title>
    <url>/2020/07/23/%E5%89%8D%E7%AB%AF/css/Grid%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="CSS-布局-Grid"><a href="#CSS-布局-Grid" class="headerlink" title="CSS 布局 - Grid"></a>CSS 布局 - Grid</h1><p><code>Grid</code> 布局即网格布局，是一种新的 <code>CSS</code> 布局模型，比较擅长将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系。</p>
<h2 id="开启Grid布局"><a href="#开启Grid布局" class="headerlink" title="开启Grid布局"></a>开启Grid布局</h2><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">#gridBox</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span>grid
  <span class="token comment">/* 或 display:inline-grid */</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这样 <code>#gridBox</code> 成为了一个&#x3D;&#x3D; 网格容器 &#x3D;&#x3D;，这个元素的所有直系子元素将成为&#x3D;&#x3D;网格项目&#x3D;&#x3D;。</p>
<p>声明 <code>display：grid</code> 则该容器是一个块级元素，设置成 <code>display: inline-grid</code> 则容器元素为行内元素</p>
<h1 id="Grid-容器属性"><a href="#Grid-容器属性" class="headerlink" title="Grid 容器属性"></a>Grid 容器属性</h1><h2 id="列宽-行高"><a href="#列宽-行高" class="headerlink" title="列宽 \ 行高"></a>列宽 \ 行高</h2><p><code>grid-template-columns</code> 属性设置列宽,<code>grid-template-rows</code> 属性设置行高</p>
<p>属性值:</p>
<p><code>px</code></p>
<p>设置几列&#x2F;几行，每列的宽度&#x2F;高度固定px</p>
<p><code>repeat(重复次数, 重复的值)</code></p>
<p> 简化重复, 参数repeat(重复次数, 重复的值)</p>
<p><code>auto-fill</code></p>
<p>自动填充, 列的数量不固定, 只要浏览器能够容纳得下</p>
<p><code>fr</code></p>
<p><code>fr</code> 单位代表网格容器中可用空间的一等份。</p>
<blockquote>
<p><code>grid-template-columns: 200px 1fr 2fr</code> </p>
<p>表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1&#x2F;3 和 2&#x2F;3</p>
</blockquote>
<p><code>minmax()</code></p>
<p>两个参数，分别为最小值和最大值, 产生一个长度范围，表示长度就在这个范围之中都可以应用到网格项目中.</p>
<blockquote>
<p><code>grid-template-columns: 1fr 1fr minmax(300px, 2fr)</code> </p>
<p>表示第三个列宽最少也是要 300px，但是最大不能大于第一第二列宽的两倍。</p>
</blockquote>
<p><code>auto</code></p>
<p>由浏览器决定长度。</p>
<p>例子：</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token comment">/* 固定px */</span>
<span class="token selector">#gridBox</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 200px 100px 200px<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 50px 50px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* repeat() - 简化重复 */</span>
<span class="token selector">#gridBox</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 200px 100px 200px<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* auto-fill - 自动填充 */</span>
<span class="token selector">#gridBox</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
	<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> 200px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* fr */</span>
<span class="token selector">#gridBox</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 200px 1fr 2fr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* minmax() */</span>
<span class="token selector">#gridBox</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 1fr 1fr <span class="token function">minmax</span><span class="token punctuation">(</span>300px<span class="token punctuation">,</span> 2fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* auto 由浏览器决定,实现三列布局 */</span>
<span class="token selector">#gridBox</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px auto 100px
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="行间距-列间距"><a href="#行间距-列间距" class="headerlink" title="行间距 \ 列间距"></a>行间距 \ 列间距</h2><p><code>grid-row-gap</code> 属性、<code>grid-column-gap</code> 属性分别设置行间距和列间距。<code>grid-gap</code> 属性是两者的简写形式。</p>
<blockquote>
<p>{ grid-row-gap: 10px;grid-column-gap: 20px; }</p>
<p>&#x3D;&#x3D;&#x3D;</p>
<p>{ grid-gap: 10px 20px; }</p>
</blockquote>
<h2 id="定义区域"><a href="#定义区域" class="headerlink" title="定义区域"></a>定义区域</h2><p><code>grid-template-areas</code> 属性用于定义区域，一个区域由一个或者多个单元格组成</p>
<p>一般与项目属性组合使用 <code>grid-area</code> 属性指定项目放在哪一个区域.</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.wrapper</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 120px auto 120px<span class="token punctuation">;</span>
  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">". header header"</span> <span class="token string">"sidebar content content"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.sidebar</span> <span class="token punctuation">&#123;</span>
  <span class="token property">grid-area</span><span class="token punctuation">:</span> sidebar<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.content</span> <span class="token punctuation">&#123;</span>
  <span class="token property">grid-area</span><span class="token punctuation">:</span> content<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.header</span> <span class="token punctuation">&#123;</span>
  <span class="token property">grid-area</span><span class="token punctuation">:</span> header<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p><code>grid-template-areas: &quot;. header header&quot; &quot;sidebar content content&quot;;</code></p>
<p>表示划分出 6 个单元格,并设置每个单元格的内容,  <code>.</code>  表示此单元格为空</p>
<p><code>grid-area</code></p>
<p>为当前项目指定容器中的位置</p>
</blockquote>
<h2 id="自动布局算法"><a href="#自动布局算法" class="headerlink" title="自动布局算法"></a>自动布局算法</h2><p><code>grid-auto-flow</code> 属性控制着自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行</p>
<blockquote>
<p>grid-auto-flow: row; 默认先行后列</p>
<p>grid-auto-flow: row dense;  尽可能填满表格</p>
<p>grid-auto-flow: column; 先列后行</p>
</blockquote>
<h2 id="项目内容位置"><a href="#项目内容位置" class="headerlink" title="项目内容位置"></a>项目内容位置</h2><p><code>justify-items</code> 属性设置单元格内容的水平位置，<code>align-items</code> 属性设置单元格的垂直位置</p>
<blockquote>
<p>水平位置:左 | 中 | 右 | 拉伸占满单元格的整个宽度（默认值）</p>
<p>justify-items: start | end | center | stretch; </p>
<p>垂直位置:上 | 中 | 下 | 拉伸占满单元格的整个宽度（默认值）</p>
<p>align-items: start | end | center | stretch;</p>
</blockquote>
<h2 id="所有项目位置"><a href="#所有项目位置" class="headerlink" title="所有项目位置"></a>所有项目位置</h2><p><code>justify-content</code> 属性是整个内容区域在容器里面的水平位置（左中右），<code>align-content</code> 属性是整个内容区域的垂直位置（上中下）。它们都有如下的属性值。</p>
<blockquote>
<p>水平位置: </p>
<p>justify-content: start | end | center | stretch | space-around | space-between | space-evenly;  </p>
<p>垂直位置</p>
<p>align-content: start | end | center | stretch | space-around | space-between | space-evenly; </p>
<ul>
<li>start - 对齐容器的起始边框</li>
<li>end - 对齐容器的结束边框</li>
<li>center - 容器内部居中</li>
<li>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍</li>
<li>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔</li>
<li>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔</li>
<li>stretch - 项目大小没有指定时，拉伸占据整个网格容器</li>
</ul>
</blockquote>
<h2 id="隐式网格-列宽-x2F-行高"><a href="#隐式网格-列宽-x2F-行高" class="headerlink" title="隐式网格 列宽 &#x2F; 行高"></a>隐式网格 列宽 &#x2F; 行高</h2><p>隐式和显式网格：显式网格包含了你在 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 属性中定义的行和列。如果你在网格定义之外又放了一些东西，或者因为内容的数量而需要的更多网格轨道的时候，网格将会在隐式网格中创建行和列</p>
<p>假如有多余的网格（也就是上面提到的隐式网格），那么它的行高和列宽可以根据 <code>grid-auto-columns</code> 属性和 <code>grid-auto-rows</code> 属性设置。它们的写法和<code>grid-template-columns</code> 和 <code>grid-template-rows</code> 完全相同。</p>
<h1 id="Grid-项目属性"><a href="#Grid-项目属性" class="headerlink" title="Grid 项目属性"></a>Grid 项目属性</h1><h2 id="项目的边框"><a href="#项目的边框" class="headerlink" title="项目的边框"></a>项目的边框</h2><p>可以指定网格项目所在的四个边框，分别定位在哪根网格线，从而指定项目的位置</p>
<ul>
<li>grid-column-start 属性：左边框所在的垂直网格线</li>
<li>grid-column-end 属性：右边框所在的垂直网格线</li>
<li>grid-row-start 属性：上边框所在的水平网格线</li>
<li>grid-row-end 属性：下边框所在的水平网格线</li>
</ul>
<h2 id="定义单个项目"><a href="#定义单个项目" class="headerlink" title="定义单个项目"></a>定义单个项目</h2><p><code>grid-area</code> 属性指定项目放在哪一个区域</p>
<h2 id="内容位置"><a href="#内容位置" class="headerlink" title="内容位置"></a>内容位置</h2><p><code>justify-self</code> 属性设置单元格内容的水平位置（左中右）, <code>align-self</code> 属性设置单元格内容的垂直位置（上中下</p>
<blockquote>
<p>justify-self: start | end | center | stretch;  </p>
<p>align-self: start | end | center | stretch;</p>
</blockquote>
<h1 id="Grid布局-与-Flex布局"><a href="#Grid布局-与-Flex布局" class="headerlink" title="Grid布局 与 Flex布局"></a>Grid布局 与 Flex布局</h1><p> <strong><code>flex</code> 布局是一维布局，<code>Grid</code> 布局是二维布局</strong>。</p>
<p><code>flex</code> 布局一次只能处理一个维度上的元素布局，一行或者一列。</p>
<p><code>Grid</code> 布局是将容器划分成了“行”和“列”，产生了一个个的网格，我们可以将网格元素放在与这些行和列相关的位置上，从而达到我们布局的目的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070814919.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>React 原理</title>
    <url>/2021/11/07/%E5%89%8D%E7%AB%AF/react/React%20%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<ul>
<li>setState() 异步更新数据</li>
<li>JXS 语法转化过程</li>
<li>React 组件更新机制</li>
<li>组件性能优化</li>
<li>虚拟DOM、Diff算法</li>
</ul>
<span id="more"></span>

<h1 id="React-原理"><a href="#React-原理" class="headerlink" title="React 原理"></a>React 原理</h1><h2 id="setState-方法"><a href="#setState-方法" class="headerlink" title="setState() 方法"></a>setState() 方法</h2><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><ul>
<li><code>setState()</code> 是异步更新数据的</li>
<li>后面的<code>setState()</code> 是不依赖于前面的<code>setState()</code> </li>
<li>可以调用多次<code>setState()</code> ,但是只会触发一次<code>render</code>重新渲染</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleAdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// setSate()已执行完，但此处输出 1</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"count:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 由于setState()是异步的，再次调用setState()，页面的count还是2</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>计数<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleAdd<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>解决当调用两次<code>setState()</code>，第一次<code>setState()</code>并不影响第二次<code>setState()</code>值的问题.</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleAdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>计数<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleAdd<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>setState()</code> 经过这样的处理之后，调用两次<code>setSate()</code>页面上<code>count</code>的值为2.<code>setState()</code>回调函数内<code>state</code>和<code>props</code>都是最新的</p>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p><code>setState(updater[,callback])</code></p>
<p>第二参数回调函数，会在状态更新完成、重新渲染后立即执行某个操作，可以获取到最新的state，操作DOM等操作。</p>
<p><code>setState()</code>的回调函数与<code>componentDidUpdate()</code>有一定的相似之处.在某些情况下可以代替使用</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleAdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"状态更新完成："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"更新后的count为："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1 id<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>计数<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleAdd<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070750084.png" loading="lazy"></p>
<h2 id="JSX语法的转化过程"><a href="#JSX语法的转化过程" class="headerlink" title="JSX语法的转化过程"></a>JSX语法的转化过程</h2><ul>
<li>JSX 仅仅是<code>createElement()</code>方法的语法糖(简化语法)</li>
<li>JSX 语法被<code>@babel/preset-react</code>插件编译为<code>createElement()</code>方法</li>
<li>React 元素:是一个对象,用来描述页面上的内容</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070746824.png" loading="lazy"></p>
<p>代码演示:</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> element1 <span class="token operator">=</span> <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"title1"</span><span class="token operator">></span>Hello <span class="token constant">JSX</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> element2 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
  <span class="token string">"h1"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">"title2"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token string">"Hello JSX!"</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070748598.png" loading="lazy"></p>
<h2 id="组件更新机制"><a href="#组件更新机制" class="headerlink" title="组件更新机制"></a>组件更新机制</h2><p><code>setState()</code>的两个作用:1.修改 state 2.更新组件UI</p>
<p>父组件重新渲染时,也会重新渲染子组件.但是只会渲染&#x3D;&#x3D;当前组件子树&#x3D;&#x3D;</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070747250.png" loading="lazy"></p>
<p>代码体现</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"#369"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">getBG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function-variable function">changeBG</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"根组件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"app"</span> style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>color <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeBG<span class="token punctuation">&#125;</span><span class="token operator">></span>根组件 <span class="token operator">-</span> 切换样式状态<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"app-wrapper"</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>Parent1 <span class="token operator">/</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>Parent2 <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 左侧</span>
<span class="token keyword">class</span> <span class="token class-name">Parent1</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"左侧 - 父组件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>h2<span class="token operator">></span>
          左侧
          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token function">点我</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"parent-wrapper"</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>Child1_1 <span class="token operator">/</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>Child1_2 <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Child1_1</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"左侧 - 子组件1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>子组件<span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Child1_2</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"左侧 - 子组件2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>子组件<span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 右侧</span>
<span class="token keyword">class</span> <span class="token class-name">Parent2</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"右侧 - 父组件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>h2<span class="token operator">></span>
          右侧
          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token function">点我</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"parent-wrapper"</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>Child2_1 <span class="token operator">/</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>Child2_2 <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Child2_1</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"右侧 - 子组件1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>子组件<span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Child2_2</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"右侧 - 子组件2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>子组件<span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="组件性能优化"><a href="#组件性能优化" class="headerlink" title="组件性能优化"></a>组件性能优化</h2><h3 id="减轻state"><a href="#减轻state" class="headerlink" title="减轻state"></a>减轻state</h3><p>减轻state :只存储→组件渲染相关的数据（比如: count &#x2F;列表数据 &#x2F; loading等)</p>
<p>注意:不用做渲染的数据不要放在state 中，比如定时器id等</p>
<p>对于这种需要在多个方法中用到的数据，应该放在this 中</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">Comment</span><span class="token punctuation">&#123;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 定时器id应该存储在this中，而不是state</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>timerId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">compoentWithUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="避免不必要的重新渲染"><a href="#避免不必要的重新渲染" class="headerlink" title="避免不必要的重新渲染"></a>避免不必要的重新渲染</h3><p>组件更新机制︰父组件更新会引起子组件也被更新，子组件没有任何变化时也会重新渲染</p>
<p>使用钩子函数<code>shouldComponentUpdate(nextProps, nextState)</code>可以免不必要的重新渲染，<code>nextProps, nextState</code>表示最新的<code>props、state</code></p>
<p>通过返回值决定该组件是否重新渲染，返回true表示重新渲染，false表示不重新渲染触发时机∶更新阶段的</p>
<p>钩子函数，组件重新渲染前执行（ shouldComponentUpdate &#x3D;&gt;render )</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 组件不会重新渲染</span>
  <span class="token comment">// return false;</span>
  <span class="token comment">// 最新的state</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nextState"</span><span class="token punctuation">,</span> nextState<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 更新前的state</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this.state"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 这样可以通过对比更新前后state是否相同判断是否更新组件</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070948498.png" loading="lazy"></p>
<p>随机数案例：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nextState"</span><span class="token punctuation">,</span> nextState<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"this.state"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nextState<span class="token punctuation">.</span>number <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>number <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>随机数<span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>number<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>生产随机数<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070750148.png" loading="lazy"></p>
<h2 id="纯组件"><a href="#纯组件" class="headerlink" title="纯组件"></a>纯组件</h2><p>纯组件: PureComponent与React.Component功能相似</p>
<p>区别: PureComponent内部自动实现了shouldComponentUpdate钩子,不需要手动比较</p>
<p>原理:纯组件内部通过分别对比前后两次props和state的值,来决定是否重新渲染组件</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>随机数<span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>number<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>生产随机数<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h3 id="浅层对比"><a href="#浅层对比" class="headerlink" title="浅层对比"></a>浅层对比</h3><p>说明:纯组件内部的对比是shallow compare (浅层对比)</p>
<ul>
<li><p>值类型来说:比较两个值是否相同(直接赋值即可,没有坑)</p>
</li>
<li><p>引用类型来说:只比较对象的引用(地址)是否相同</p>
</li>
</ul>
<blockquote>
<p>注意: <code>state</code>或<code>props</code>中属性值为引用类型时,应该创建新数据,不要直接修改原数据!</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>obj<span class="token punctuation">,</span> <span class="token literal-property property">number</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">obj</span><span class="token operator">:</span> newObj <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>随机数<span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>number<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>生产随机数<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="虚拟DOM和Diff算法"><a href="#虚拟DOM和Diff算法" class="headerlink" title="虚拟DOM和Diff算法"></a>虚拟DOM和Diff算法</h2><blockquote>
<p>React更新视图只要state变化就重新渲染视图</p>
<p>React中通过&#x3D;&#x3D;虚拟DOM配合Diff算法&#x3D;&#x3D;实现部分更新</p>
</blockquote>
<p>虚拟DOM：本质就是一个JS对象，用来描述页面上的内容，其实就是我们说的React元素</p>
<p><strong>Diff 执行过程</strong></p>
<ol>
<li><p>初次渲染时，React会根据初始state ( Model )，创建一个虚拟DOM对象（树)。</p>
</li>
<li><p>根据虚拟DOM生成真正的DOM，渲染到页面中。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070745204.png" alt="image-20211108123325819" loading="lazy"></p>
</li>
<li><p>当数据变化后( setState( )，重新根据新的数据，创建新的虚拟DOM对象(树)。</p>
</li>
<li><p>与上一次得到的虚拟DOM对象，使用Diff算法对比(找不同），得到需要更新的内容。</p>
</li>
<li><p>最终，React只将变化的内容更新( patch )到DOM中，重新渲染到页面。</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070751979.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React基础 - 基本使用</title>
    <url>/2021/04/27/%E5%89%8D%E7%AB%AF/react/React%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>React基本使用、jsx、事件处理、表单处理、案例总结</p>
<span id="more"></span>

<h1 id="React-基础"><a href="#React-基础" class="headerlink" title="React 基础"></a>React 基础</h1><blockquote>
<p>React 是构建用户界面的 JavaScript 库</p>
</blockquote>
<h2 id="React基本使用"><a href="#React基本使用" class="headerlink" title="React基本使用"></a>React基本使用</h2><h3 id="安装-react"><a href="#安装-react" class="headerlink" title="安装 react"></a>安装 react</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i react react-dom</code></pre>

<ul>
<li>react 包是核心,提供创建元素\组件等功能</li>
<li>react-dom 包提供 DOM 相关功能</li>
</ul>
<h3 id="使用react"><a href="#使用react" class="headerlink" title="使用react"></a>使用react</h3><ol>
<li><p>引入 React</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./node_modules/react/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./node_modules/react-dom/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>


</li>
<li><p>创建 React 元素, 并渲染到页面中</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 1. 创建的元素</span>
  <span class="token comment">// React.createElement("元素名称", 元素属性, "元素子节点(文本节点)");</span>
  <span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Hello Raect!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 2. 渲染的元素</span>
  <span class="token comment">// ReactDOM.render(要渲染的元素, 挂载点);</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li>
</ol>
<h2 id="React-脚手架的使用"><a href="#React-脚手架的使用" class="headerlink" title="React 脚手架的使用"></a>React 脚手架的使用</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><ol>
<li>初始化项目 <code>npx create-react-app my-app</code></li>
<li>启动项目 <code>cd my-app</code> , <code>yarn start</code></li>
</ol>
<h3 id="在脚手架中使用-React"><a href="#在脚手架中使用-React" class="headerlink" title="在脚手架中使用 React"></a>在脚手架中使用 React</h3><ol>
<li><p>导入 react 和 react-dom</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>创建 React 元素</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Hello React !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	</code></pre>


</li>
<li><p>渲染元素到页面中</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li>
</ol>
<h1 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h1><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote>
<p>JSX 是 JavaScript XML 的简写, 表示在JavaScript代码中写XML格式的代码.</p>
</blockquote>
<ol>
<li><p>使用 JSX 创建 React 元素</p>
<pre class="language-none"><code class="language-none">const title &#x3D; &lt;h1&gt;Hello JSX&lt;&#x2F;h1&gt;;</code></pre>


</li>
<li><p>渲染元素</p>
<pre class="language-none"><code class="language-none">ReactDOM.render(title, document.getElementById(&quot;root&quot;));</code></pre></li>
</ol>
<p><strong>注意:</strong></p>
<ol>
<li><p>React 的元素名使用驼峰命名法</p>
<p>如: class -&gt; className ;  for -&gt; htmlFor ……</p>
</li>
<li><p>没有子节点的 React 元素可以使用 <code>/&gt;</code> 结束</p>
</li>
<li><p>推荐使用 &#x3D;&#x3D;小括号包裹 JSX&#x3D;&#x3D;</p>
</li>
</ol>
<blockquote>
<p><strong>为什么脚手架中可以直接使用 JSX 语法 ?</strong></p>
<ol>
<li>jsx 不是标准的 ECMAScript 语法,它是 ECMAScript 的语法扩展</li>
<li>需要使用 babel 编译处理后, 才能在浏览器中显示</li>
<li>create-react-app 脚手架已经默认有该配置无需手动配置</li>
<li>编译 JSX 的语法包为: <a href="https://www.babeljs.cn/docs/babel-preset-react">@babel&#x2F;preset-react</a></li>
<li>要想在普通 html 或者 js 文件使用 jsx 需要引入babel包</li>
</ol>
</blockquote>
<h3 id="JavaScript-表达式"><a href="#JavaScript-表达式" class="headerlink" title="JavaScript 表达式"></a>JavaScript 表达式</h3><p>嵌入 js 表达式</p>
<p>语法: <code>&#123; JavaScript表达式 &#125;</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>Hello <span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span></code></pre>



<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>根据条件渲染特定的 JSX 格式</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">loadData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>数据加载完成<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>h1<span class="token operator">></span>
    <span class="token literal-property property">条件渲染</span><span class="token operator">:</span>
    <span class="token punctuation">&#123;</span><span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>渲染一组数据可以使用数组的 <code>map()</code> 方法</p>
<p>列表渲染时应该添加 key 属性, key属性要保证唯一的值</p>
<p>避免使用索引号作为key</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> songs <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"123"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"456"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"789"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>ul<span class="token operator">></span>
    <span class="token punctuation">&#123;</span>
      songs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h3 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h3><ol>
<li><p>行内样式</p>
<p>以对象形式添加, 使用驼峰命名法</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value css language-css"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span></span></span></span> <span class="token attr-name"><span class="token namespace">color:</span></span> <span class="token attr-name">"red"</span> <span class="token attr-name">&#125;&#125;</span><span class="token punctuation">></span></span>列表渲染<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre>
</li>
<li><p>类名 - className</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"title"</span> style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
      列表渲染
    <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre></li>
</ol>
<blockquote>
<p>React 完全利用 JS 语言自身能力来编写 ui , 而不是造轮子增强 html 功能</p>
</blockquote>
<h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><p>使用 js 函数或者箭头函数创建的组件</p>
<ul>
<li>函数名称必须以 &#x3D;&#x3D;大写字母开头&#x3D;&#x3D;</li>
<li>函数组件必须有返回值, 表示该组件的结构</li>
<li>如果返回值为 null , 表示不渲染任何内容</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 普通函数</span>
<span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>这是一个函数组件<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 箭头函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>这是一个函数组件<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Hello <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><p>使用 ES6 的 class 创建组件</p>
<ul>
<li>类名称必须以 &#x3D;&#x3D;大写字母开头&#x3D;&#x3D;</li>
<li>类组件必须继承 <code>React.Component</code> 父类, 使用父类提供的方法和属性</li>
<li>类组件必须提供 <code>render()</code> 方法</li>
<li><code>render()</code> 方法必须有返回值, 表示该组件的结构</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span> 我是类组件 <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Hello <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h3 id="组件抽离为独立的-JS-文件"><a href="#组件抽离为独立的-JS-文件" class="headerlink" title="组件抽离为独立的 JS 文件"></a>组件抽离为独立的 JS 文件</h3><ol>
<li><p>创建 Hello.js, 并导入 React</p>
</li>
<li><p>在 Hello.js 中创建组件, 并导出组件</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Hellow.js</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span> 我是独立的 Hello 组件 <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Hello<span class="token punctuation">;</span></code></pre>
</li>
<li><p>在 index.js 中导入 Hello 组件 , 并渲染组件</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// idnex.js</span>
<span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">"./Hellow"</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Hello <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li>
</ol>
<h2 id="React-事件处理"><a href="#React-事件处理" class="headerlink" title="React 事件处理"></a>React 事件处理</h2><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>语法：<code>on + 事件名称 = &#123;事件处理&#125;</code> , 比如: <code>onClick=&#123;()=&gt;&#123;	&#125;&#125;</code></p>
<p>注意: React 事件采用&#x3D;&#x3D;驼峰命名法&#x3D;&#x3D;, 比如: onMouseEnter , onFoucus</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 类组件</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>点我<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 函数组件</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span> 点我 <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>





<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><ul>
<li>可以通过&#x3D;&#x3D;事件处理程序的参数&#x3D;&#x3D;获取到事件对象</li>
<li>React 中的事件对象叫做: 合成事件 ( 对象 )</li>
<li>合成事件: 兼容所有浏览器,无需担心跨浏览器兼容性问题</li>
</ul>
<p>事例场景:<br>点击 a 标签, 但是不跳转连接. </p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 阻止浏览器的默认行为</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"跳转到百度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://www.baidu.com/"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>
        百度
      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="有状态组件和无状态组件"><a href="#有状态组件和无状态组件" class="headerlink" title="有状态组件和无状态组件"></a>有状态组件和无状态组件</h3><ul>
<li>函数组件 &#x3D;&gt; 无状态组件 ; 类组件 &#x3D;&gt; 有状态组件</li>
<li>状态( status ) 即数据</li>
<li>函数组件没有自己的状态, 只负责数据展示( 静 )</li>
<li>类组件有自己的状态, 负责更新UI和数据</li>
</ul>
<h3 id="State-状态-的使用"><a href="#State-状态-的使用" class="headerlink" title="State (状态) 的使用"></a>State (状态) 的使用</h3><ul>
<li>状态 (state) 即数据, 是组件内部私有数据, 只能在组件内部使用</li>
<li>state 的值是对象, 表示一个组件中可以有多个数据</li>
</ul>
<p>取出数据</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方法一</span>
<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 方法二</span>
state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<p>修改状态</p>
<p>语法: <code>this.setState(&#123;要修改的数据&#125;)</code></p>
<p>注意: 不要直接修改 state 中的值, 这是错误的</p>
<p>react 思想: &#x3D;&#x3D;数据驱动视图&#x3D;&#x3D;</p>
<h3 id="事件绑定this指向"><a href="#事件绑定this指向" class="headerlink" title="事件绑定this指向"></a>事件绑定this指向</h3><blockquote>
<p>事件处理程序中的this是 underfind</p>
<p>this 指向组件实例 ( render 方法中的this即为组件实例 )</p>
</blockquote>
<p>解决方法 : </p>
<ol>
<li><p>箭头函数</p>
<p>利用箭头函数自身是不绑定this的特点，<code>render()</code>中的 this 就能指向组件实例</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>计数器<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>


</li>
<li><p><code>Function.prototype.bind()</code></p>
<p>使用 ES5 中的<code>bind</code>方法将事件处理函数中的this与组件实例绑定到一起</p>
<p><code>constructor</code> 中的 this 指向组件实例</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onIncrement <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onIncrement</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>计数器<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onIncrement<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>


</li>
<li><p>class 实例</p>
<p>利用箭头函数形式的class实例方法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">onIncrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>计数器<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onIncrement<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ol>
<h2 id="React-表单处理"><a href="#React-表单处理" class="headerlink" title="React 表单处理"></a>React 表单处理</h2><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><blockquote>
<p>HTML 中表单元素是可以输入的, 也就是有自己的可变状态. 而React中可变状态通常保存在 state 中,通过 steState() 方法来修改. </p>
<p>React 将 state 与表单元素的value绑定到一起, &#x3D;&#x3D;由state的值来控制表单元素的值&#x3D;&#x3D;</p>
</blockquote>
<p>受控组件基本使用</p>
<ol>
<li>在state 中添加一个状态，作为表单元素的value值（控制表单元素值的来源)</li>
<li>给表单元素绑定change事件，将表单元素的值设置为state的值（控制表单元素值的变化)</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">txt</span><span class="token operator">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">changeTxt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">txt</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>input
          type<span class="token operator">=</span><span class="token string">"text"</span>
          value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span>
          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeTxt<span class="token punctuation">&#125;</span>
        <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>练习使用受控组件</p>
<p>文本框, 富文本框, 下拉框, 复选框</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">txt</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">"bj"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">isChecked</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleTxt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">txt</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleContent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">content</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleCity</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">city</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleChecked</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">isChecked</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 文本框 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>input
          type<span class="token operator">=</span><span class="token string">"text"</span>
          value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span>
          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeTxt<span class="token punctuation">&#125;</span>
        <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>
        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 富文本框 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>textarea
          value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span>
          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleContent<span class="token punctuation">&#125;</span>
        <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>
        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 下拉框 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>select value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>city<span class="token punctuation">&#125;</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleCity<span class="token punctuation">&#125;</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"sh"</span><span class="token operator">></span>上海<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"bj"</span><span class="token operator">></span>北京<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"gz"</span><span class="token operator">></span>广州<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>
        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 复选框 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>input
          type<span class="token operator">=</span><span class="token string">"checkbox"</span>
          checked<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isChecked<span class="token punctuation">&#125;</span>
          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChecked<span class="token punctuation">&#125;</span>
        <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="元素优化"><a href="#元素优化" class="headerlink" title="元素优化"></a>元素优化</h3><p>优化: 使用一个事件处理程序同时处理多个表单元素</p>
<p>步骤:</p>
<p>1．给表单元素添加name属性，名称与state相同</p>
<p>2．根据表单元素类型获取对应值</p>
<p>3．在change 事件处理程序中通过[name]来修改对应的state</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">txt</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">"bj"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">isChecked</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span>
      e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"checkbox"</span> <span class="token operator">?</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked <span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">const</span> name <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> value<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 文本框 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>input
          type<span class="token operator">=</span><span class="token string">"text"</span>
          value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>txt<span class="token punctuation">&#125;</span>
          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleForm<span class="token punctuation">&#125;</span>
          name<span class="token operator">=</span><span class="token string">"txt"</span>
        <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>
        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 富文本框 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>textarea
          name<span class="token operator">=</span><span class="token string">"content"</span>
          value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span>
          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleForm<span class="token punctuation">&#125;</span>
        <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>
        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 下拉框 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>select name<span class="token operator">=</span><span class="token string">"city"</span> value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>city<span class="token punctuation">&#125;</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleForm<span class="token punctuation">&#125;</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"sh"</span><span class="token operator">></span>上海<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"bj"</span><span class="token operator">></span>北京<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"gz"</span><span class="token operator">></span>广州<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>
        <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 复选框 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>input
          name<span class="token operator">=</span><span class="token string">"isChecked"</span>
          type<span class="token operator">=</span><span class="token string">"checkbox"</span>
          checked<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isChecked<span class="token punctuation">&#125;</span>
          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleForm<span class="token punctuation">&#125;</span>
        <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><p>说明：借助于 ref , 使用原生 DOM 方式来获取表单元素值</p>
<p>使用步骤: </p>
<ol>
<li>调用 <code>React.creatRef()</code> 方法创建一个 ref 对象</li>
<li>将创建好的 ref 对象添加到文本框中</li>
<li>通过 ref 对象获取文本框中的值</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>txRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function-variable function">changeRef</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>txRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>txRef<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeRef<span class="token punctuation">&#125;</span><span class="token operator">></span>get<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h2 id="组件案例"><a href="#组件案例" class="headerlink" title="组件案例"></a>组件案例</h2><p>案例：评论列表</p>
<h3 id="列表渲染-1"><a href="#列表渲染-1" class="headerlink" title="列表渲染"></a>列表渲染</h3><ol>
<li>在state中初始化评论列表数据</li>
<li>使用数组的map方法遍历state中的列表数据</li>
<li>给每个被遍历的li元素添加key属性</li>
</ol>
<h3 id="发表评论"><a href="#发表评论" class="headerlink" title="发表评论"></a>发表评论</h3><ol>
<li>获取评论信息</li>
<li>给按钮绑定单击事件</li>
<li>在事件处理程序中，通过state获取评论信息</li>
<li>将评论信息添加到state中，并调用setState(方法更新state</li>
<li>边界处理：清空文本框，非空判断</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"沙发!!!"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"jack2"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"沙发2!!!"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"jack3"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"沙发3!!!"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token literal-property property">userContent</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">issue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token comment">// 列表渲染</span>
  <span class="token function-variable function">renderList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>comments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"no-comment"</span><span class="token operator">></span>暂无评论<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>ul<span class="token operator">></span>
          <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>comments<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token operator">></span>
              <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
              <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>content<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token comment">// 发表评论</span>
  <span class="token function-variable function">handleForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> value <span class="token punctuation">&#125;</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> value<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">addComment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> comments<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> userContent <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>userName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">""</span> <span class="token operator">||</span> userContent<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入内容!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> newComments <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> userName<span class="token punctuation">,</span>
        <span class="token literal-property property">content</span><span class="token operator">:</span> userContent<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>comments<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// console.log(newComment);</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">comments</span><span class="token operator">:</span> newComments<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
      <span class="token literal-property property">userContent</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> userName<span class="token punctuation">,</span> userContent <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>label<span class="token operator">></span>评论人：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>
        <span class="token operator">&lt;</span>input
          type<span class="token operator">=</span><span class="token string">"text"</span>
          className<span class="token operator">=</span><span class="token string">"user"</span>
          value<span class="token operator">=</span><span class="token punctuation">&#123;</span>userName<span class="token punctuation">&#125;</span>
          name<span class="token operator">=</span><span class="token string">"userName"</span>
          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleForm<span class="token punctuation">&#125;</span>
        <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>
        <span class="token operator">&lt;</span>label<span class="token operator">></span>评论内容：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>
        <span class="token operator">&lt;</span>textarea
          className<span class="token operator">=</span><span class="token string">"content"</span>
          value<span class="token operator">=</span><span class="token punctuation">&#123;</span>userContent<span class="token punctuation">&#125;</span>
          name<span class="token operator">=</span><span class="token string">"userContent"</span>
          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleForm<span class="token punctuation">&#125;</span>
        <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>issue<span class="token punctuation">&#125;</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>addComment<span class="token punctuation">&#125;</span><span class="token operator">></span>
          发表
        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React基础 - 组件进阶</title>
    <url>/2021/10/22/%E5%89%8D%E7%AB%AF/react/React%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<p>组件通讯、props</p>
<span id="more"></span>

<h1 id="组件进阶"><a href="#组件进阶" class="headerlink" title="组件进阶"></a>组件进阶</h1><h2 id="组件的props"><a href="#组件的props" class="headerlink" title="组件的props"></a>组件的props</h2><p>组件是封闭的, 要接收外部数据应该通过 props 来实现, props 可以接收传递给组件的数据.</p>
<p>传递数据: 给组件标签添加属性</p>
<p>接收数据: 函数组件通过<code>参数props</code>接收数据, 类组件通过 <code>this.props</code> 接收数据</p>
<p>特点：</p>
<ol>
<li>可以传递任意类型的数据</li>
<li><code>props</code> 是只读的对象, 只能读取数据的值, 无法修改对象</li>
<li>&#x3D;&#x3D;注意 :&#x3D;&#x3D; 使用类组件时如果写了构造函数, 应该将 <code>props</code> 传递给 <code>super()</code> , 否则无法在构造函数中 获取到 <code>props</code> , 但是这对其他函数(如<code>render()</code>)并没有影响.</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//	函数组件</span>
<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 调用接收的函数</span>
  props<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>h1<span class="token operator">></span>props<span class="token operator">:</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
      <span class="token punctuation">&#123;</span><span class="token comment">/* 使用接收的jsx表达式 */</span><span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>tag<span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//	类组件</span>
<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 调用接收的函数</span>
  props<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>h1<span class="token operator">></span>props<span class="token operator">:</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
      <span class="token punctuation">&#123;</span><span class="token comment">/* 使用接收的jsx表达式 */</span><span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>tag<span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>Hello
    name<span class="token operator">=</span><span class="token string">"jack"</span>
    age<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">19</span><span class="token punctuation">&#125;</span>
    color<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
    fn<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"传递一个函数给组件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    tag<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>p<span class="token operator">></span>传递一个p标签给组件<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">&#125;</span>
  <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h2><blockquote>
<p>组件是独立且封闭的单元，默认情况下，只能使用组件自己的数据。在组件化过程中，我们将一个完整的功能拆分成多个组件，以更好的完成整个应用的功能。而在这个过程中，多个组件之间不可避免的要共享某些数据。为了实现这些功能，就需要打破组件的独立封闭性，让其与外界沟通。这个过程就是 &#x3D;&#x3D;组件通讯&#x3D;&#x3D;</p>
</blockquote>
<p>组件通讯方式</p>
<ul>
<li>父组件 &#x3D;&gt; 子组件</li>
<li>子组件 &#x3D;&gt; 父组件</li>
<li>兄弟组件</li>
</ul>
<h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><ol>
<li>父组件要提供传递给<code>state</code>的数据</li>
<li>给子组件标签添加属性，值为state中的数据</li>
<li>子组件中通过props接收父组件中传递的数据</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">"王"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        父组件
        <span class="token operator">&lt;</span>Child lastName<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>lastName<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>父组件的数据<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>lastName<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Parent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p>思路:利用回调函数，父组件提供回调，子组件调用，将要传递的数据作为回调函数的参数。</p>
<ol>
<li>父组件提供一个回调函数（用于接收数据）</li>
<li>将该函数作为属性的值，传递给子组件</li>
<li>子组件通过 <code>props</code> 调用回调函数</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">getChildMsg</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"接收到的数据:"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> msg<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token literal-property property">父组件接收到子组件的数据</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>Child getChildMsg<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>getChildMsg<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">childMsg</span><span class="token operator">:</span> <span class="token string">"React"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">getChildMsg</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>childMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>子组件给子组件传递数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Parent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h3 id="兄弟组件"><a href="#兄弟组件" class="headerlink" title="兄弟组件"></a>兄弟组件</h3><p>将共享状态提升到最近的公共父组件中，由公共父组件管理这个状态</p>
<p>思想:状态提升</p>
<p>公共父组件职责∶</p>
<ol>
<li><p>提供共享状态</p>
</li>
<li><p>提供操作共享状态的方法要通讯的子组件</p>
</li>
</ol>
<p>只需通过props接收状态或操作状态的方法</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 提供共享的状态</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">addCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>Child1 count<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Child2 addCount<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>addCount<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Child1</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>计数器<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Child2</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">addCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Parent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070754750.png" loading="lazy"></p>
<p>思考:App组件要传递数据给<code>Child</code>组件，该如何处理?</p>
<p>处理方式:使用<code>props</code>一层层组件往下传递（繁琐)</p>
<p>更好的解决办法：Context &#x3D;&#x3D;跨组件传递数据（比如主题、预言等）&#x3D;&#x3D;</p>
<p>使用Context：</p>
<ol>
<li>调用<code>React. createContext()</code>创建<code>Provider</code>(提供数据）和<code>Consumer</code>(消费数据）两个组件。</li>
<li>使用<code>Provider</code>组件作为父节点。</li>
<li>在<code>Provider</code>上设置value的值, 表示要传递的值</li>
<li>使用<code>Consumer</code>组件来接收数据</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建 context</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Provider<span class="token punctuation">,</span> Consumer <span class="token punctuation">&#125;</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>Provider value<span class="token operator">=</span><span class="token string">"pink"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>Node <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"node"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>SubNode <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">SubNode</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"subnode"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Child <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Consumer<span class="token operator">></span>
          <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>span<span class="token operator">></span> data表示接收到的数据<span class="token operator">:</span><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Consumer<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="Props-深入"><a href="#Props-深入" class="headerlink" title="Props 深入"></a>Props 深入</h2><h3 id="children-属性"><a href="#children-属性" class="headerlink" title="children 属性"></a>children 属性</h3><p><code>children</code>属性︰表示组件标签的子节点。当组件标签有子节点时，props就会有该属性</p>
<p><code>children</code>属性与普通的<code>props</code>一样，值可以是任意值（文本、React元素、组件，甚至是函数)</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  props<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>h1<span class="token operator">></span>组件标签的子节点：<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
      <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">Test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>button<span class="token operator">></span>我是一个button组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>App<span class="token operator">></span>
    我是子节点
    <span class="token operator">&lt;</span>p<span class="token operator">></span>我是一个p标签<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>Test <span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是一个函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070754804.png" loading="lazy"></p>
<h3 id="Props-校验"><a href="#Props-校验" class="headerlink" title="Props 校验"></a>Props 校验</h3><p>对于组件来说，<code>props</code>是外来的，无法保证组件使用者传入什么格式的数据, 如果传入的数据格式不对，可能会导致组件内部报错</p>
<p><code>props</code>校验∶允许在创建组件的时候，就指定<code>props</code>的类型、格式等</p>
<p>作用︰捕获使用组件时因为<code>props</code>导致的错误，给出明确的错误提示，增加组件的健壮性</p>
<p>使用:</p>
<ol>
<li>安装包<code>prop-types</code> ( yarn add prop-types &#x2F; npm i props-types )</li>
<li>导入<code>prop-types</code>包</li>
<li>使用<code>组件名.propTypes =&#123;&#125;</code>来给组件的props添加校验规则</li>
<li><a href="https://reactjs.org/docs/typechecking-with-proptypes.html">校验规则</a>通过<code>PropTypes</code> 对象来指定</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> PropType <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> props<span class="token punctuation">.</span>colors<span class="token punctuation">;</span>
  <span class="token keyword">const</span> lis <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token punctuation">&#123;</span>lis<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
App<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">colors</span><span class="token operator">:</span> PropType<span class="token punctuation">.</span>array<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>App colors<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ReactDOM.render(&lt;App colors=&#123;19&#125;>&lt;/App>, document.getElementById("root"));</span></code></pre>

<p>类型不一致时报错:</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070754910.png" loading="lazy"></p>
<p>约束规则:</p>
<ol>
<li>常见类型: array、bool、func、number、object、stringReact</li>
<li>元素类型:element</li>
<li>必填项: isRequired</li>
<li>特定结构的对象: shape({ })</li>
</ol>
<p><a href="https://reactjs.org/docs/typechecking-with-proptypes.html">校验规则</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> PropType <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span>
<span class="token comment">//添加props校验1/属性a的类型; 数值（number)</span>
<span class="token comment">//属性 fn的类型:  函数（func）并且为必填项</span>
<span class="token comment">//属性tag的类型:  React元素（element)</span>
<span class="token comment">//属性filter的类型: 对象（&#123;area: ‘上海',price: 1999&#125;)</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>props 校验<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
App<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> PropType<span class="token punctuation">.</span>number<span class="token punctuation">,</span>
  <span class="token literal-property property">fn</span><span class="token operator">:</span> PropType<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> PropType<span class="token punctuation">.</span>element<span class="token punctuation">,</span>
  <span class="token literal-property property">filter</span><span class="token operator">:</span> PropType<span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">area</span><span class="token operator">:</span> PropType<span class="token punctuation">.</span>string<span class="token punctuation">,</span>
    <span class="token literal-property property">price</span><span class="token operator">:</span> PropType<span class="token punctuation">.</span>number<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="Props-默认值"><a href="#Props-默认值" class="headerlink" title="Props 默认值"></a>Props 默认值</h3><p>给props设置默认值，在未传入props 时生效</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> PropType <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>props 默认值<span class="token operator">:</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>pageSize<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
App<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p>生命周期：组件从被创建到挂载到页面中运行，再到组件不用时卸载的过程</p>
<p>生命周期的每个阶段总是伴随着一些方法调用，这些方法就是生命周期的钩子函数。</p>
<p>钩子函数的作用:为开发人员在不同阶段操作组件提供了时机。</p>
<p>&#x3D;&#x3D;只有类组件才有生命周期&#x3D;&#x3D;</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070754602.png" loading="lazy"></p>
<h3 id="1-创建时-挂载阶段"><a href="#1-创建时-挂载阶段" class="headerlink" title="1.创建时(挂载阶段)"></a>1.创建时(挂载阶段)</h3><p>执行时机:组件创建时( 页面加载时 )</p>
<p>执行顺序:</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070755097.png" loading="lazy"></p>
<p>说明：</p>
<ol>
<li><p>constructor()</p>
<p>创建组件时，最先执行</p>
<p>作用：</p>
<ul>
<li>初始化state</li>
<li>为事件处理程序绑定<code>this</code></li>
</ul>
</li>
<li><p>render()</p>
<p>每次组件渲染都会触发</p>
<p>作用:</p>
<ul>
<li><p>渲染 UI (注意: 不能调用 <code>setState()</code> )</p>
<blockquote>
<p>因为 <code>setState()</code> 方法在更新state后会调用<code>render()</code>渲染ui, 如果在<code>render</code>中调用<code>setState()</code>会造成递归产生错误.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>componentDidMount()</p>
<p>组件挂载(完成 DOM 渲染) 后</p>
<p>作用:</p>
<ul>
<li>发送网络请求</li>
<li>DOM 操作</li>
</ul>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"生命周期函数：constructor！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"生命周期函数：render！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"生命周期函数：componentDidMount！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h3 id="2-更新时"><a href="#2-更新时" class="headerlink" title="2.更新时"></a>2.更新时</h3><h4 id="触发render"><a href="#触发render" class="headerlink" title="触发render()"></a>触发<code>render()</code></h4><ol>
<li>setState()</li>
<li>foreUpdate()</li>
<li>组件接收到新的<code>props</code></li>
</ol>
<p>以上任意一种情况都会触发<code>render()</code>重新渲染</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// setState()</span>
    <span class="token comment">// this.setState(&#123;</span>
    <span class="token comment">//   count: this.state.count + 1,</span>
    <span class="token comment">// &#125;);</span>
    <span class="token comment">// 强制更新</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"生命周期函数：render！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 传递新的props */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>Counter count<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>打豆豆<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"--子组件--生命周期函数：render！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>统计被打豆豆的次数：<span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h4 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h4><p>执行顺序：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070755233.png" loading="lazy"></p>
<p>说明：</p>
<ol>
<li><p>render()</p>
<p>每次组件渲染都会触发</p>
<p>作用:</p>
<ul>
<li>渲染 UI (注意: 不能调用 <code>setState()</code> )</li>
</ul>
</li>
<li><p>componentDidUpdate()</p>
<p>组件更新（完成DOM渲染）后</p>
<p>作用：</p>
<ul>
<li><p>发送网络请求</p>
</li>
<li><p>DOM操作</p>
<blockquote>
<p>注意：如果要<code>setState()</code>必须放在一个<code>if</code>条件中</p>
<p>如果直接调用 <code>setState()</code>更新状态, 也会导致递归更新</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"--子组件--生命周期函数：render！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>统计被打豆豆的次数：<span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">prevProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"--子组件--生命周期函数：componentDidUpdate！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 比较更新前后的props是否相同, 来决定是否重新渲染组件</span>
    <span class="token comment">// console.log("上一次的props:", prevProps, ",当前的props", this.props);</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevProps<span class="token punctuation">.</span>count <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 发送Ajax请求</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="3-卸载时"><a href="#3-卸载时" class="headerlink" title="3.卸载时"></a>3.卸载时</h3><p>执行时机:组件从页面中消失</p>
<p><code>componentWillUnmount()</code></p>
<p>组件卸载(从页面中消失)</p>
<p>作用:</p>
<ul>
<li>执行清理工作(如清理定时器)</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 开启定时器</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>timerId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"定时器正在执行~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1 id<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>统计被打豆豆的次数：<span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"生命周期函数: componentWillUnmount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 清理定时器</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="不常用的钩子函数"><a href="#不常用的钩子函数" class="headerlink" title="不常用的钩子函数"></a>不常用的钩子函数</h3><p>旧版的生命周期钩子函数</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070755146.jpg" loading="lazy"></p>
<p>新版完整的生命周期钩子函数</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070755101.png" loading="lazy"></p>
<h2 id="render-props-模式"><a href="#render-props-模式" class="headerlink" title="render props 模式"></a>render props 模式</h2><blockquote>
<p>组件复用，复用相似的功能，要复用<code>state</code>,操作<code>state</code>的方法,组件状态逻辑.</p>
<p>实现组件复用的方法:</p>
<ol>
<li>render props模式</li>
<li>高阶组件 (HOC)</li>
</ol>
</blockquote>
<p><code>render prpos</code> 模式思路分析:</p>
<ol>
<li>在使用组件时,添加一个值为&#x3D;&#x3D;函数的props&#x3D;&#x3D;,通过函数&#x3D;&#x3D;参数&#x3D;&#x3D;来获取组件中复用的<code>state</code>(需要组件内部来实现)</li>
<li>使用&#x3D;&#x3D;该函数的返回值&#x3D;&#x3D;作用为要渲染的UI的内容(需要组件内部要实现)</li>
</ol>
<h3 id="使用复用组件"><a href="#使用复用组件" class="headerlink" title="使用复用组件"></a>使用复用组件</h3><ol>
<li>创建Mouse组件，在组件中提供复用的状态逻辑代码( 1.状态⒉.操作状态的方法)</li>
<li>将要复用的状态作为props.render(state)方法的参数，暴露到组件外部</li>
<li>使用props.render()的返回值作为要渲染的内容</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleMouseMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>
      <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Render Props 模式<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>Mouse
          render<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">mouse</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>p<span class="token operator">></span>
              鼠标的位置<span class="token punctuation">&#123;</span>mouse<span class="token punctuation">.</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>mouse<span class="token punctuation">.</span>y<span class="token punctuation">&#125;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Render Props 模式<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>Mouse
          render<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">mouse</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>p<span class="token operator">></span>
              鼠标的位置<span class="token punctuation">&#123;</span>mouse<span class="token punctuation">.</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>mouse<span class="token punctuation">.</span>y<span class="token punctuation">&#125;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Mouse
          render<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">mouse</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>
              <span class="token operator">&lt;</span>img
                src<span class="token operator">=</span><span class="token punctuation">&#123;</span>img<span class="token punctuation">&#125;</span>
                alt<span class="token operator">=</span><span class="token string">"img"</span>
                style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
                  <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>
                  <span class="token comment">// 减去图片的一半让鼠标在图片的中间</span>
                  <span class="token literal-property property">top</span><span class="token operator">:</span> mouse<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">130</span><span class="token punctuation">,</span>
                  <span class="token literal-property property">left</span><span class="token operator">:</span> mouse<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">130</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
              <span class="token operator">/</span><span class="token operator">></span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
        <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="使用children代替render属性"><a href="#使用children代替render属性" class="headerlink" title="使用children代替render属性"></a>使用children代替render属性</h3><p>思路其实是一样的</p>
<p>&#x3D;&#x3D;推荐&#x3D;&#x3D;</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">handleMouseMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>
      <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Render Props 模式<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>Mouse<span class="token operator">></span>
          <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>p<span class="token operator">></span>
              鼠标的位置<span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>y<span class="token punctuation">&#125;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Mouse<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="优化操作"><a href="#优化操作" class="headerlink" title="优化操作"></a>优化操作</h3><ol>
<li><p>给 render props 模式添加 props 效验</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span>
Mouse<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>应该在组件卸载时解除 <code>mousemove</code> 事件绑定</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ol>
<h2 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h2><p>高阶组件也是实现状态逻辑复用,采用包装模式</p>
<p>高阶组件（HOC，Higher-Order Component）是一个&#x3D;&#x3D;函数&#x3D;&#x3D;，接收要包装的组件，返回增强后的组件<br>高阶组件内部创建一个类组件，在这个类组件中提供复用的状态逻辑代码，通过<code>peops</code>将复用的状态传递给被包装组件。</p>
<h3 id="使用高阶组件"><a href="#使用高阶组件" class="headerlink" title="使用高阶组件"></a>使用高阶组件</h3><ol>
<li>创建一个函数</li>
<li>指定函数参数，参数应该以大写字母开头(作为要渲染的组件)</li>
<li>在函数内部创建一个类组件，提供复用的状态逻辑代码，并返回</li>
<li>在该组件中，渲染参数组件，同时将状态通过 prop 传递给参数组件</li>
<li>调用该高阶组件，传入要增强的组件，通过返回值拿到增强后的组件，并将其渲染到页面中</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建高阶组件</span>
<span class="token keyword">function</span> <span class="token function">withMouse</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 该组件提供复用的状态逻辑</span>
  <span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 鼠标状态</span>
    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function-variable function">handleMouseMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>
        <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">// 控制鼠标状态的逻辑</span>
    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> Mouse<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 要增强的组件</span>
<span class="token keyword">const</span> <span class="token function-variable function">Position</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span>
      <span class="token function">鼠标当前位置：</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>y<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 增强后的组件</span>
<span class="token keyword">const</span> MousePosition <span class="token operator">=</span> <span class="token function">withMouse</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>高阶组件<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>MousePosition <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="复用组件"><a href="#复用组件" class="headerlink" title="复用组件"></a>复用组件</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">Img</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>img
    src<span class="token operator">=</span><span class="token punctuation">&#123;</span>img<span class="token punctuation">&#125;</span>
    alt<span class="token operator">=</span><span class="token string">" "</span>
    style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">top</span><span class="token operator">:</span> props<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span>
      <span class="token literal-property property">left</span><span class="token operator">:</span> props<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
  <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 增强后的组件</span>
<span class="token keyword">const</span> MouseImg <span class="token operator">=</span> <span class="token function">withMouse</span><span class="token punctuation">(</span>Img<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>高阶组件<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>MousePosition <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>MouseImg <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="设置-displayName"><a href="#设置-displayName" class="headerlink" title="设置 displayName"></a>设置 displayName</h3><p>使用高阶组件复用多个组件时，会使多个组件名称相同，如：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070755240.png" loading="lazy"></p>
<p>因为默认情况下，React 会使用组件名称作为<code>displayName</code>,因此我们需要为高阶组件设置<code>dispalyName</code> 便于区分不同的组件</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">withMouse</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 设置displayName</span>
  Mouse<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Mouse<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 设置displayName</span>
<span class="token keyword">function</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> WrappedComponent<span class="token punctuation">.</span>displayName <span class="token operator">||</span> WrappedComponent<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">"Component"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070755678.png" loading="lazy"></p>
<h3 id="传递props"><a href="#传递props" class="headerlink" title="传递props"></a>传递props</h3><p>在高阶组件中存在<code>props</code>丢失的问题, 在调用<code>MousePosition</code>组件时传入<code>props.a</code>, 在<code>Position</code>中是无法获取到<code>props.a</code>的</p>
<p>因为高阶组件没有往下传递<code>props</code>,只传递了<code>state</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">Position</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span>
      <span class="token function">鼠标当前位置：</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>y<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 增强后的组件</span>
<span class="token keyword">const</span> MousePosition <span class="token operator">=</span> <span class="token function">withMouse</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>高阶组件<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>MousePosition a<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>解决: 渲染<code>*WrappedComponent*</code>时,将<code>state</code>和<code>this.props</code>一起传递给组件</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建高阶组件</span>
<span class="token keyword">function</span> <span class="token function">withMouse</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 该组件提供复用的状态逻辑</span>
  <span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 鼠标状态</span>
    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function-variable function">handleMouseMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>
        <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">// 控制鼠标状态的逻辑</span>
    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 设置displayName</span>
  Mouse<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Mouse<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React脚手架实践</title>
    <url>/2021/05/12/%E5%89%8D%E7%AB%AF/react/React%E8%84%9A%E6%89%8B%E6%9E%B6%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>用脚手架创建<br>推荐使用npx</p>
<pre class="language-none"><code class="language-none">npx create-react-app demo</code></pre>


<h1 id="hello-word"><a href="#hello-word" class="headerlink" title="hello word"></a>hello word</h1><ol>
<li>删除在src目录下所有文件</li>
<li>src目录下新建index.js文件作为入口文件<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 核心模块</span>

<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>h1<span class="token operator">></span>hello word<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070950232.png" loading="lazy"></li>
</ol>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>封装继承 - 构造函数</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> val
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一只'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'kk'</span><span class="token punctuation">)</span>
dog<span class="token punctuation">.</span><span class="token function">sayInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>在子类型构造函数的内部调用超类型构造函数，通过使用<code>apply()</code>和<code>call()</code>方法可以在新创建的对象上执行构造函数</p>
<p>封装继承 - 类</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> val
  <span class="token punctuation">&#125;</span>
  <span class="token function">sayInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一只'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'mm'</span><span class="token punctuation">)</span>
cat<span class="token punctuation">.</span><span class="token function">sayInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><p>定义组件分为3步：<br>1、导入React核心模块<br>2、定义组件类<br>3、导出组件</p>
<p>组件</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello world<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Hello</code></pre>

<p>在<code>index.js</code>中使用组件</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 核心模块</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span>

<span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'./App'</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Hello <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<blockquote>
<ol>
<li>定义组件的时候，return 后面只能有一个根标签，不能有多个，但这个标签内部可以有其他多个标签</li>
<li>使用组件的时候，首字母必须大写 </li>
<li>如果最外层实在不想放置一层div根目录，可以使用 <code>&lt;&gt;&lt;/&gt;</code> 空标签代替</li>
</ol>
</blockquote>
<h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><h2 id="JSX的特点"><a href="#JSX的特点" class="headerlink" title="JSX的特点"></a>JSX的特点</h2><ul>
<li>JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。</li>
<li>它是类型安全的，在编译过程中就能发现错误。</li>
<li>使用 JSX 编写模板更加简单快速。</li>
</ul>
<h2 id="JSX几个注意的格式"><a href="#JSX几个注意的格式" class="headerlink" title="JSX几个注意的格式"></a>JSX几个注意的格式</h2><p>1、React的JSX是使用大写和小写字母来区分本地组件和HTML组件</p>
<blockquote>
<p>如：html就用 div p h1 ， 组件就用 MyButton App Home List等 </p>
</blockquote>
<p>2、JSX和html的标签属性的区别:</p>
<p>示例:</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">var</span> myImg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./assets/01.png'</span><span class="token punctuation">)</span>\

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App2</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">"ipt"</span><span class="token operator">></span>label<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>
        <span class="token operator">&lt;</span>input
          type<span class="token operator">=</span><span class="token string">"text"</span>
          id<span class="token operator">=</span><span class="token string">"ipt"</span>
          className<span class="token operator">=</span><span class="token string">"ipt"</span>
          style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">'pink'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'gray'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
        <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">&#123;</span>myImg<span class="token punctuation">&#125;</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>注意：图片查找路径在src目录，所以引入的时候从src目录触发查找文件</p>
</blockquote>
<h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><p>React的JSX创建出来的是虚拟DOM，而不是HTML<br><code>index.js</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 核心模块</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span>

<span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'./App'</span>

<span class="token keyword">import</span> App2 <span class="token keyword">from</span> <span class="token string">'./App2'</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Hello <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> virtualDom <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> realDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> virtualNum <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">let</span> realNum <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> virtualDom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  virtualNum<span class="token operator">++</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> realDom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  realNum<span class="token operator">++</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'虚拟DOM的属性个数：'</span> <span class="token operator">+</span> virtualNum<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'真实DOM的属性个数：'</span> <span class="token operator">+</span> realNum<span class="token punctuation">)</span></code></pre>

<h2 id="变量引用、三目运算符、for循环"><a href="#变量引用、三目运算符、for循环" class="headerlink" title="变量引用、三目运算符、for循环"></a>变量引用、三目运算符、for循环</h2><p>在JSX中，想要调用变量，需要在return中直接使用单花括号 – <code>&#123;&#125;</code> 调用</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>gender <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App3</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* JSX中引用变量需要加单花括号 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 三目运算符的使用 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span>gender <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'男'</span> <span class="token operator">:</span> gender <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'女'</span> <span class="token operator">:</span> <span class="token string">'保密'</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* for循环的使用 - 方式1 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>ul<span class="token operator">></span>
          <span class="token punctuation">&#123;</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>v<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* for循环的使用 - 方式2 */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>ul<span class="token operator">></span>
          <span class="token punctuation">&#123;</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">&#123;</span>k<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>v<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>总结：在jsx语法中，需要书写js代码的时候，请先加上{ } 再书写js语法</p>
</blockquote>
<h1 id="state"><a href="#state" class="headerlink" title="state"></a>state</h1><h2 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App5</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>btn<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h2><p>setState是异步的</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App8</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'你好 世界'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>change msg<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'hello world'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">// 同步则输出“hello world”，异步则输出“你好世界”</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
    <span class="token comment">// 验证结果：this.setState是异步的</span>
    <span class="token comment">// 回调函数</span>
    <span class="token comment">// this.setState(</span>
    <span class="token comment">//   &#123;</span>
    <span class="token comment">//     msg: 'hello world',</span>
    <span class="token comment">//   &#125;,</span>
    <span class="token comment">//   () => &#123;</span>
    <span class="token comment">//     console.log(this.state.msg)</span>
    <span class="token comment">//   &#125;</span>
    <span class="token comment">// )</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><p>使用 <code>setState</code> 操作 <code>state</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App6</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>num<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 通过bind来改变this的指向 */</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* &lt;button onClick=&#123;this.handleClick.bind(this)&#125;>add&lt;/button> */</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* 箭头函数默认没有this，所以this指向数组对象 */</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#123;</span><span class="token comment">/* &lt;button onClick=&#123;()=>this.handleClick()&#125;>add&lt;/button> */</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span>add<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><p>React中没有类似vue的 <code>v-model</code> 指令，因此要实现双向数据绑定，只能操作 <code>value</code> 和 <code>onChange(或onInput)事件</code>。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App7</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'nike'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 简写 state</span>
  <span class="token comment">// state = &#123;</span>
  <span class="token comment">//   name: 'nike',</span>
  <span class="token comment">// &#125;</span>
  <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
        <span class="token operator">&lt;</span>input
          type<span class="token operator">=</span><span class="token string">"text"</span>
          value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>
          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleChange</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>currentTarget与target有什么区别？</p>
<ul>
<li>当只有一层元素的时候，两者没区别</li>
<li>当存在两层元素嵌套时，就会有冒泡现象，那么真正指向被你事件触发的元素，是currentTarget</li>
</ul>
<h2 id="state中数组的修改"><a href="#state中数组的修改" class="headerlink" title="state中数组的修改"></a>state中数组的修改</h2><p>我们对数组进行操作时，大部分数组方法会修改到原数组，因此建议先将数组深拷贝一次，修改后再重新赋值：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App9</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'张飞'</span><span class="token punctuation">,</span> <span class="token string">'关羽'</span><span class="token punctuation">,</span> <span class="token string">'刘备'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>ul<span class="token operator">></span>
          <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addFn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>add<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">addFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 如果我声明一个变量，等于this.state.arr，并且让这个变量和this.state.arr完全脱离关系[深拷贝]</span>
    <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">arr</span><span class="token operator">:</span> newArr<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2框架问题汇总</title>
    <url>/2021/05/11/%E5%89%8D%E7%AB%AF/vue/Vue2%E6%A1%86%E6%9E%B6%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>vue 生命周期、v-if 和 v-show 的区别、computed 和 watch 的区别、v-for 中 key 的作用、组件传值</p>
<span id="more"></span>

<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>总共分为 8 个阶段,创建前\后,更新前\后,销毁前\后</p>
<blockquote>
<p>创建前\后,beforeCreate&#x2F;Created<br>在 beforeCreate 阶段,vue 实例的挂载元素 el 和数据对象 data 都为 undefined,还未进行初始化<br>在 Created 阶段,vue 实例数据对象 data 有了,el 为 undefiled,还为初始化</p>
</blockquote>
<blockquote>
<p>载入前&#x2F;后：beforeMount,mounted<br>在 beforeMount 阶段，vue 实例的$el 和 data 都初始化了，但还是挂载之前为虚拟的 dom 节点，data.message 还未替换。<br>在 mounted 阶段，vue 实例挂载完成，data.message 成功渲染。</p>
</blockquote>
<blockquote>
<p>更新前&#x2F;后：beforeUpdate.undated<br>当 data 变化时，会触发 beforeUpdate 和 updated 方法</p>
</blockquote>
<blockquote>
<p>销毁前&#x2F;后：beforeDestroy,Destroyed<br>在执行 destroy 方法后，对 data 的改变不会再触发周期函数，说明此时 vue 实例已经解除了事件监听以及和 dom 的绑定，但是 dom 结构依然存在</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070802609.png" loading="lazy"></p>
<h1 id="v-if-和-v-show-的区别"><a href="#v-if-和-v-show-的区别" class="headerlink" title="v-if 和 v-show 的区别"></a>v-if 和 v-show 的区别</h1><ul>
<li>v-if 对于元素的显示和隐藏通过操作 dom 节点的创建和销毁来实现</li>
<li>v-show 无论元素显示或是隐藏 dom 节点都会被创建,但是显示和隐藏通过 css 的属性 display 进行切换.</li>
</ul>
<p>v-if 的消耗会大于 v-show</p>
<h1 id="computed-和-watch-的区别"><a href="#computed-和-watch-的区别" class="headerlink" title="computed 和 watch 的区别"></a>computed 和 watch 的区别</h1><p><strong>计算属性 computed</strong></p>
<ul>
<li>支持缓存,只有依赖数据发生改变时才会重新计算</li>
<li>不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化</li>
<li>computed 属性会默认走缓存,计算属性是基于他们的响应式依赖进行缓存的</li>
<li>如果计算属性的值是函数会执行 get 方法,属性值就是函数的返回值；在 computed 中属性都有 set 和 get 方法,当数据发生改变时执行 set 方法.</li>
</ul>
<p><strong>监听属性 watch</strong></p>
<ul>
<li><p>不支持缓存,当数据发生变化时,会直接执行相应的操作</p>
</li>
<li><p>支持异步</p>
</li>
<li><p>监听的函数接收两个参数,一个是新值,一个是之前的值</p>
</li>
<li><p>监听数据必须是 data 中声明的值,或者是父组件 props 传过来的数据</p>
</li>
<li><p>当数据发生变化时,会触发其他操作</p>
<blockquote>
<p>immediate：组件加载立即触发回调函数执行</p>
</blockquote>
<blockquote>
<p>deep: deep 的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改 obj 里面任何一个属性都会触发这个监听器里的 handler</p>
</blockquote>
</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newName<span class="token punctuation">,</span> oldName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> newName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>优化:</p>
<blockquote>
<p>可以使用字符串的形式监听,这样 Vue.js 会一层一层解析下去，直到遇到属性 a，然后才给 a 设置监听函数。</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token string-property property">'obj.a'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newName<span class="token punctuation">,</span> oldName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> newName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h1 id="v-for-中-key-的作用"><a href="#v-for-中-key-的作用" class="headerlink" title="v-for 中 key 的作用"></a>v-for 中 key 的作用</h1><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。key 属性的类型只能为 string 或者 number 类型。<br>key 的特殊属性主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。</p>
<h1 id="双向数据绑定的原理"><a href="#双向数据绑定的原理" class="headerlink" title="双向数据绑定的原理"></a>双向数据绑定的原理</h1><p>vue.js 是采用数据劫持结合发布者-订阅者模式的方式,通过 Object.defineProperty()来劫持各个属性的 setter,getter,在数据变动时发布消息给订阅者,触发相应的监听回调.</p>
<blockquote>
<p>1.需要对 observe 的数据对象进行递归遍历,包括子属性对象的属性都加上 setter 和 getter,那么给这个对象的某个值赋值,就会触发 setter,那么就可以监听到数据变化</p>
</blockquote>
<blockquote>
<p>2.compile 解析模板指令,将模板中的变量替换成数据,然后初始化渲染页面视图,并将每个指令对应的节点绑定更新函数,添加监听数据的订阅者,一旦数据有变动,收到通知更新视图.</p>
</blockquote>
<blockquote>
<p>3.Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁，主要做的事情是:<br>① 在自身实例化时往属性订阅器(dep)里面添加自己<br>② 自身必须有一个 update()方法<br>③ 待属性变动 dep.notice()通知时，能调用自身的 update()方法，并触发 Compile 中绑定的回调，则功成身退。</p>
</blockquote>
<blockquote>
<p>MVVM 作为数据绑定的入口，整合 Observer、Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据 model 变更的双向绑定效果。</p>
</blockquote>
<h1 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h1><h2 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h2><p>通过 props 传递</p>
<pre class="language-none"><code class="language-none">父组件： &lt;child value &#x3D; &#39;传递的数据&#39; &#x2F;&gt;

子组件: props[&#39;value&#39;],接收数据,接受之后使用和data中定义数据使用方式一样</code></pre>

<h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h2><p>在父组件中绑定一个自定义事件,子组件通过$emit()触发该事件并传值</p>
<pre class="language-none"><code class="language-none">父组件： &lt;child @receive &#x3D; &#39;receive&#39; &#x2F;&gt;

子组件: this.$emit(&#39;receive&#39;,&#39;传递的数据&#39;)</code></pre>

<h2 id="兄弟组件"><a href="#兄弟组件" class="headerlink" title="兄弟组件"></a>兄弟组件</h2><ol>
<li><p>中央通信</p>
<blockquote>
<p>A. methods :{ 函数{bus.$emit(‘自定义事件名’，数据)} 发送</p>
</blockquote>
<blockquote>
<p>B. created （）{bus.$on(‘A 发送过来的自定义事件名’，函数)} 进行数据接收</p>
</blockquote>
</li>
<li><p>通过 vuex</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex核心概念总结</title>
    <url>/2020/11/13/%E5%89%8D%E7%AB%AF/vue/Vuex%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Vuex核心概念总结"><a href="#Vuex核心概念总结" class="headerlink" title="Vuex核心概念总结"></a>Vuex核心概念总结</h1><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// store.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">addAsync</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">showNum</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">"当前【"</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>个人理解：如果将 Store 比作一件仓库，state 就是货物仓，将所有需要存储在 vuex 中的数据存在此处。</p>
<p>在组件中，使用数据（搬运货物）方式：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//	第一种方式:直接调用</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>全局数据名称
<span class="token comment">//	第二种方式:计算属性(mapState)</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>mapState<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>
  computed：<span class="token punctuation">&#123;</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'全局属性'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span></code></pre>

<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在某个组件中，使用上例(store.js)</span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
	<span class="token operator">&lt;</span>div<span class="token operator">></span>
  	<span class="token comment">//	（此处可以省略 this ）</span>
  	<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//某组件中</span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
  	<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token comment">// 1、导入 mapState 函数</span>
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span>mapState<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>
  <span class="token comment">// 2、通过导入的 mapState 函数，将当前组件的需要的全局数据，映射为当前组建的computed计算属性</span>
  computed：<span class="token punctuation">&#123;</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<blockquote>
<p><code>“...”</code> 对象展开运算符</p>
</blockquote>
<h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>个人理解：Getter 用于对 Store 中的数据进行加工处理形成的新数据，如仓库对货物进行包装</p>
<p>使用：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一种方式：直接调用</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>名称
<span class="token comment">// 第二种方式：计算属性</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapGetters <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"自定义getter"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token comment">// 使用：&lt;h3>Getter:&#123;&#123; showNum &#125;&#125;&lt;/h3></span></code></pre>

<h3 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h3><p>个人理解：Mutation 用于变更 Store 中的数据，如仓库搬运工，只有他们才有权搬运货运</p>
<p>在 Store.js 中定义 mutations</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 组件中触发Mutation</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"add"</span>，可选参数<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre>

<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>个人理解：可以使用异步操作的 mutation 搬运工</p>
<p>在 Store.js 中定义 action，触发 action</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一种：直接调用</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'自定义action'</span><span class="token punctuation">)</span>
<span class="token comment">// 第二种：mapAction</span>
<span class="token comment">// 在组件中，按需导入 mapAction 函数</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapActions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>
<span class="token comment">// 将指定函数的 actions 函数映射为当前组件的 methods 函数</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"自定义action"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">自定义action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre>

<h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>个人理解：模块化管理 vuex 数据、操作，大仓库中分小仓库。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 模块内部的数据,参数说明</span>
<span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  	<span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// moduleA模块内部的state</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//moduleA模块内部的state,commit,全局模块的state</span>
    <span class="token function">addAsync</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>state，commit，rootState<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// moduleA模块内部的state</span>
    showNum（state<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> rootState）<span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token string">'当前【'</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token string">'】'</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>模块具体使用后续再详解。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3+ts+pinia+element_plus</title>
    <url>/2022/05/01/%E5%89%8D%E7%AB%AF/vue/vue3+ts+pinia+element_plus/</url>
    <content><![CDATA[<p>vue3+ts+pinia+element_plus</p>
<span id="more"></span>

<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070804686.png" loading="lazy"></p>
<h1 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h1><blockquote>
<p>目录结构</p>
<ul>
<li>public</li>
<li>src<ul>
<li>api</li>
<li>assets</li>
<li>components</li>
<li>config</li>
<li>router</li>
<li>store</li>
<li>styles</li>
<li>views</li>
<li>App.vue</li>
<li>env.d.ts</li>
<li>main.ts</li>
</ul>
</li>
<li>.env</li>
<li>.env.development</li>
<li>.env.production</li>
<li>index.html</li>
<li>package.json</li>
<li>tsconfig.json</li>
<li>tsconfig.node.json</li>
<li>vite.config.ts</li>
</ul>
</blockquote>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>生产</p>
<pre class="language-none"><code class="language-none">npm i -S vue-router@next nprogress axios pinia pinia-plugin-persistedstate qs</code></pre>

<p>开发</p>
<pre class="language-none"><code class="language-none">npm i -D eslint eslint-config-prettier eslint-plugin-prettier eslint-plugin-vue @typescript-eslint&#x2F;eslint-plugin @typescript-eslint&#x2F;parser prettier</code></pre>



<h2 id="定义别名"><a href="#定义别名" class="headerlink" title="定义别名"></a>定义别名</h2><p><code>vite.config.ts</code></p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span>

<span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dir<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> dir<span class="token punctuation">)</span>
<span class="token comment">// https://vitejs.dev/config/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token string-property property">'@'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p><code>tsconfig.json</code></p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 解析非相对模块名的基准目录</span>
  <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>
  <span class="token comment">// 模块名到基于 baseUrl的路径映射的列表。</span>
  <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"@"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"./src"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"@/*"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"./src/*"</span><span class="token punctuation">]</span> 
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h1 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h1><p>插件</p>
<pre class="language-none"><code class="language-none">&quot;vite-plugin-compression&quot;: &quot;^0.5.1&quot;,
&quot;vite-plugin-html&quot;: &quot;^3.2.0&quot;,</code></pre>

<ul>
<li><p>vite-plugin-compression</p>
<p>开启gzip压缩</p>
</li>
<li><p>vite-plugin-html</p>
<ul>
<li>HTML 压缩能力</li>
<li>EJS 模版能力</li>
</ul>
</li>
</ul>
<h1 id="config"><a href="#config" class="headerlink" title="config"></a>config</h1><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><ul>
<li><p>.env</p>
<pre class="language-none"><code class="language-none"># title
VITE_GLOB_APP_TITLE &#x3D; &#39;club&#39;

# port
VITE_PORT &#x3D; 3000

# open 运行 npm run dev 时自动打开浏览器
VITE_OPEN &#x3D; true

# 是否生成包预览文件
VITE_REPORT &#x3D; false

# 是否开启gzip压缩
VITE_BUILD_GZIP &#x3D; false

# 是否删除生产环境 console
VITE_DROP_CONSOLE &#x3D; true</code></pre>


</li>
<li><p>.env.development</p>
<pre class="language-none"><code class="language-none"># 本地环境
NODE_ENV &#x3D; &#39;development&#39;

# 本地环境接口地址
VITE_API_URL &#x3D; &#39;http:&#x2F;&#x2F;localhost:8081&#39;</code></pre>


</li>
<li><p>.env.production</p>
<pre class="language-none"><code class="language-none"># 线上环境
NODE_ENV &#x3D; &quot;production&quot;

# 线上环境接口地址
VITE_API_URL &#x3D; &quot;&quot;</code></pre></li>
</ul>
<h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p>代码格式化工具,根目录下创建一个名为 <code>.prettierrc.js</code> 的文件</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @see: https://www.prettier.cn</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 超过最大值换行</span>
  <span class="token literal-property property">printWidth</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>
  <span class="token comment">// 缩进字节数</span>
  <span class="token literal-property property">tabWidth</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token comment">// 使用制表符而不是空格缩进行</span>
  <span class="token literal-property property">useTabs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 结尾不用分号(true有，false没有)</span>
  <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 使用单引号(true单双引号，false双引号)</span>
  <span class="token literal-property property">singleQuote</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 更改引用对象属性的时间 可选值"&lt;as-needed|consistent|preserve>"</span>
  <span class="token literal-property property">quoteProps</span><span class="token operator">:</span> <span class="token string">'as-needed'</span><span class="token punctuation">,</span>
  <span class="token comment">// 在对象，数组括号与文字之间加空格 "&#123; foo: bar &#125;"</span>
  <span class="token literal-property property">bracketSpacing</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 多行时尽可能打印尾随逗号。（例如，单行数组永远不会出现逗号结尾。） 可选值"&lt;none|es5|all>"，默认none</span>
  <span class="token literal-property property">trailingComma</span><span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>
  <span class="token comment">// 在JSX中使用单引号而不是双引号</span>
  <span class="token literal-property property">jsxSingleQuote</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">//  (x) => &#123;&#125; 箭头函数参数只有一个时是否要有小括号。avoid：省略括号 ,always：不省略括号</span>
  <span class="token literal-property property">arrowParens</span><span class="token operator">:</span> <span class="token string">'avoid'</span><span class="token punctuation">,</span>
  <span class="token comment">// 如果文件顶部已经有一个 doclock，这个选项将新建一行注释，并打上@format标记。</span>
  <span class="token literal-property property">insertPragma</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 指定要使用的解析器，不需要写文件开头的 @prettier</span>
  <span class="token literal-property property">requirePragma</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行</span>
  <span class="token literal-property property">proseWrap</span><span class="token operator">:</span> <span class="token string">'preserve'</span><span class="token punctuation">,</span>
  <span class="token comment">// 在html中空格是否是敏感的 "css" - 遵守CSS显示属性的默认值， "strict" - 空格被认为是敏感的 ，"ignore" - 空格被认为是不敏感的</span>
  <span class="token literal-property property">htmlWhitespaceSensitivity</span><span class="token operator">:</span> <span class="token string">'css'</span><span class="token punctuation">,</span>
  <span class="token comment">// 换行符使用 lf 结尾是 可选值"&lt;auto|lf|crlf|cr>"</span>
  <span class="token literal-property property">endOfLine</span><span class="token operator">:</span> <span class="token string">'auto'</span><span class="token punctuation">,</span>
  <span class="token comment">// 这两个选项可用于格式化以给定字符偏移量（分别包括和不包括）开始和结束的代码</span>
  <span class="token literal-property property">rangeStart</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rangeEnd</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
  <span class="token comment">// Vue文件脚本和样式标签缩进</span>
  <span class="token literal-property property">vueIndentScriptAndStyle</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>



<h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p>查找 JavaScript &#x2F; TypeScript 代码问题并提供修复建议的工具,项目根目录下创建一个名为 <code>.eslintrc.js</code> 文件,更多的选项可以在 ESLint 官网的 <a href="https://eslint.org/docs/user-guide/configuring/">Configuring ESLint</a> 查阅。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'plugin:vue/vue3-essential'</span><span class="token punctuation">,</span> <span class="token string">'eslint:recommended'</span><span class="token punctuation">,</span> <span class="token string">'prettier'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">'vue-eslint-parser'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">'@typescript-eslint/parser'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">2020</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">'module'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@typescript-eslint'</span><span class="token punctuation">,</span> <span class="token string">'prettier'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">'no-console'</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'warn'</span> <span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>
    <span class="token string-property property">'no-debugger'</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'warn'</span> <span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>
    <span class="token string-property property">'prettier/prettier'</span><span class="token operator">:</span> <span class="token string">'warn'</span><span class="token punctuation">,</span>
    <span class="token string-property property">'vue/multi-word-component-names'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">globals</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">defineProps</span><span class="token operator">:</span> <span class="token string">'readonly'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defineEmits</span><span class="token operator">:</span> <span class="token string">'readonly'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defineExpose</span><span class="token operator">:</span> <span class="token string">'readonly'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">withDefaults</span><span class="token operator">:</span> <span class="token string">'readonly'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>配合 TypeScript 使用</p>
</blockquote>
<p>安装对应依赖</p>
<ul>
<li><a href="https://www.npmjs.com/package/eslint">eslint</a></li>
<li><a href="https://www.npmjs.com/package/eslint-config-prettier">eslint-config-prettier</a></li>
<li><a href="https://www.npmjs.com/package/eslint-plugin-prettier">eslint-plugin-prettier</a></li>
<li><a href="https://www.npmjs.com/package/eslint-plugin-vue">eslint-plugin-vue</a></li>
<li><a href="https://www.npmjs.com/package/@typescript-eslint/eslint-plugin">@typescript-eslint&#x2F;eslint-plugin</a></li>
<li><a href="https://www.npmjs.com/package/@typescript-eslint/parser">@typescript-eslint&#x2F;parser</a></li>
<li><a href="https://www.npmjs.com/package/prettier">prettier</a></li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">-D</span> eslint eslint-config-prettier eslint-plugin-prettier eslint-plugin-vue @typescript-eslint/eslint-plugin @typescript-eslint/parser prettier</code></pre>

<p>如果有一些文件需要排除检查，可以再创建一个 <code>.eslintignore</code> 文件在项目根目录下，里面添加要排除的文件或者文件夹名称：</p>
<pre class="language-none"><code class="language-none">dist&#x2F;*</code></pre>

<p>更多的排除规则可以在 ESLint 官网的 <a href="https://eslint.org/docs/user-guide/configuring/ignoring-code#the-eslintignore-file">The .eslintignore File</a> 一文查阅。</p>
<h1 id="element-plus"><a href="#element-plus" class="headerlink" title="element-plus"></a>element-plus</h1><pre class="language-none"><code class="language-none">npm i element-plus --save</code></pre>

<p><code>main.ts</code></p>
<pre class="language-none"><code class="language-none">import ElementPlus from &#39;element-plus&#39;
import &#39;element-plus&#x2F;dist&#x2F;index.css&#39;
const app &#x3D; createApp(App)

app.use(ElementPlus)</code></pre>

<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><pre class="language-none"><code class="language-none">npm i vue-router@next -S</code></pre>

<p>目录结构</p>
<pre class="language-none"><code class="language-none">src
│ # 路由目录
├─router
│   # 路由入口文件
├───index.ts
│   # 路由配置
├───routes.ts
│ # 项目入口文件
├───modules
│ # 路由模块
└─main.ts</code></pre>

<p><code>routers/index.ts</code></p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHashHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  history<span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'views/home.vue'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre>

<p>引入，<code>main.js</code></p>
<pre class="language-none"><code class="language-none">import router from &quot;@&#x2F;router&quot;;
createApp(App).use(router).mount(&quot;#app&quot;);</code></pre>

<h2 id="路由模块化"><a href="#路由模块化" class="headerlink" title="路由模块化"></a>路由模块化</h2><p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070804391.png" loading="lazy"></p>
<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>axios、进度条、序列化</p>
<pre class="language-none"><code class="language-none">npm i axios nprogress qs</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070804623.png" loading="lazy"></p>
<p><code>index.ts</code></p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> axios<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  AxiosInstance<span class="token punctuation">,</span>
  AxiosError<span class="token punctuation">,</span>
  AxiosRequestConfig<span class="token punctuation">,</span>
  AxiosResponse<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'axios'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ElMessage <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>
  showFullScreenLoading<span class="token punctuation">,</span>
  tryHideFullScreenLoading<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@/config/serviceLoading'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> AxiosCanceler <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./utils/axiosCancel'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> checkStatus <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./utils/checkStatus'</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ResultData <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./interface'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ResultEnum <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./enums/httpEnum'</span>

<span class="token keyword">const</span> axiosCanceler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AxiosCanceler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 默认地址</span>
  baseURL<span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_API_URL</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token comment">// 设置超时时间（10s）</span>
  timeout<span class="token operator">:</span> ResultEnum<span class="token punctuation">.</span><span class="token constant">TIMEOUT</span> <span class="token keyword">as</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  <span class="token comment">// 跨域时候允许携带凭证</span>
  <span class="token comment">// withCredentials: true,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">RequestHttp</span> <span class="token punctuation">&#123;</span>
  service<span class="token operator">:</span> AxiosInstance
  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 实例化axios</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>

    <span class="token comment">/**
     * @description 请求拦截器
     * 客户端发送请求 -> [请求拦截器] -> 服务器
     * token校验(JWT) : 接受服务器返回的token,存储到vuex/本地储存当中
     */</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// * 将当前请求添加到 pending 中</span>
        axiosCanceler<span class="token punctuation">.</span><span class="token function">addPending</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
        <span class="token function">showFullScreenLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// const token: string = globalStore.token</span>
        <span class="token keyword">const</span> token<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>config<span class="token punctuation">,</span> headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span> Authorization<span class="token operator">:</span> token <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>error<span class="token operator">:</span> AxiosError<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">)</span>

    <span class="token comment">/**
     * @description 响应拦截器
     *  服务器换返回信息 -> [拦截统一处理] -> 客户端JS获取到信息
     */</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span>response<span class="token operator">:</span> AxiosResponse<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> config <span class="token punctuation">&#125;</span> <span class="token operator">=</span> response
        <span class="token comment">// * 在请求结束后，移除本次请求</span>
        axiosCanceler<span class="token punctuation">.</span><span class="token function">removePending</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
        <span class="token function">tryHideFullScreenLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment">// globalStore.setToken('')</span>
        <span class="token comment">// router.replace(&#123;</span>
        <span class="token comment">//   path: '/login',</span>
        <span class="token comment">// &#125;)</span>

        <span class="token comment">// 请求失败</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>code <span class="token operator">!==</span> ResultEnum<span class="token punctuation">.</span><span class="token constant">CODE_SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
          <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
          <span class="token function">ElMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            type<span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>
            message<span class="token operator">:</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// * 成功请求</span>
        <span class="token keyword">return</span> data
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> AxiosError<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> response <span class="token punctuation">&#125;</span> <span class="token operator">=</span> error
        <span class="token function">tryHideFullScreenLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 根据响应的错误状态码，做不同的处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">checkStatus</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
        <span class="token comment">// 服务器结果都没有返回(可能服务器错误可能客户端断网)，断网处理:可以跳转到断网页面</span>
        <span class="token comment">// if (!window.navigator.onLine) return router.replace(&#123; path: '/500' &#125;)</span>
        <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// * 常用请求方法封装</span>
  <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token operator">:</span> object<span class="token punctuation">,</span> _object <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ResultData<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> params<span class="token punctuation">,</span> <span class="token operator">...</span>_object <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token generic-function"><span class="token function">post</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token operator">:</span> object<span class="token punctuation">,</span> _object <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ResultData<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> _object<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token generic-function"><span class="token function">put</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token operator">:</span> object<span class="token punctuation">,</span> _object <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ResultData<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> _object<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">delete</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> _object <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ResultData<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> params<span class="token punctuation">,</span> <span class="token operator">...</span>_object <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">RequestHttp</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></code></pre>

<p>实际参照<code>template\vue3+ts+pinia+element_plus</code></p>
<h1 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h1><p>pinai、pinai持久化</p>
<pre class="language-none"><code class="language-none">npm i pinia pinia-plugin-persist</code></pre>

<p><code>config\piniaPersist.ts</code></p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PersistOptions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'pinia-plugin-persist'</span>

<span class="token comment">// pinia持久化参数配置</span>
<span class="token keyword">const</span> <span class="token function-variable function">piniaPersistConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> persist<span class="token operator">:</span> PersistOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    enabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    strategies<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        key<span class="token punctuation">,</span>
        storage<span class="token operator">:</span> localStorage<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> persist
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> piniaPersistConfig</code></pre>

<p><code>store\index.ts</code></p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createPinia <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span>
<span class="token keyword">import</span> piniaPersist <span class="token keyword">from</span> <span class="token string">'pinia-plugin-persist'</span>
<span class="token keyword">import</span> piniaPersistConfig <span class="token keyword">from</span> <span class="token string">'@/config/piniaPersist'</span>

<span class="token comment">// defineStore 调用后返回一个函数，调用该函数获得 Store 实体</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> GlobalStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// id: 必须的，在所有 Store 中唯一</span>
  id<span class="token operator">:</span> <span class="token string">'GlobalState'</span><span class="token punctuation">,</span>
  <span class="token comment">// state: 返回对象的函数</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// Token</span>
    token<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    <span class="token comment">// userInfo</span>
    userInfo<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// set token</span>
    <span class="token function">setToken</span><span class="token punctuation">(</span>token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>token <span class="token operator">=</span> token
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">// set userInfo</span>
    <span class="token function">setUserInfo</span><span class="token punctuation">(</span>userInfo<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>userInfo <span class="token operator">=</span> userInfo
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  persist<span class="token operator">:</span> <span class="token function">piniaPersistConfig</span><span class="token punctuation">(</span><span class="token string">'GlobalState'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// piniaPersist(持久化)</span>
<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>piniaPersist<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> pinia</code></pre>

<h1 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h1><pre class="language-none"><code class="language-none">npm i sass -D</code></pre>

<p><code>styles</code>目录保存各种样式</p>
<p><code>index.scss</code>作为出口组织这些样式，同时编写一些全局样式</p>
<p>最后在<code>main.js</code>导入</p>
<pre class="language-none"><code class="language-none">import &quot;styles&#x2F;index.scss&quot;;</code></pre>

<h2 id="主题切换"><a href="#主题切换" class="headerlink" title="主题切换"></a>主题切换</h2><p>使用scss</p>
<p>定义主题变量</p>
<p><code>src\styles\theme\theme.scss</code></p>
<pre class="language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$themes</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
  <span class="token comment">// 日间默认 如 font_color1，font_color2 一套主题设置两种颜色，项目需要集中颜色就定义这个主题下有多少颜色</span>

  <span class="token property">light</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token property">font_color1</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>196<span class="token punctuation">,</span> 193<span class="token punctuation">,</span> 193<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">font_color2</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>110<span class="token punctuation">,</span> 109<span class="token punctuation">,</span> 109<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">background_color1</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 21<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">background_color2</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>87<span class="token punctuation">,</span> 87<span class="token punctuation">,</span> 226<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">border_color1</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>231<span class="token punctuation">,</span> 181<span class="token punctuation">,</span> 181<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">border_color2</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>9<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">content_color1</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">content_color2</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 250<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// 夜间暗黑</span>
  <span class="token property">dark</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token property">font_color1</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>226<span class="token punctuation">,</span> 222<span class="token punctuation">,</span> 222<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">font_color2</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">background_color1</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>87<span class="token punctuation">,</span> 87<span class="token punctuation">,</span> 226<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">background_color2</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 21<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">border_color1</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>9<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">border_color2</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>231<span class="token punctuation">,</span> 181<span class="token punctuation">,</span> 181<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">content_color1</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 250<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token property">content_color2</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>scss处理变量函数<code>src\styles\theme\handle.scss</code></p>
<pre class="language-scss" data-language="scss"><code class="language-scss"><span class="token keyword">@import</span> <span class="token string">"./theme.scss"</span><span class="token punctuation">;</span> <span class="token comment">// 引入上面定义的themes.scss 日间和夜间主题</span>

<span class="token comment">//遍历主题map</span>

<span class="token keyword">@mixin</span> <span class="token selector">themeify </span><span class="token punctuation">&#123;</span>
  <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$theme-name</span>,
  <span class="token variable">$theme-map</span> in <span class="token variable">$themes</span> </span><span class="token punctuation">&#123;</span>
    <span class="token property"><span class="token variable">$theme-map</span></span><span class="token punctuation">:</span> <span class="token variable">$theme-map</span> !global<span class="token punctuation">;</span>
    <span class="token comment">//这步是判断html的 自定义属性 data-theme的值  #&#123;&#125;是sass的插值表达式</span>
    <span class="token comment">//&amp; sass嵌套里的父容器标识   @content是混合器插槽，像vue的插槽一样</span>
    <span class="token selector">[admin-theme="<span class="token variable">#&#123;$theme-name&#125;</span>"] <span class="token parent important">&amp;</span> </span><span class="token punctuation">&#123;</span>
      <span class="token keyword">@content</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//声明一个根据Key获取颜色的function</span>
<span class="token keyword">@function</span> <span class="token function">themed</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">@return</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$theme-map</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//获取背景颜色</span>
<span class="token keyword">@mixin</span> background_<span class="token function">color</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">@include</span> <span class="token selector">themeify </span><span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">themed</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//获取字体颜色</span>
<span class="token keyword">@mixin</span> font_<span class="token function">color</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">@include</span> <span class="token selector">themeify </span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">themed</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//获取边框颜色</span>
<span class="token keyword">@mixin</span> border_<span class="token function">color</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">@include</span> <span class="token selector">themeify </span><span class="token punctuation">&#123;</span>
    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">themed</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 获取内容容器的颜色、</span>
<span class="token keyword">@mixin</span> content_<span class="token function">color</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">@include</span> <span class="token selector">themeify </span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 内容的背景色</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">themed</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 还可以接着写代码、 比如透明度什么的</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>vite.config.ts</code></p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vite'</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span>

<span class="token comment">// https://vitejs.dev/config/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token string-property property">'@'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  css<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//css预处理</span>
    preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      scss<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        additionalData<span class="token operator">:</span> <span class="token string">'@import "@/styles/theme/handle";'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>使用</p>
<p>header组件，切换按钮</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;div&gt;
    &lt;el-header&gt;
      &lt;button @click&#x3D;&quot;toggleTheme(1)&quot;&gt;默认主题&lt;&#x2F;button&gt;
      &lt;button @click&#x3D;&quot;toggleTheme(0)&quot;&gt;暗黑主题&lt;&#x2F;button&gt;
    &lt;&#x2F;el-header&gt;
    &lt;router-view &#x2F;&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;

&lt;script lang&#x3D;&quot;ts&quot; setup&gt;

const toggleTheme &#x3D; (index: number) &#x3D;&gt; &#123;
  window.document.documentElement.setAttribute(
    &#39;admin-theme&#39;,
    index ? &#39;dark&#39; : &#39;light&#39;
  )
&#125;
&lt;&#x2F;script&gt;

&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;
@import &#39;.&#x2F;style&#x2F;main.scss&#39;;
&lt;&#x2F;style&gt;</code></pre>

<p>页面使用：</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;这里是页面&lt;&#x2F;p&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;

&lt;script lang&#x3D;&quot;ts&quot;&gt;
import &#123; defineComponent &#125; from &#39;vue&#39;

export default defineComponent(&#123;
  setup() &#123;
    return &#123;&#125;
  &#125;,
&#125;)
&lt;&#x2F;script&gt;

&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;
&#x2F;&#x2F; 举个例子 P标签 文字颜色 边框颜色 和背景颜色
p &#123;
  @include font_color(&#39;font_color1&#39;);
  @include border_color(&#39;border_color1&#39;);
  @include content_color(&#39;content_color1&#39;);
&#125;
&lt;&#x2F;style&gt;</code></pre>

<p>效果</p>
<h1 id="prettierrc"><a href="#prettierrc" class="headerlink" title="prettierrc"></a>prettierrc</h1><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @see: https://www.prettier.cn</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">// 超过最大值换行</span>

  printWidth<span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>

  <span class="token comment">// 缩进字节数</span>

  tabWidth<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>

  <span class="token comment">// 使用制表符而不是空格缩进行</span>

  useTabs<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

  <span class="token comment">// 结尾不用分号(true有，false没有)</span>

  semi<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

  <span class="token comment">// 使用单引号(true单双引号，false双引号)</span>

  singleQuote<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

  <span class="token comment">// 更改引用对象属性的时间 可选值"&lt;as-needed|consistent|preserve>"</span>

  quoteProps<span class="token operator">:</span> <span class="token string">'as-needed'</span><span class="token punctuation">,</span>

  <span class="token comment">// 在对象，数组括号与文字之间加空格 "&#123; foo: bar &#125;"</span>

  bracketSpacing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

  <span class="token comment">// 多行时尽可能打印尾随逗号。（例如，单行数组永远不会出现逗号结尾。） 可选值"&lt;none|es5|all>"，默认none</span>

  trailingComma<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>

  <span class="token comment">// 在JSX中使用单引号而不是双引号</span>

  jsxSingleQuote<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

  <span class="token comment">//  (x) => &#123;&#125; 箭头函数参数只有一个时是否要有小括号。avoid：省略括号 ,always：不省略括号</span>

  arrowParens<span class="token operator">:</span> <span class="token string">'avoid'</span><span class="token punctuation">,</span>

  <span class="token comment">// 如果文件顶部已经有一个 doclock，这个选项将新建一行注释，并打上@format标记。</span>

  insertPragma<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

  <span class="token comment">// 指定要使用的解析器，不需要写文件开头的 @prettier</span>

  requirePragma<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

  <span class="token comment">// 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行</span>

  proseWrap<span class="token operator">:</span> <span class="token string">'preserve'</span><span class="token punctuation">,</span>

  <span class="token comment">// 在html中空格是否是敏感的 "css" - 遵守CSS显示属性的默认值， "strict" - 空格被认为是敏感的 ，"ignore" - 空格被认为是不敏感的</span>

  htmlWhitespaceSensitivity<span class="token operator">:</span> <span class="token string">'css'</span><span class="token punctuation">,</span>

  <span class="token comment">// 换行符使用 lf 结尾是 可选值"&lt;auto|lf|crlf|cr>"</span>

  endOfLine<span class="token operator">:</span> <span class="token string">'auto'</span><span class="token punctuation">,</span>

  <span class="token comment">// 这两个选项可用于格式化以给定字符偏移量（分别包括和不包括）开始和结束的代码</span>

  rangeStart<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>

  rangeEnd<span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>

  <span class="token comment">// Vue文件脚本和样式标签缩进</span>

  vueIndentScriptAndStyle<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

<span class="token punctuation">&#125;</span></code></pre>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.cn/post/6926822933721513998#heading-5">https://juejin.cn/post/6926822933721513998#heading-5</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>vue3</tag>
        <tag>pinia</tag>
        <tag>element_plus</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/05/01/%E5%89%8D%E7%AB%AF/vue/vue%E8%B7%AF%E7%94%B1%20(copy)/</url>
    <content><![CDATA[<p>vue路由</p>
<span id="more"></span>

<p>安装依赖</p>
<pre class="language-none"><code class="language-none">npm i vue-router@next -S</code></pre>



<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><pre class="language-none"><code class="language-none">src
│ # 路由目录
├─router
│   # 路由入口文件
├───index.ts
│   # 路由配置
├───routes.ts
│ # 项目入口文件
├───modules
│ # 路由模块
└─main.ts</code></pre>

<h1 id="引用路由"><a href="#引用路由" class="headerlink" title="引用路由"></a>引用路由</h1><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> RouteRecordRaw <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre>

<p><code>base</code> 是 History 模式在进行路由切换时的基础路径，默认是 <code>/</code> 根目录，如果的项目不是部署在根目录下，而是二级目录、三级目录等多级目录，就必须指定这个 base ，否则路由切换会有问题。</p>
<h1 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h1><pre class="language-none"><code class="language-none">const routes: Array&lt;RouteRecordRaw&gt; &#x3D; [
  &#123;
    path: &#39;&#x2F;&#39;,
    name: &#39;home&#39;,
    component: () &#x3D;&gt; import(&#39;@views&#x2F;home.vue&#39;),
  &#125;,
]</code></pre>

<p>起到懒加载配置作用的就是 <code>component</code> 接收的值 <code>() =&gt; import(&#39;@views/home.vue&#39;)</code> ，其中 <code>@views/home.vue</code> 就是路由的组件。</p>
<h1 id="路由的渲染"><a href="#路由的渲染" class="headerlink" title="路由的渲染"></a>路由的渲染</h1><p>所有路由组件，要在访问后进行渲染，都必须在父级组件里带有 <code>&lt;router-view /&gt;</code> 标签。</p>
<p>如果站点带有全局公共组件，比如有全站统一的页头、页脚，只有中间区域才是路由，那么可以这样配置：</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;!-- 全局页头 --&gt;
  &lt;Header &#x2F;&gt;

  &lt;!-- 路由 --&gt;
  &lt;router-view &#x2F;&gt;

  &lt;!-- 全局页脚 --&gt;
  &lt;Footer &#x2F;&gt;
&lt;&#x2F;template&gt;</code></pre>

<p>如果有一部分路由带公共组件，一部分没有，比如大部分页面都需要有侧边栏，但登录页、注册页不需要，就可以这么处理：</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;!-- 登录 --&gt;
  &lt;Login v-if&#x3D;&quot;route.name &#x3D;&#x3D;&#x3D; &#39;login&#39;&quot; &#x2F;&gt;

  &lt;!-- 注册 --&gt;
  &lt;Register v-else-if&#x3D;&quot;route.name &#x3D;&#x3D;&#x3D; &#39;register&#39;&quot; &#x2F;&gt;

  &lt;!-- 带有侧边栏的其他路由 --&gt;
  &lt;div v-else&gt;
    &lt;!-- 固定在左侧的侧边栏 --&gt;
    &lt;Sidebar &#x2F;&gt;

    &lt;!-- 路由 --&gt;
    &lt;router-view &#x2F;&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;</code></pre>

<p>也可以通过 路由元信息来管理这些规则。</p>
<h1 id="获取路由信息"><a href="#获取路由信息" class="headerlink" title="获取路由信息"></a>获取路由信息</h1><p>Vue 3 用啥都要导入，所以获取当前路由信息的正确用法是先导入路由 API ：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span></code></pre>

<p>再在 <code>setup</code> 里定义一个变量来获取当前路由：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>如果要在 <code>&lt;template /&gt;</code> 里使用路由，记得把 <code>route</code> 在 <code>setup</code> 里 return 出去。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取路由名称</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

<span class="token comment">// 获取路由参数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>

<span class="token comment">// 获取路由记录</span>
<span class="token keyword">const</span> matched <span class="token operator">=</span> route<span class="token punctuation">.</span>matched

<span class="token comment">// 获取该记录的路由个数</span>
<span class="token keyword">const</span> max <span class="token operator">=</span> matched<span class="token punctuation">.</span>length

<span class="token comment">// 获取倒数第二个路由（也就是当前路由的父级路由）</span>
<span class="token keyword">const</span> parentRoute <span class="token operator">=</span> matched<span class="token punctuation">[</span>max <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span></code></pre>

<h1 id="操作路由"><a href="#操作路由" class="headerlink" title="操作路由"></a>操作路由</h1><p>导入</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>
<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>接下来就可以通过定义好的变量 <code>router</code> 去操作路由了：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 跳转首页</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 返回上一页</span>
router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<h1 id="使用-router-link"><a href="#使用-router-link" class="headerlink" title="使用 router-link"></a>使用 router-link</h1><p><code>router-link</code> 是一个全局组件，可直接在 <code>&lt;template /&gt;</code> 里直接使用，无需导入，基础的用法在 Vue 2 和 Vue 3 里是一样。</p>
<h2 id="基础跳转"><a href="#基础跳转" class="headerlink" title="基础跳转"></a>基础跳转</h2><p>最基础的用法就是把它当成一个 <code>target=&quot;_self&quot;</code> 的 <code>a</code> 标签使用，但无需重新刷新页面，因为是路由跳转，它的体验和使用 <code>router</code> 去进行路由导航的效果完全一样。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;router-link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;router-link&gt;
&lt;&#x2F;template&gt;</code></pre>

<p>等价于 <code>router</code> 的 <code>push</code>：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<h2 id="带参数的跳转"><a href="#带参数的跳转" class="headerlink" title="带参数的跳转"></a>带参数的跳转</h2><p>使用 <code>router</code> 的时候，可以轻松的带上参数去那些有 ID 的内容页、用户资料页、栏目列表页等等。</p>
<p>比如要访问一篇文章 <code>https://example.com/article/123</code> ，用 <code>push</code> 的写法是：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'article'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>在 <code>router-link</code> 里应该：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>router<span class="token operator">-</span>link
    <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link"</span>
    <span class="token operator">:</span>to<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'article'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>"
  <span class="token operator">></span>
    这是文章的标题
  <span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
</code></pre>

<h1 id="路由元信息配置"><a href="#路由元信息配置" class="headerlink" title="路由元信息配置"></a>路由元信息配置</h1><p>有时候的项目需要一些个性化配置，比如：</p>
<ol>
<li>每个路由给予独立的标题；</li>
<li>管理后台的路由，部分页面需要限制一些访问权限；</li>
<li>通过路由来自动生成侧边栏、面包屑；</li>
<li>部分路由的生命周期需要做缓存（ Keep Alive ）;</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@views/login.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      title<span class="token operator">:</span> <span class="token string">'登录'</span><span class="token punctuation">,</span>
      isDisableBreadcrumbLink<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      isShowBreadcrumb<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      addToSidebar<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      sidebarIcon<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
      sidebarIconAlt<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
      isNoLogin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<p>主要功能</p>
<table>
<thead>
<tr>
<th align="left">字段</th>
<th align="left">类型</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">title</td>
<td align="left">string</td>
<td align="left">用于在渲染的时候配置浏览器标题；</td>
</tr>
<tr>
<td align="left">isDisableBreadcrumbLink</td>
<td align="left">boolean</td>
<td align="left">是否禁用面包屑链接（对一些没有内容的路由可以屏蔽访问）；</td>
</tr>
<tr>
<td align="left">isShowBreadcrumb</td>
<td align="left">boolean</td>
<td align="left">是否显示面包屑（此处的登录页不需要面包屑）；</td>
</tr>
<tr>
<td align="left">addToSidebar</td>
<td align="left">boolean</td>
<td align="left">是否加入侧边栏（此处的登录页不需要加入侧边栏）；</td>
</tr>
<tr>
<td align="left">sidebarIcon</td>
<td align="left">string</td>
<td align="left">配置侧边栏的图标 className（默认）；</td>
</tr>
<tr>
<td align="left">sidebarIconAlt</td>
<td align="left">string</td>
<td align="left">配置侧边栏的图标 className（展开状态）；</td>
</tr>
<tr>
<td align="left">isNoLogin</td>
<td align="left">boolean</td>
<td align="left">是否免登录（后台默认强制登录，设置为 <code>true</code> 则可以免登录访问，此处的登录页不需要校验）；</td>
</tr>
</tbody></table>
<p>类似的，如果有其他需求，比如要增加对不同用户组的权限控制（比如有管理员、普通用户分组，部分页面只有管理员允许访问），都可以通过配置 Meta 里的字段，再配合 <a href="https://vue3.chengpeiquan.com/router.html#%E8%B7%AF%E7%94%B1%E6%8B%A6%E6%88%AA">路由拦截</a> 一起使用。</p>
<h1 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h1><p>路由重定向是使用一个 <code>redirect</code> 字段进行配置到对应的路由里面去实现跳转：</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@views/home.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      title<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 访问这个路由会被重定向到首页</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/error'</span><span class="token punctuation">,</span>
    redirect<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<h2 id="配置为-path"><a href="#配置为-path" class="headerlink" title="配置为 path"></a>配置为 path</h2><p>首页地址是 <code>https://example.com/home</code>，但是想让主域名 <code>https://example.com/</code> 也能跳转到 <code>/home</code>，可以这么配置：</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// 重定向到 `/home`</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
    redirect<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 真正的首页</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@views/home.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<p>这是最简单的配置方式，把目标路由的 <code>path</code> 配置进来就可以了</p>
<h2 id="配置为-route"><a href="#配置为-route" class="headerlink" title="配置为 route"></a>配置为 route</h2><p>如果想要重定向后的路由地址带上一些参数，可以配置为 <code>route</code>：</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// 重定向到 `/home` ，并带上一个 `query` 参数</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
    redirect<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>
      query<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        from<span class="token operator">:</span> <span class="token string">'redirect'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 真正的首页</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@views/home.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<p>最终访问的地址就是 <code>https://example.com/home?from=redirect</code>， 像这样带有来路参数的，就可以在 “百度统计” 或者 “ CNZZ 统计” 之类的统计站点查看来路的流量。</p>
<h2 id="配置为-function"><a href="#配置为-function" class="headerlink" title="配置为 function"></a>配置为 function</h2><p>结合业务场景来解释是最直观的，比如的网站有 3 个用户组，一个是管理员，一个是普通用户，还有一个是游客（未登录），他们的网站首页是不一样的：</p>
<table>
<thead>
<tr>
<th align="center">用户组</th>
<th align="left">访问首页时</th>
</tr>
</thead>
<tbody><tr>
<td align="center">管理员</td>
<td align="left">具备各种数据可视化图表、最新的网站数据、一些最新的用户消息等等</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">只有一些常用模块的入口链接</td>
</tr>
<tr>
<td align="center">未登录用户</td>
<td align="left">直接跳转到登录页面</td>
</tr>
</tbody></table>
<p>产品需要在访问网站主域名的时候，识别用户身份跳转不同的首页，那么就可以这样配置路由重定向：</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// 访问主域名时，根据用户的登录信息，重定向到不同的页面</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">redirect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// `loginInfo` 是当前用户的登录信息</span>
      <span class="token comment">// 可以从 `localStorage` 或者 `Pinia` 读取</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> groupId <span class="token punctuation">&#125;</span> <span class="token operator">=</span> loginInfo

      <span class="token comment">// 根据组别 ID 进行跳转</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>groupId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 管理员跳去仪表盘</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token string">'/dashboard'</span>

        <span class="token comment">// 普通用户跳去首页</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token string">'/home'</span>

        <span class="token comment">// 其他都认为未登录，跳去登录页</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token string">'/login'</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<h1 id="404路由配置"><a href="#404路由配置" class="headerlink" title="404路由配置"></a>404路由配置</h1><p>这样配置之后，只要访问到不存在的路由，就会显示为这个 404 模板。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/:pathMatch(.*)*'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'404'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@views/404.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<h1 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h1><h2 id="路由全局钩子"><a href="#路由全局钩子" class="headerlink" title="路由全局钩子"></a>路由全局钩子</h2><p>顾名思义，是在创建 <code>router</code> 的时候进行全局的配置，也就是说，只要配置了钩子，那么所有的路由在被访问到的时候，都会触发这些钩子函数。</p>
<table>
<thead>
<tr>
<th align="left">可用钩子</th>
<th align="left">含义</th>
<th align="left">触发时机</th>
</tr>
</thead>
<tbody><tr>
<td align="left">beforeEach</td>
<td align="left">全局前置守卫</td>
<td align="left">在路由跳转前触发</td>
</tr>
<tr>
<td align="left">beforeResolve</td>
<td align="left">全局解析守卫</td>
<td align="left">在导航被确认前，同时在组件内守卫和异步路由组件被解析后</td>
</tr>
<tr>
<td align="left">afterEach</td>
<td align="left">全局后置守卫</td>
<td align="left">在路由跳转完成后触发</td>
</tr>
</tbody></table>
<p>使用</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token comment">// 创建路由</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 在这里调用导航守卫的钩子函数</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 导出去</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre>

<h3 id="beforeEach"><a href="#beforeEach" class="headerlink" title="beforeEach"></a>beforeEach</h3><p>全局前置守卫，这是导航守卫里面运用的最多的一个钩子函数，通常将其称为 “路由拦截”。</p>
<p>拦截这个词，顾名思义，就是在 XXX 目的达到之前，把它拦下来，所以路由的目的就是渲染指定的组件，路由拦截就是在组件被渲染之前，做一些拦截操作。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">to</td>
<td align="left">即将要进入的路由对象</td>
</tr>
<tr>
<td align="left">from</td>
<td align="left">当前导航正要离开的路由</td>
</tr>
</tbody></table>
<p>实际场景使用，比如在进入路由之前，根据 Meta 路由元信息的配置</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  #	设定路由的网页标题
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span> <span class="token operator">=</span> to<span class="token punctuation">.</span>meta
  document<span class="token punctuation">.</span>title <span class="token operator">=</span> title <span class="token operator">||</span> <span class="token string">'默认标题'</span>
  #	判断是否需要登录
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> isNoLogin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> to<span class="token punctuation">.</span>meta
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isNoLogin<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'/login'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>其他场景</p>
<ol>
<li>针对一些需要 ID 参数，但参数丢失的路由做拦截</li>
<li>当路由的 <code>params</code> 丢失的时候，路由记录 <code>matched</code> 是一个空数组</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'article'</span> <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'/'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<h3 id="beforeResolve"><a href="#beforeResolve" class="headerlink" title="beforeResolve"></a>beforeResolve</h3><p>全局解析守卫，它会在每次导航时触发，但是在所有组件内守卫和异步路由组件被解析之后，将在确认导航之前被调用。</p>
<p>使用场景：比如一些 H5 页面需要申请系统相机权限、一些微信活动需要申请微信的登录信息授权，获得权限之后才允许获取接口数据和给用户更多的操作</p>
<h2 id="在组件内使用"><a href="#在组件内使用" class="headerlink" title="在组件内使用"></a>在组件内使用</h2><p>使用</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRouter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 定义路由</span>
    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 调用全局钩子</span>
    router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>使用场景：离开此路由后需要清理数据时，即可使用</p>
<h2 id="路由里的独享钩子"><a href="#路由里的独享钩子" class="headerlink" title="路由里的独享钩子"></a>路由里的独享钩子</h2><p>介绍完全局钩子，如果只是有个别路由要做处理，可以使用路由独享的守卫，用来针对个别路由定制一些特殊功能，可以减少在全局钩子里面写一堆判断。</p>
<table>
<thead>
<tr>
<th align="left">可用钩子</th>
<th align="left">含义</th>
<th align="left">触发时机</th>
</tr>
</thead>
<tbody><tr>
<td align="left">beforeEnter</td>
<td align="left">路由独享前置守卫</td>
<td align="left">在路由跳转前触发</td>
</tr>
</tbody></table>
<blockquote>
<p>注：路由独享的钩子，必须配置在 <code>routes</code> 的 JSON 树里面，挂在对应的路由下面（与 <code>path</code>、 <code>name</code>、<code>meta</code> 这些字段同级）。</p>
</blockquote>
<p>它和全局钩子 <code>beforeEach</code> 的作用相同，都是在进入路由之前触发，触发时机比 <code>beforeResolve</code> 要早。</p>
<p>顺序：<code>beforeEach</code>（全局） &gt; <code>beforeEnter</code>（独享） &gt; <code>beforeResolve</code>（全局）。</p>
<h1 id="路由侦听"><a href="#路由侦听" class="headerlink" title="路由侦听"></a>路由侦听</h1><h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><p>比如定义了一个函数，通过路由的参数来获取文章 ID ，然后请求文章内容：</p>
<p>ts</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> watchEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 从接口查询文章详情</span>
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">queryArticleDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文章 ID 是：'</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>

      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/article/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 直接侦听包含路由参数的那个函数</span>
    <span class="token function">watchEffect</span><span class="token punctuation">(</span>queryArticleDetail<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>对比 <code>watch</code> 的使用， <code>watchEffect</code> 在操作上更加简单，把包含要被侦听数据的函数，当成它的入参传进去即可。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>vue路由</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3+ts+pinia+element_plus</title>
    <url>/2022/05/01/%E5%89%8D%E7%AB%AF/vue/vue%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<p>vue3+ts+pinia+element_plus</p>
<span id="more"></span>

<p>安装依赖</p>
<pre class="language-none"><code class="language-none">npm i vue-router@next -S</code></pre>



<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><pre class="language-none"><code class="language-none">src
│ # 路由目录
├─router
│   # 路由入口文件
├───index.ts
│   # 路由配置
├───routes.ts
│ # 项目入口文件
├───modules
│ # 路由模块
└─main.ts</code></pre>

<h1 id="引用路由"><a href="#引用路由" class="headerlink" title="引用路由"></a>引用路由</h1><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> RouteRecordRaw <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre>

<p><code>base</code> 是 History 模式在进行路由切换时的基础路径，默认是 <code>/</code> 根目录，如果的项目不是部署在根目录下，而是二级目录、三级目录等多级目录，就必须指定这个 base ，否则路由切换会有问题。</p>
<h1 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h1><pre class="language-none"><code class="language-none">const routes: Array&lt;RouteRecordRaw&gt; &#x3D; [
  &#123;
    path: &#39;&#x2F;&#39;,
    name: &#39;home&#39;,
    component: () &#x3D;&gt; import(&#39;@views&#x2F;home.vue&#39;),
  &#125;,
]</code></pre>

<p>起到懒加载配置作用的就是 <code>component</code> 接收的值 <code>() =&gt; import(&#39;@views/home.vue&#39;)</code> ，其中 <code>@views/home.vue</code> 就是路由的组件。</p>
<h1 id="路由的渲染"><a href="#路由的渲染" class="headerlink" title="路由的渲染"></a>路由的渲染</h1><p>所有路由组件，要在访问后进行渲染，都必须在父级组件里带有 <code>&lt;router-view /&gt;</code> 标签。</p>
<p>如果站点带有全局公共组件，比如有全站统一的页头、页脚，只有中间区域才是路由，那么可以这样配置：</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;!-- 全局页头 --&gt;
  &lt;Header &#x2F;&gt;

  &lt;!-- 路由 --&gt;
  &lt;router-view &#x2F;&gt;

  &lt;!-- 全局页脚 --&gt;
  &lt;Footer &#x2F;&gt;
&lt;&#x2F;template&gt;</code></pre>

<p>如果有一部分路由带公共组件，一部分没有，比如大部分页面都需要有侧边栏，但登录页、注册页不需要，就可以这么处理：</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;!-- 登录 --&gt;
  &lt;Login v-if&#x3D;&quot;route.name &#x3D;&#x3D;&#x3D; &#39;login&#39;&quot; &#x2F;&gt;

  &lt;!-- 注册 --&gt;
  &lt;Register v-else-if&#x3D;&quot;route.name &#x3D;&#x3D;&#x3D; &#39;register&#39;&quot; &#x2F;&gt;

  &lt;!-- 带有侧边栏的其他路由 --&gt;
  &lt;div v-else&gt;
    &lt;!-- 固定在左侧的侧边栏 --&gt;
    &lt;Sidebar &#x2F;&gt;

    &lt;!-- 路由 --&gt;
    &lt;router-view &#x2F;&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;</code></pre>

<p>也可以通过 路由元信息来管理这些规则。</p>
<h1 id="获取路由信息"><a href="#获取路由信息" class="headerlink" title="获取路由信息"></a>获取路由信息</h1><p>Vue 3 用啥都要导入，所以获取当前路由信息的正确用法是先导入路由 API ：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span></code></pre>

<p>再在 <code>setup</code> 里定义一个变量来获取当前路由：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>如果要在 <code>&lt;template /&gt;</code> 里使用路由，记得把 <code>route</code> 在 <code>setup</code> 里 return 出去。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取路由名称</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

<span class="token comment">// 获取路由参数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>

<span class="token comment">// 获取路由记录</span>
<span class="token keyword">const</span> matched <span class="token operator">=</span> route<span class="token punctuation">.</span>matched

<span class="token comment">// 获取该记录的路由个数</span>
<span class="token keyword">const</span> max <span class="token operator">=</span> matched<span class="token punctuation">.</span>length

<span class="token comment">// 获取倒数第二个路由（也就是当前路由的父级路由）</span>
<span class="token keyword">const</span> parentRoute <span class="token operator">=</span> matched<span class="token punctuation">[</span>max <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span></code></pre>

<h1 id="操作路由"><a href="#操作路由" class="headerlink" title="操作路由"></a>操作路由</h1><p>导入</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>
<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>接下来就可以通过定义好的变量 <code>router</code> 去操作路由了：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 跳转首页</span>
router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 返回上一页</span>
router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<h1 id="使用-router-link"><a href="#使用-router-link" class="headerlink" title="使用 router-link"></a>使用 router-link</h1><p><code>router-link</code> 是一个全局组件，可直接在 <code>&lt;template /&gt;</code> 里直接使用，无需导入，基础的用法在 Vue 2 和 Vue 3 里是一样。</p>
<h2 id="基础跳转"><a href="#基础跳转" class="headerlink" title="基础跳转"></a>基础跳转</h2><p>最基础的用法就是把它当成一个 <code>target=&quot;_self&quot;</code> 的 <code>a</code> 标签使用，但无需重新刷新页面，因为是路由跳转，它的体验和使用 <code>router</code> 去进行路由导航的效果完全一样。</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;router-link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;router-link&gt;
&lt;&#x2F;template&gt;</code></pre>

<p>等价于 <code>router</code> 的 <code>push</code>：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<h2 id="带参数的跳转"><a href="#带参数的跳转" class="headerlink" title="带参数的跳转"></a>带参数的跳转</h2><p>使用 <code>router</code> 的时候，可以轻松的带上参数去那些有 ID 的内容页、用户资料页、栏目列表页等等。</p>
<p>比如要访问一篇文章 <code>https://example.com/article/123</code> ，用 <code>push</code> 的写法是：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'article'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>在 <code>router-link</code> 里应该：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>router<span class="token operator">-</span>link
    <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link"</span>
    <span class="token operator">:</span>to<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'article'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>"
  <span class="token operator">></span>
    这是文章的标题
  <span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
</code></pre>

<h1 id="路由元信息配置"><a href="#路由元信息配置" class="headerlink" title="路由元信息配置"></a>路由元信息配置</h1><p>有时候的项目需要一些个性化配置，比如：</p>
<ol>
<li>每个路由给予独立的标题；</li>
<li>管理后台的路由，部分页面需要限制一些访问权限；</li>
<li>通过路由来自动生成侧边栏、面包屑；</li>
<li>部分路由的生命周期需要做缓存（ Keep Alive ）;</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@views/login.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      title<span class="token operator">:</span> <span class="token string">'登录'</span><span class="token punctuation">,</span>
      isDisableBreadcrumbLink<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      isShowBreadcrumb<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      addToSidebar<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      sidebarIcon<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
      sidebarIconAlt<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
      isNoLogin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<p>主要功能</p>
<table>
<thead>
<tr>
<th align="left">字段</th>
<th align="left">类型</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">title</td>
<td align="left">string</td>
<td align="left">用于在渲染的时候配置浏览器标题；</td>
</tr>
<tr>
<td align="left">isDisableBreadcrumbLink</td>
<td align="left">boolean</td>
<td align="left">是否禁用面包屑链接（对一些没有内容的路由可以屏蔽访问）；</td>
</tr>
<tr>
<td align="left">isShowBreadcrumb</td>
<td align="left">boolean</td>
<td align="left">是否显示面包屑（此处的登录页不需要面包屑）；</td>
</tr>
<tr>
<td align="left">addToSidebar</td>
<td align="left">boolean</td>
<td align="left">是否加入侧边栏（此处的登录页不需要加入侧边栏）；</td>
</tr>
<tr>
<td align="left">sidebarIcon</td>
<td align="left">string</td>
<td align="left">配置侧边栏的图标 className（默认）；</td>
</tr>
<tr>
<td align="left">sidebarIconAlt</td>
<td align="left">string</td>
<td align="left">配置侧边栏的图标 className（展开状态）；</td>
</tr>
<tr>
<td align="left">isNoLogin</td>
<td align="left">boolean</td>
<td align="left">是否免登录（后台默认强制登录，设置为 <code>true</code> 则可以免登录访问，此处的登录页不需要校验）；</td>
</tr>
</tbody></table>
<p>类似的，如果有其他需求，比如要增加对不同用户组的权限控制（比如有管理员、普通用户分组，部分页面只有管理员允许访问），都可以通过配置 Meta 里的字段，再配合 <a href="https://vue3.chengpeiquan.com/router.html#%E8%B7%AF%E7%94%B1%E6%8B%A6%E6%88%AA">路由拦截</a> 一起使用。</p>
<h1 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h1><p>路由重定向是使用一个 <code>redirect</code> 字段进行配置到对应的路由里面去实现跳转：</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@views/home.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      title<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 访问这个路由会被重定向到首页</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/error'</span><span class="token punctuation">,</span>
    redirect<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<h2 id="配置为-path"><a href="#配置为-path" class="headerlink" title="配置为 path"></a>配置为 path</h2><p>首页地址是 <code>https://example.com/home</code>，但是想让主域名 <code>https://example.com/</code> 也能跳转到 <code>/home</code>，可以这么配置：</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// 重定向到 `/home`</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
    redirect<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 真正的首页</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@views/home.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<p>这是最简单的配置方式，把目标路由的 <code>path</code> 配置进来就可以了</p>
<h2 id="配置为-route"><a href="#配置为-route" class="headerlink" title="配置为 route"></a>配置为 route</h2><p>如果想要重定向后的路由地址带上一些参数，可以配置为 <code>route</code>：</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// 重定向到 `/home` ，并带上一个 `query` 参数</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
    redirect<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>
      query<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        from<span class="token operator">:</span> <span class="token string">'redirect'</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 真正的首页</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@views/home.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<p>最终访问的地址就是 <code>https://example.com/home?from=redirect</code>， 像这样带有来路参数的，就可以在 “百度统计” 或者 “ CNZZ 统计” 之类的统计站点查看来路的流量。</p>
<h2 id="配置为-function"><a href="#配置为-function" class="headerlink" title="配置为 function"></a>配置为 function</h2><p>结合业务场景来解释是最直观的，比如的网站有 3 个用户组，一个是管理员，一个是普通用户，还有一个是游客（未登录），他们的网站首页是不一样的：</p>
<table>
<thead>
<tr>
<th align="center">用户组</th>
<th align="left">访问首页时</th>
</tr>
</thead>
<tbody><tr>
<td align="center">管理员</td>
<td align="left">具备各种数据可视化图表、最新的网站数据、一些最新的用户消息等等</td>
</tr>
<tr>
<td align="center">普通用户</td>
<td align="left">只有一些常用模块的入口链接</td>
</tr>
<tr>
<td align="center">未登录用户</td>
<td align="left">直接跳转到登录页面</td>
</tr>
</tbody></table>
<p>产品需要在访问网站主域名的时候，识别用户身份跳转不同的首页，那么就可以这样配置路由重定向：</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// 访问主域名时，根据用户的登录信息，重定向到不同的页面</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">redirect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// `loginInfo` 是当前用户的登录信息</span>
      <span class="token comment">// 可以从 `localStorage` 或者 `Pinia` 读取</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> groupId <span class="token punctuation">&#125;</span> <span class="token operator">=</span> loginInfo

      <span class="token comment">// 根据组别 ID 进行跳转</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>groupId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 管理员跳去仪表盘</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token string">'/dashboard'</span>

        <span class="token comment">// 普通用户跳去首页</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token string">'/home'</span>

        <span class="token comment">// 其他都认为未登录，跳去登录页</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token string">'/login'</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<h1 id="404路由配置"><a href="#404路由配置" class="headerlink" title="404路由配置"></a>404路由配置</h1><p>这样配置之后，只要访问到不存在的路由，就会显示为这个 404 模板。</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> routes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>RouteRecordRaw<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    path<span class="token operator">:</span> <span class="token string">'/:pathMatch(.*)*'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'404'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@views/404.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<h1 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h1><h2 id="路由全局钩子"><a href="#路由全局钩子" class="headerlink" title="路由全局钩子"></a>路由全局钩子</h2><p>顾名思义，是在创建 <code>router</code> 的时候进行全局的配置，也就是说，只要配置了钩子，那么所有的路由在被访问到的时候，都会触发这些钩子函数。</p>
<table>
<thead>
<tr>
<th align="left">可用钩子</th>
<th align="left">含义</th>
<th align="left">触发时机</th>
</tr>
</thead>
<tbody><tr>
<td align="left">beforeEach</td>
<td align="left">全局前置守卫</td>
<td align="left">在路由跳转前触发</td>
</tr>
<tr>
<td align="left">beforeResolve</td>
<td align="left">全局解析守卫</td>
<td align="left">在导航被确认前，同时在组件内守卫和异步路由组件被解析后</td>
</tr>
<tr>
<td align="left">afterEach</td>
<td align="left">全局后置守卫</td>
<td align="left">在路由跳转完成后触发</td>
</tr>
</tbody></table>
<p>使用</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRouter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token comment">// 创建路由</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 在这里调用导航守卫的钩子函数</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 导出去</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre>

<h3 id="beforeEach"><a href="#beforeEach" class="headerlink" title="beforeEach"></a>beforeEach</h3><p>全局前置守卫，这是导航守卫里面运用的最多的一个钩子函数，通常将其称为 “路由拦截”。</p>
<p>拦截这个词，顾名思义，就是在 XXX 目的达到之前，把它拦下来，所以路由的目的就是渲染指定的组件，路由拦截就是在组件被渲染之前，做一些拦截操作。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">to</td>
<td align="left">即将要进入的路由对象</td>
</tr>
<tr>
<td align="left">from</td>
<td align="left">当前导航正要离开的路由</td>
</tr>
</tbody></table>
<p>实际场景使用，比如在进入路由之前，根据 Meta 路由元信息的配置</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  #	设定路由的网页标题
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span> <span class="token operator">=</span> to<span class="token punctuation">.</span>meta
  document<span class="token punctuation">.</span>title <span class="token operator">=</span> title <span class="token operator">||</span> <span class="token string">'默认标题'</span>
  #	判断是否需要登录
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> isNoLogin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> to<span class="token punctuation">.</span>meta
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isNoLogin<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'/login'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>其他场景</p>
<ol>
<li>针对一些需要 ID 参数，但参数丢失的路由做拦截</li>
<li>当路由的 <code>params</code> 丢失的时候，路由记录 <code>matched</code> 是一个空数组</li>
</ol>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'article'</span> <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'/'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<h3 id="beforeResolve"><a href="#beforeResolve" class="headerlink" title="beforeResolve"></a>beforeResolve</h3><p>全局解析守卫，它会在每次导航时触发，但是在所有组件内守卫和异步路由组件被解析之后，将在确认导航之前被调用。</p>
<p>使用场景：比如一些 H5 页面需要申请系统相机权限、一些微信活动需要申请微信的登录信息授权，获得权限之后才允许获取接口数据和给用户更多的操作</p>
<h2 id="在组件内使用"><a href="#在组件内使用" class="headerlink" title="在组件内使用"></a>在组件内使用</h2><p>使用</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRouter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 定义路由</span>
    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 调用全局钩子</span>
    router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>使用场景：离开此路由后需要清理数据时，即可使用</p>
<h2 id="路由里的独享钩子"><a href="#路由里的独享钩子" class="headerlink" title="路由里的独享钩子"></a>路由里的独享钩子</h2><p>介绍完全局钩子，如果只是有个别路由要做处理，可以使用路由独享的守卫，用来针对个别路由定制一些特殊功能，可以减少在全局钩子里面写一堆判断。</p>
<table>
<thead>
<tr>
<th align="left">可用钩子</th>
<th align="left">含义</th>
<th align="left">触发时机</th>
</tr>
</thead>
<tbody><tr>
<td align="left">beforeEnter</td>
<td align="left">路由独享前置守卫</td>
<td align="left">在路由跳转前触发</td>
</tr>
</tbody></table>
<blockquote>
<p>注：路由独享的钩子，必须配置在 <code>routes</code> 的 JSON 树里面，挂在对应的路由下面（与 <code>path</code>、 <code>name</code>、<code>meta</code> 这些字段同级）。</p>
</blockquote>
<p>它和全局钩子 <code>beforeEach</code> 的作用相同，都是在进入路由之前触发，触发时机比 <code>beforeResolve</code> 要早。</p>
<p>顺序：<code>beforeEach</code>（全局） &gt; <code>beforeEnter</code>（独享） &gt; <code>beforeResolve</code>（全局）。</p>
<h1 id="路由侦听"><a href="#路由侦听" class="headerlink" title="路由侦听"></a>路由侦听</h1><h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><p>比如定义了一个函数，通过路由的参数来获取文章 ID ，然后请求文章内容：</p>
<p>ts</p>
<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> watchEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 从接口查询文章详情</span>
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">queryArticleDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文章 ID 是：'</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>

      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/article/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 直接侦听包含路由参数的那个函数</span>
    <span class="token function">watchEffect</span><span class="token punctuation">(</span>queryArticleDetail<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>对比 <code>watch</code> 的使用， <code>watchEffect</code> 在操作上更加简单，把包含要被侦听数据的函数，当成它的入参传进去即可。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>vue3</tag>
        <tag>pinia</tag>
        <tag>element_plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Echarts 常用总结</title>
    <url>/2021/04/10/%E5%89%8D%E7%AB%AF/%E5%BA%93/Echarts%20%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Echarts 常用：标题、图例、坐标轴、柱状图、饼图等</p>
<span id="more"></span>

<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'学生生源地来源分布图'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">subtext</span><span class="token operator">:</span> <span class="token string">'模拟数据'</span><span class="token punctuation">,</span>
  <span class="token comment">// x 设置水平安放位置，默认左对齐，可选值：'center' ¦ 'left' ¦ 'right' ¦ &#123;number&#125;（x坐标，单位px）</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
  <span class="token operator">/</span> y 设置垂直安放位置，默认全图顶端，可选值：<span class="token string">'top'</span> ¦ <span class="token string">'bottom'</span> ¦ <span class="token string">'center'</span> ¦ <span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span>（y坐标，单位px）
  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">'top'</span><span class="token punctuation">,</span>
  <span class="token comment">// itemGap设置主副标题纵向间隔，单位px，默认为10，</span>
  <span class="token literal-property property">itemGap</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'#EEE'</span><span class="token punctuation">,</span>
  <span class="token comment">// 主标题文本样式设置</span>
  <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>
    <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">'bolder'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#000080'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// 副标题文本样式设置</span>
  <span class="token literal-property property">subtextStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#8B2323'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre>

<h1 id="图例-legend"><a href="#图例-legend" class="headerlink" title="图例 legend"></a>图例 legend</h1><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">legend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// icon字段控制形状 类型包括 circle，rect ，roundRect，triangle，diamond，pin，arrow，none</span>
  <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">"circle"</span><span class="token punctuation">,</span>
  <span class="token comment">// orient 设置布局方式，默认水平布局，可选值：'horizontal'（水平） ¦ 'vertical'（垂直）</span>
  <span class="token literal-property property">orient</span><span class="token operator">:</span> <span class="token string">'vertical'</span><span class="token punctuation">,</span>
  <span class="token comment">// x 设置水平安放位置，默认全图居中，可选值：'center' ¦ 'left' ¦ 'right' ¦ &#123;number&#125;（x坐标，单位px）</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span>
  <span class="token comment">// y 设置垂直安放位置，默认全图顶端，可选值：'top' ¦ 'bottom' ¦ 'center' ¦ &#123;number&#125;（y坐标，单位px）</span>
  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">padding</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">//可设定图例[距上方距离，距右方距离，距下方距离，距左方距离]</span>
  <span class="token literal-property property">itemWidth</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>   <span class="token comment">// 设置图例图形的宽</span>
  <span class="token literal-property property">itemHeight</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token comment">// 设置图例图形的高</span>
  <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  	<span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#666'</span>  <span class="token comment">// 图例文字颜色</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token comment">// itemGap设置各个item之间的间隔，单位px，默认为10，横向布局时为水平间隔，纵向布局时为纵向间隔</span>
  <span class="token literal-property property">itemGap</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'#eee'</span><span class="token punctuation">,</span>  <span class="token comment">// 设置整个图例区域背景颜色</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'北京'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token string">'广州'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">,</span><span class="token string">'郑州'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre>

<h1 id="坐标轴"><a href="#坐标轴" class="headerlink" title="坐标轴"></a>坐标轴</h1><p>X 轴</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">xAxis</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"category"</span><span class="token punctuation">,</span>
    <span class="token comment">// type:坐标轴类型。</span>
    <span class="token comment">/*可选：
     1.'value' 数值轴，适用于连续数据；
     2.'category' 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据； 
     3.'time' 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范				围来决定使用月，星期，日还是小时范围的刻度；
     4.'log' 对数轴。适用于对数数据。*/</span>
    <span class="token comment">//x轴下面的数据</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">axisTick</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//是否显示网状线 默认为true</span>
      <span class="token literal-property property">alignWithLabel</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">//用于设置x下面的字体</span>
    <span class="token literal-property property">axisLabel</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//这里的show用于设置是否显示x轴下的字体 默认为true</span>
      <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//可以设置成 0 强制显示所有标签。如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推。</span>
      <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//textStyle里面写x轴下的字体的样式</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"#333"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">//用于设置x轴线</span>
    <span class="token literal-property property">axisLine</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//这里的show用于设置是否显示x轴那一条线 默认为true</span>
      <span class="token literal-property property">lineStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//lineStyle里面写x轴那一条线的样式</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"#6FC6F3"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">//轴线的粗细 我写的是2 最小为0，值为0的时候线隐藏</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>

<p>Y 轴</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">yAxis</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//y轴的最小值</span>
    <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">//y轴最大值</span>
    <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">//值之间的间隔</span>
    <span class="token comment">//上面的三个值可以根据自己需求随意设置 不设置时会根据图中的值自动生成相应的值</span>

    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"value"</span><span class="token punctuation">,</span>
    <span class="token comment">/* type坐标轴类型:[ default: 'value' ]
　　　　可选：1.'value' 数值轴，适用于连续数据。
　　　　2.'category' 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。
       3.'time' 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。
       4.'log' 对数轴。适用于对数数据。*/</span>
    <span class="token literal-property property">splitLine</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">//去除网状线 默认为true</span>
    <span class="token comment">//用于设置y轴的字体</span>
    <span class="token literal-property property">axisLabel</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//这里的show用于设置是否显示y轴下的字体 默认为true</span>
      <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//textStyle里面写y轴下的字体的样式</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"#333"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">//用于设置y轴的轴线</span>
    <span class="token literal-property property">axisLine</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//这里的show用于设置是否显示y轴那一条线 默认为true</span>
      <span class="token literal-property property">lineStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//lineStyle里面写y轴那一条线的样式</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"#6FC6F3"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">//轴线的粗细 我写的是2 最小为0，值为0的时候线隐藏</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>

<p>y 轴显示不全</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">grid</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token string">'15%'</span><span class="token punctuation">,</span>  <span class="token comment">// 组件离容器上侧的距离,百分比字符串或整型数字</span>
    <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'5%'</span><span class="token punctuation">,</span>    <span class="token comment">// 组件离容器左侧的距离,百分比字符串或整型数字</span>
    <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token string">'5%'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token string">'3%'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">containLabel</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">//grid 区域是否包含坐标轴的刻度标签，</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre>

<h1 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h1><p>柱体样式</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'销量'</span><span class="token punctuation">,</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>
	<span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">barWidth</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>   <span class="token comment">//柱状宽度</span>
	<span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//柱状颜色和圆角</span>
		<span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#F43368'</span><span class="token punctuation">,</span>
		<span class="token literal-property property">barBorderRadius</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// （顺时针左上，右上，右下，左下）</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre>

<h1 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h1><p>饼图颜色</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">series</span> <span class="token operator">:</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'time'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'pie'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hoverAnimation</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否开启 hover 在扇区上的放大动画效果。</span>
  <span class="token literal-property property">radius</span> <span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//饼图的半径，实心圆可以改为[0,90]</span>
  <span class="token literal-property property">center</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'25%'</span><span class="token punctuation">,</span> <span class="token string">'57%'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//饼图的中心（圆心）坐标，</span>
  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否在圆内显示所有分类的名称</span>
      <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'rgba(57, 58, 75, 1)'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">emphasis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    	<span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//是否在hover某个分类的时候显示该分类在圆内</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">normal</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
      <span class="token function-variable function">color</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">/</span>定义圆分类的颜色
      <span class="token comment">//自定义颜色</span>
      <span class="token keyword">var</span> colorList <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token string">'#309BFF'</span><span class="token punctuation">,</span> <span class="token string">'#D9D9D9'</span><span class="token punctuation">,</span> <span class="token string">'rgba(250, 204, 20, 1)'</span><span class="token punctuation">,</span> <span class="token string">'rgba(217,217,217,1)'</span><span class="token punctuation">,</span> <span class="token string">'#0025CE'</span><span class="token punctuation">,</span> <span class="token string">'#5704FF'</span>
      <span class="token punctuation">]</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> colorList<span class="token punctuation">[</span>params<span class="token punctuation">.</span>dataSIndex<span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>标识线及字体颜色</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">labelLine</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">normal</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">length</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment">// 改变标示线的长度</span>
    <span class="token literal-property property">lineStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    	<span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"red"</span>  <span class="token comment">// 改变标示线的颜色</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    	<span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'red'</span>  <span class="token comment">// 改变标示文字的颜色</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
</code></pre>



<h1 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h1><p>折线拐点</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"实际"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">620</span><span class="token punctuation">,</span> <span class="token number">732</span><span class="token punctuation">,</span> <span class="token number">941</span><span class="token punctuation">,</span> <span class="token number">834</span><span class="token punctuation">,</span> <span class="token number">1690</span><span class="token punctuation">,</span> <span class="token number">1030</span><span class="token punctuation">,</span> <span class="token number">920</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"line"</span><span class="token punctuation">,</span>
    <span class="token comment">// 设置折线上圆点大小</span>
    <span class="token literal-property property">symbolSize</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
    <span class="token comment">// 设置拐点为实心圆</span>
    <span class="token literal-property property">symbol</span><span class="token operator">:</span> <span class="token string">"circle"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 拐点上显示数值</span>
        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">borderColor</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token comment">// 拐点边框颜色</span>
        <span class="token literal-property property">lineStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 设置线宽</span>
          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"dotted"</span><span class="token punctuation">,</span> <span class="token comment">//'dotted'虚线 'solid'实线</span>
          <span class="token comment">// 使用rgba设置折线透明度为0，可以视觉上隐藏折线</span>
          <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"rgba(0,0,0,0)"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//	折线颜色</span>
<span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#00EE00'</span><span class="token punctuation">,</span> <span class="token string">'#FF9F7F'</span><span class="token punctuation">,</span><span class="token string">'#FFD700'</span><span class="token punctuation">]</span></code></pre>

<p>工具</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//工具框，可以选择</span>
<span class="token literal-property property">toolbox</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">feature</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">saveAsImage</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//下载工具</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h1 id="visualMap"><a href="#visualMap" class="headerlink" title="visualMap"></a>visualMap</h1><pre class="language-none"><code class="language-none">lt（小于，less than），

gt（大于，greater than），

lte（小于等于 less than or equals），

gte（大于等于，greater than or equals）来表达边界</code></pre>

<p><a href="https://blog.csdn.net/weixin_57871623/article/details/121207451">https://blog.csdn.net/weixin_57871623/article/details/121207451</a></p>
<p><a href="https://www.runoob.com/echarts/echarts-visualmap.html">https://www.runoob.com/echarts/echarts-visualmap.html</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>echarts</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器缓存与本地存储</title>
    <url>/2021/05/09/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E4%B8%8E%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<p>浏览器缓存机制：</p>
<ul>
<li>强缓存、协商缓存、缓存位置</li>
</ul>
<p>浏览器本地存储：</p>
<ul>
<li>Cookie</li>
<li>WebStorage(localStorage、sessionStorage)</li>
<li>IndexedDB</li>
</ul>
<span id="more"></span>

<h1 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h1><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p>浏览器中的缓存作用分为两种情况：</p>
<ol>
<li>需要发送 HTTP 请求</li>
<li>不需要发送</li>
</ol>
<p>首先通过相应的字段检查强缓存，这阶段不需要发送 HTTP 请求。</p>
<p>在 <code>HTTP/1.0</code> 和 <code>HTTP1.1</code> 中这个字段是不一样的。</p>
<ul>
<li><code>HTTP/1.0</code>使用的是<strong>Expires</strong></li>
<li><code>HTTP/1.1</code>使用的是<strong>Cache-Control</strong></li>
</ul>
<h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>expires 即过期时间，存在于服务端返回的响应头中，告诉浏览器在这个过期时间之前可以直接从缓存里面获取数据，无需再次请求。</p>
<p>例如：</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Expires</span><span class="token punctuation">:</span> <span class="token header-value">Wed, 22 Nov 2021 08:41:00 GMT</span></span></code></pre>

<p>表示资源在<code>2021年11月22号8点41分</code>过期，过期了就得向服务端发请求。</p>
<p>这种方式的缺点就是：服务器的时间和浏览器的时间可能不一致，那服务器返回的这个过期时间可能就是不准确的。</p>
<h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>在 HTTP1.1 中,采用过期时长来控制缓存，对应的字段是 max-age。</p>
<pre class="language-none"><code class="language-none">Cache-Control:max-age&#x3D;3600</code></pre>

<p>代表这个响应返回后在 3600 秒，也就是一个小时之内可以直接使用缓存。<br>此字段其他属性:</p>
<ul>
<li>public: 客户端和代理服务器都可以缓存。</li>
<li>private： 这种情况就是只有浏览器能缓存了，中间的代理服务器不能缓存。</li>
<li>no-cache: 跳过当前的强缓存，发送 HTTP 请求，即直接进入协商缓存阶段。</li>
<li>no-store：非常粗暴，不进行任何形式的缓存。</li>
<li>s-maxage：这和 max-age 长得比较像，但是区别在于 s-maxage 是针对代理服务器的缓存时间。</li>
</ul>
<p>当 Expires 和 Cache-Control 同时存在的时候，<strong>Cache-Control</strong>会优先考虑。</p>
<h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>强缓存失效之后，浏览器在请求头中携带相应的缓存 tag 来向服务器发请求，由服务器根据这个 tag，来决定是否使用缓存，这就是协商缓存。<br>缓存 tag 分为两种: Last-Modified 和 ETag。</p>
<h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h3><p>即最后修改时间。在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段。<br>浏览器接收到后，如果再次请求，会在请求头中携带 If-Modified-Since 字段，这个字段的值也就是服务器传来的最后修改时间。</p>
<p>服务器拿到请求头中的 If-Modified-Since 的字段后，其实会和这个服务器中该资源的最后修改时间对比:</p>
<ul>
<li>如果请求头中的这个值小于最后修改时间，说明是时候更新了。返回新的资源，跟常规的 HTTP 请求响应的流程一样。</li>
<li>否则返回 304，告诉浏览器直接用缓存。</li>
</ul>
<h3 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h3><p>ETag 是服务器根据当前文件的内容，给文件生成的唯一标识，只要里面的内容有改动，这个值就会变。服务器通过响应头把这个值给浏览器。<br>浏览器接收到 ETag 的值，会在下次请求时，将这个值作为 If-None-Match 这个字段的内容，并放到请求头中，然后发给服务器。</p>
<p>服务器接收到 If-None-Match 后，会跟服务器上该资源的 ETag 进行比对:</p>
<ul>
<li>如果两者不一样，说明要更新了。返回新的资源，跟常规的 HTTP 请求响应的流程一样。</li>
<li>否则返回 304，告诉浏览器直接用缓存。</li>
</ul>
<h2 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a>两者对比</h2><ol>
<li>在精准度上，ETag 优于 Last-Modified。优于 ETag 是按照内容给资源上标识，因此能准确感知资源的变化。而 Last-Modified 就不一样了，它在一些特殊的情况并不能准确感知资源变化，主要有两种情况:</li>
</ol>
<ul>
<li>编辑了资源文件，但是文件内容并没有更改，这样也会造成缓存失效。</li>
<li>Last-Modified 能够感知的单位时间是秒，如果文件在 1 秒内改变了多次，那么这时候的 Last-Modified 并没有体现出修改了。</li>
</ul>
<ol start="2">
<li>在性能上，Last-Modified 优于 ETag，也很简单理解，Last-Modified 仅仅只是记录一个时间点，而 Etag 需要根据文件的具体内容生成哈希值。</li>
</ol>
<p>如果两种方式都支持的话，服务器会优先考虑<strong>ETag</strong>。</p>
<h2 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h2><p>当强缓存命中或者协商缓存中服务器返回 304 的时候，我们直接从缓存中获取资源。那这些资源究竟缓存在什么位置呢？<br>浏览器中的缓存位置一共有四种，按优先级从高到低排列分别是：</p>
<ul>
<li>Service Worker</li>
<li>Memory Cache</li>
<li>Disk Cache</li>
<li>Push Cache</li>
</ul>
<h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><p>Service Worker 借鉴了 Web Worker 的 思路，即让 JS 运行在主线程之外，由于它脱离了浏览器的窗体，因此无法直接访问 DOM。虽然如此，但它仍然能帮助我们完成很多有用的功能，比如离线缓存、消息推送和网络代理等功能。其中的离线缓存就是 Service Worker Cache。</p>
<h3 id="Memory-Cache-Disk-Cache"><a href="#Memory-Cache-Disk-Cache" class="headerlink" title="Memory Cache\Disk Cache"></a>Memory Cache\Disk Cache</h3><p>Memory Cache 指的是内存缓存，从效率上讲它是最快的。但是从存活时间来讲又是最短的，当渲染进程结束后，内存缓存也就不存在了。</p>
<p>Disk Cache 就是存储在磁盘中的缓存，从存取效率上讲是比内存缓存慢的，但是他的优势在于存储容量和存储时长。</p>
<p>使用 Memory Cache 还是 Disk Cache:</p>
<ul>
<li>比较大的 JS、CSS 文件会直接被丢进磁盘，反之丢进内存</li>
<li>内存使用率比较高的时候，文件优先进入磁盘</li>
</ul>
<h3 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h3><p>即推送缓存，这是浏览器缓存的最后一道防线。它是 HTTP&#x2F;2 中的内容，虽然现在应用的并不广泛，但随着 HTTP&#x2F;2 的推广，它的应用越来越广泛。</p>
<p>具体可以查看<a href="https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/">扩展文章</a>。</p>
<h1 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h1><p>浏览器本地存储：</p>
<ul>
<li>Cookie</li>
<li>WebStorage(localStorage、sessionStorage)</li>
<li>IndexedDB</li>
</ul>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie 最开始被设计出来其实并不是来做本地存储的，而是为了弥补 HTTP 在状态管理上的不足。<br>HTTP 协议是一个无状态协议，客户端向服务器发请求，服务器返回响应，故事就这样结束了，但是下次发请求如何让服务端知道客户端是谁呢？<br>Cookie 本质上就是浏览器里面存储的一个很小的文本文件，内部以键值对的方式来存储(在 chrome 开发者面板的 Application 这一栏可以看到)。向同一个域名下发送请求，都会携带相同的 Cookie，服务器拿到 Cookie 进行解析，便能拿到客户端的状态。</p>
<p>Cookie 的作用很好理解，就是用来做状态存储的，但它也是有诸多致命的缺陷的：</p>
<ol>
<li>容量缺陷。Cookie 的体积上限只有 4KB，只能用来存储少量的信息。</li>
<li>性能缺陷。Cookie 紧跟域名，不管域名下面的某一个地址需不需要这个 Cookie ，请求都会携带上完整的 Cookie，这样随着请求数的增多，其实会造成巨大的性能浪费的，因为请求携带了很多不必要的内容。</li>
<li>安全缺陷。由于 Cookie 以纯文本的形式在浏览器和服务器中传递，很容易被非法用户截获，然后进行一系列的篡改，在 Cookie 的有效期内重新发送给服务器，这是相当危险的。另外，在 HttpOnly 为 false 的情况下，Cookie 信息能直接通过 JS 脚本来读取。</li>
</ol>
<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>与 Cookie 不同,localStorage 在同一个域名下，会存储相同的一段 localStorage。<br>与 Cookie 区别:</p>
<ol>
<li>容量。localStorage 的容量上限为 5M，相比于 Cookie 的 4K 大大增加。当然这个 5M 是针对一个域名的，因此对于一个域名是持久存储的。</li>
<li>只存在客户端，默认不参与与服务端的通信。这样就很好地避免了 Cookie 带来的性能问题和安全问题。</li>
<li>接口封装。通过 localStorage 暴露在全局，并通过它的 setItem 和 getItem 等方法进行操作，非常方便。</li>
</ol>
<p><strong>操作方式</strong></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"sanyuan"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"sanyuan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 进入域名获取值</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p><strong>应用场景</strong></p>
<p>利用 localStorage 的较大容量和持久特性，可以利用 localStorage 存储一些内容稳定的资源，比如官网的 logo，存储 Base64 格式的图片资源，因此利用 localStorage</p>
<h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><p>sessionStorage 以下方面和 localStorage 一致:</p>
<ul>
<li>容量。容量上限也为 5M。</li>
<li>只存在客户端，默认不参与与服务端的通信。</li>
<li>接口封装。除了 sessionStorage 名字有所变化，存储方式、操作方式均和 localStorage 一样。</li>
</ul>
<p><strong>应用场景</strong></p>
<ol>
<li>可以用它对表单信息进行维护，将表单信息存储在里面，可以保证页面即使刷新也不会让之前的表单信息丢失。</li>
<li>可以用它存储本次浏览记录。如果关闭页面后不需要这些记录，用 sessionStorage 就再合适不过了。事实上微博就采取了这样的存储方式。</li>
</ol>
<h2 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h2><p>IndexedDB 是运行在浏览器中的非关系型数据库, 本质上是数据库，绝不是和刚才 WebStorage 的 5M 一个量级，理论上这个容量是没有上限的。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB">使用文档</a></p>
<p><strong>IndexedDB 的重要特性</strong></p>
<ol>
<li>键值对存储。内部采用对象仓库存放数据，在这个对象仓库中数据采用键值对的方式来存储。</li>
<li>异步操作。数据库的读写属于 I&#x2F;O 操作, 浏览器中对异步 I&#x2F;O 提供了支持。</li>
<li>受同源策略限制，即无法访问跨域的数据库。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于浏览器的缓存机制:<br>首先通过 <code>Cache-Control</code>验证强缓存是否可用.</p>
<ul>
<li>如果强缓存可用,直接使用.</li>
<li>否则进入协商缓存阶段<ul>
<li>若资源更新,返回资源和 200 状态码</li>
<li>否则,返回 304,告诉浏览器直接从缓存获取资源</li>
</ul>
</li>
</ul>
<p>浏览器本地存储方案:</p>
<ol>
<li>cookie 并不适合存储，而且存在非常多的缺陷。</li>
<li>Web Storage 包括 localStorage 和 sessionStorage, 默认不会参与和服务器的通信。</li>
<li>IndexedDB 为运行在浏览器上的非关系型数据库，为大型数据的存储提供了接口。</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>express+mysql+sequelize 创建项目</title>
    <url>/2022/03/18/%E5%90%8E%E7%AB%AF/Node.js/express+mysql+sequelize/</url>
    <content><![CDATA[<p>express+mysql+sequelize</p>
<span id="more"></span>

<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><pre class="language-none"><code class="language-none">mkdir realworld-api-express
cd realworld-api-express
npm init -y
npm i express</code></pre>

<p>在项目根目录创建 app.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">3000</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://localhost:'</span> <span class="token operator">+</span> <span class="token constant">PORT</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>设置<code>PORT</code> ，在终端</p>
<pre class="language-none"><code class="language-none">set port&#x3D;5000</code></pre>

<p>运行项目就可以看到改变了的端口号，</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看端口号</span>
<span class="token builtin class-name">set</span> port
<span class="token comment"># 删除端口号</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">port</span><span class="token operator">=</span></code></pre>

<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><ul>
<li>config 配置文件<ul>
<li>config.defaule.js</li>
</ul>
</li>
<li>controllers 控制层</li>
<li>models 数据持久层</li>
<li>middlewares 中间层</li>
<li>routers 路由模块</li>
<li>utils 工具模块</li>
<li>app.js 入口启动文件</li>
</ul>
<h1 id="配置常用的中间件"><a href="#配置常用的中间件" class="headerlink" title="配置常用的中间件"></a>配置常用的中间件</h1><p>解析请求体</p>
<ul>
<li>express.json()</li>
<li>express.urlencode()</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>日志输出</p>
<ul>
<li>morgan()</li>
</ul>
<pre class="language-none"><code class="language-none">npm i morgan
------------------
const morgan &#x3D; require(&#39;morgan&#39;)
const app &#x3D; express()

app.use(morgan(&#39;dev&#39;))</code></pre>

<p>跨域</p>
<ul>
<li>cors()</li>
</ul>
<pre class="language-none"><code class="language-none">npm i cors
const cors &#x3D; require(&#39;cors&#39;)
const app &#x3D; express()

app.use(cors())</code></pre>

<h1 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h1><p>参考：</p>
<p><a href="https://realworld-docs.netlify.app/docs/specs/backend-specs/endpoints">https://realworld-docs.netlify.app/docs/specs/backend-specs/endpoints</a></p>
<h1 id="数据库（Sequelize）"><a href="#数据库（Sequelize）" class="headerlink" title="数据库（Sequelize）"></a>数据库（Sequelize）</h1><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p><a href="https://www.sequelize.com.cn/core-concepts/getting-started">Sequelize</a></p>
<pre class="language-none"><code class="language-none">npm i sequelize
npm i mysql2</code></pre>

<p>配置config.default.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">HOST</span><span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
  <span class="token constant">USERNAME</span><span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
  <span class="token constant">PASSWORD</span><span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
  <span class="token constant">DATABASE</span><span class="token operator">:</span> <span class="token string">'realworld-api'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dialect</span><span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pool</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">acquire</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>
    <span class="token literal-property property">idle</span><span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>pool</code>可选，用于Sequelize连接池配置</p>
<pre class="language-swift" data-language="swift"><code class="language-swift"><span class="token operator">-</span> max：池中的最大连接数
<span class="token operator">-</span> min：池中的最小连接数
<span class="token operator">-</span> idle：连接释放之前可以空闲的最长时间（以毫秒为单位）
<span class="token operator">-</span> acquire：该池将在抛出错误之前尝试获取连接的最长时间（以毫秒为单位）</code></pre>

<p>创建<code>modules\index</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Sequelize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sequelize'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> dbConfig <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config/config.default'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequelize</span><span class="token punctuation">(</span>
  dbConfig<span class="token punctuation">.</span><span class="token constant">DATABASE</span><span class="token punctuation">,</span>
  dbConfig<span class="token punctuation">.</span><span class="token constant">USERNAME</span><span class="token punctuation">,</span>
  dbConfig<span class="token punctuation">.</span><span class="token constant">PASSWORD</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> dbConfig<span class="token punctuation">.</span><span class="token constant">HOST</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dialect</span><span class="token operator">:</span> dbConfig<span class="token punctuation">.</span>dialect<span class="token punctuation">,</span>
    <span class="token literal-property property">pool</span><span class="token operator">:</span> dbConfig<span class="token punctuation">.</span>pool<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
db<span class="token punctuation">.</span>Sequelize <span class="token operator">=</span> Sequelize
db<span class="token punctuation">.</span>sequelize <span class="token operator">=</span> sequelize

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> db</code></pre>

<p>至此，连接成功</p>
<h2 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h2><p>创建<code>modules\user</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Sequelize<span class="token punctuation">,</span> DataTypes <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sequelize'</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sequelize</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> User <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'users'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
      <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">account</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">autoIncrement</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">primaryKey</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
      <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">defaultValue</span><span class="token operator">:</span> <span class="token string">'未知'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
      <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bio</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">img</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> User
<span class="token punctuation">&#125;</span></code></pre>

<p>在<code>modules\index</code>中</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
db<span class="token punctuation">.</span>Sequelize <span class="token operator">=</span> Sequelize
db<span class="token punctuation">.</span>sequelize <span class="token operator">=</span> sequelize
<span class="token comment">// 添加模型</span>
db<span class="token punctuation">.</span>users <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./user'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sequelize<span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> db</code></pre>

<blockquote>
<p>模型列参数</p>
<ul>
<li><p>allowNull:false 不为空</p>
</li>
<li><p>defaultValue:”默认值”</p>
</li>
<li><p>unique:true 禁止插入重复数据</p>
</li>
<li><p>primaryKey:true 设置为主键</p>
</li>
<li><p>autoIncrement: true 设置自增</p>
<p>数据类型必须为INTEGER类型</p>
<p>字段必须为 主键</p>
</li>
</ul>
</blockquote>
<h2 id="模型同步"><a href="#模型同步" class="headerlink" title="模型同步"></a>模型同步</h2><ul>
<li><code>User.sync()</code> - 如果表不存在,则创建该表(如果已经存在,则不执行任何操作)</li>
<li><code>User.sync(&#123; force: true &#125;)</code> - 将创建表,如果表已经存在,则将其首先删除</li>
<li><code>User.sync(&#123; alter: true &#125;)</code> - 这将检查数据库中表的当前状态(它具有哪些列,它们的数据类型等),然后在表中进行必要的更改以使其与模型匹配.</li>
</ul>
<h1 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h1><h2 id="数据效验"><a href="#数据效验" class="headerlink" title="数据效验"></a>数据效验</h2><p><a href="https://express-validator.github.io/docs/check-api.html#bodyfields-message">规则</a></p>
<pre class="language-none"><code class="language-none">npm i express-validator</code></pre>

<p>提取为中间件</p>
<p><code>middlewares/validate.js</code>验证数据处理函数</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> validationResult <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-validator'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token constant">CODE_ERROR</span><span class="token punctuation">,</span> <span class="token constant">CODE_SUCCESS</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config/constant'</span><span class="token punctuation">)</span>

<span class="token comment">// parallel processing 并行处理</span>
<span class="token comment">// 暴露一个函数，函数接收验证规则，返回一个函数</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">validations</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>validations<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">validation</span><span class="token punctuation">)</span> <span class="token operator">=></span> validation<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token function">validationResult</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token constant">CODE_ERROR</span><span class="token punctuation">,</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'数据效验遇到错误'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> errors<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>配置验证规则<code>middlewares/validator.js</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 配置效验规则</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> body <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-validator'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> validate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./validate'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> userModel <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Op <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sequelize'</span><span class="token punctuation">)</span>

<span class="token comment">// 用户名是否存在</span>
exports<span class="token punctuation">.</span>uNameVai <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withMessage</span><span class="token punctuation">(</span><span class="token string">'用户名不能为空'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> userModel<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">user</span><span class="token operator">:</span> user <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'用户名已存在'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 账号是否存在</span>
exports<span class="token punctuation">.</span>accountVai <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'account'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withMessage</span><span class="token punctuation">(</span><span class="token string">'账号不能为空'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">account<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> req <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> userModel<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">account</span><span class="token operator">:</span> account <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'账号不存在'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// 将查询结果添加，使控制器减少查询</span>
      req<span class="token punctuation">.</span>result <span class="token operator">=</span> result
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 用户名 or 账号</span>
exports<span class="token punctuation">.</span>userIdVai <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'userId'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withMessage</span><span class="token punctuation">(</span><span class="token string">'用户名不能为空'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">userId<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> req <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> userModel<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token punctuation">[</span>Op<span class="token punctuation">.</span>or<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">&#123;</span>
              <span class="token literal-property property">user</span><span class="token operator">:</span> userId<span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#123;</span>
              <span class="token literal-property property">account</span><span class="token operator">:</span> userId<span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'用户名或账号不存在'</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
      req<span class="token punctuation">.</span>result <span class="token operator">=</span> result
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 密码</span>
exports<span class="token punctuation">.</span>pwsVai <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMessage</span><span class="token punctuation">(</span><span class="token string">'密码不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>

<p>路由使用</p>
<p>可以绑定多个验证规则</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> usersCtrl <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controllers/users'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> validator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../middlewares/validator'</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
  <span class="token string">'/register'</span><span class="token punctuation">,</span>
  validator<span class="token punctuation">.</span>pwsVai<span class="token punctuation">,</span>
  validator<span class="token punctuation">.</span>uNameVai<span class="token punctuation">,</span>
  usersCtrl<span class="token punctuation">.</span>register
<span class="token punctuation">)</span>
<span class="token comment">// 用户登录</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> validator<span class="token punctuation">.</span>pwsVai<span class="token punctuation">,</span> validator<span class="token punctuation">.</span>userIdVai<span class="token punctuation">,</span> usersCtrl<span class="token punctuation">.</span>login<span class="token punctuation">)</span>
<span class="token comment">// 更新用户</span>
router<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/updata'</span><span class="token punctuation">,</span> validator<span class="token punctuation">.</span>accountVai<span class="token punctuation">,</span> usersCtrl<span class="token punctuation">.</span>updata<span class="token punctuation">)</span>
<span class="token comment">// 删除用户</span>
router<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'/del'</span><span class="token punctuation">,</span> usersCtrl<span class="token punctuation">.</span>delete<span class="token punctuation">)</span>
<span class="token comment">// 获取当前登录用户信息</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/getCurrentUser'</span><span class="token punctuation">,</span> usersCtrl<span class="token punctuation">.</span>getCurrentUser<span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</code></pre>

<p>控制器直接使用数据效验阶段查询数据，减少查询次数</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> req<span class="token punctuation">.</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dataValues</code></pre>

<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><ul>
<li><p>md5加密密码</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> crypto
    <span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">+</span> s<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> md5</code></pre></li>
</ul>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>查询用户名或者账号</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> userModel<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span>Op<span class="token punctuation">.</span>or<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">user</span><span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userId<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">account</span><span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userId<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><pre class="language-none"><code class="language-none">npm i jsonwebtoken express-jwt</code></pre>

<ul>
<li>jsonwebtoken 生成token</li>
<li>express-jwt效验token</li>
</ul>
<p>创建 <code>utils/jwt.js</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> expressJwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-jwt'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token constant">PRIVATE_KEY</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config/constant'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> jwtAuth <span class="token operator">=</span> <span class="token function">expressJwt</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// 设置密钥</span>
  <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token constant">PRIVATE_KEY</span><span class="token punctuation">,</span>
  <span class="token comment">// 设置算法</span>
  <span class="token literal-property property">algorithms</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'HS256'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 是否开启认证</span>
  <span class="token literal-property property">credentialsRequired</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 获取token</span>
  <span class="token function-variable function">getToken</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>header<span class="token punctuation">.</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> req<span class="token punctuation">.</span>header<span class="token punctuation">.</span>authorization
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>token
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// 认证白名单</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'api/users/register'</span><span class="token punctuation">,</span> <span class="token string">'api/users/login'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// jwt解析</span>
<span class="token keyword">function</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'Authorization'</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token constant">PRIVATE_KEY</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> jwtAuth<span class="token punctuation">,</span> decode <span class="token punctuation">&#125;</span></code></pre>

<p>路由解析twt<code>routers/index.js</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> jwtAuth<span class="token punctuation">,</span> decode <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/jwt'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 重要：效验</span>
router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>jwtAuth<span class="token punctuation">)</span>
<span class="token comment">// 用户相关</span>
router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/users'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./users'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 自定义统一异常处理中间件，需要放在代码最后</span>
router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 自定义用户认证失败的错误返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'UnauthorizedError'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> status <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">,</span> message <span class="token punctuation">&#125;</span> <span class="token operator">=</span> err
    <span class="token comment">// 抛出401异常</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> status<span class="token punctuation">,</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'token失效,请重新登录'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> output <span class="token punctuation">&#125;</span> <span class="token operator">=</span> err <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token comment">// 错误码和错误信息</span>
    <span class="token keyword">const</span> errCode <span class="token operator">=</span> <span class="token punctuation">(</span>output <span class="token operator">&amp;&amp;</span> output<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">500</span>
    <span class="token keyword">const</span> errMsg <span class="token operator">=</span>
      <span class="token punctuation">(</span>output <span class="token operator">&amp;&amp;</span> output<span class="token punctuation">.</span>payload <span class="token operator">&amp;&amp;</span> output<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token operator">||</span> err<span class="token punctuation">.</span>message
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>errCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> errCode<span class="token punctuation">,</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> errMsg<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>测试</p>
<p>postman 添加统一请求头</p>
<p>请求成功</p>
<p>不设置token，请求失败</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>sequelize</tag>
        <tag>express</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs+ffmpeg视频转码</title>
    <url>/2020/09/18/%E5%90%8E%E7%AB%AF/Node.js/nodejs+ffmpeg%E8%A7%86%E9%A2%91%E8%BD%AC%E7%A0%81/</url>
    <content><![CDATA[<p>使用 ffmpeg 进行视频转码</p>
<span id="more"></span>

<p>首先电脑中要先安装 ffmpeg<br><a href="http://ffmpeg.org/download.html#build-windows">下载</a>安装<br>配置环境<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070847215.jpg" loading="lazy"><br>检查安装<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070917750.jpg" loading="lazy"><br>至此,ffmpeg 就安装完成了.<br>接下来要在 node 中使用,需要下载<a href="https://www.npmjs.com/package/fluent-ffmpeg">fluent-ffmpeg</a></p>
<pre class="language-language" data-language="language"><code class="language-language">npm install fluent-ffmpeg</code></pre>

<p>转码例子:<br><a href="https://k8963.github.io/2020/09/13/Node%E7%88%AC%E5%8F%96%E5%AD%97%E6%AF%8D%E7%AB%99%E8%A7%86%E9%A2%91/">Node 爬取字母站视频</a> 使用这个例子所下载的视频进行转码,将 flv 格式的视频转为 mp3</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">transcode</span><span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 文件路径 + flv 原格式</span>
  <span class="token keyword">var</span> command <span class="token operator">=</span> <span class="token function">ffmpeg</span><span class="token punctuation">(</span><span class="token string">"media/"</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">".flv"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">commandLine</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始"</span> <span class="token operator">+</span> commandLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"progress"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">progress</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"进度"</span> <span class="token operator">+</span> progress<span class="token punctuation">.</span>percent <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">//文件路径 + mp3要转码的格式</span>
    <span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"media/"</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> videoInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"https://www.bilibili.com/video/BV1rs411p7c8?from=search&amp;seid=16766879598476832298"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"feeling you"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 调用函数</span>
<span class="token function">transcode</span><span class="token punctuation">(</span>videoInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>执行结果<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070848827.jpg" loading="lazy"></p>
<p>在文件中试听转码后的文件,无问题<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070848298.jpg" loading="lazy"></p>
<p>当要转成 mp4 ,修改此处代码</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">'media/'</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'.mp4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>执行 js 文件,顺利转码.</p>
<p>当<a href="http://k8963.site/#/article?id=12">Node 爬取字母站视频</a>与此篇博客内容结合我们就可以制作一个字母站视频下载并转码的小程序,并添加一定的 ui 页面就可以制作一个小插件了.有空再做吧~~~~</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel-CSRF攻击</title>
    <url>/2020/08/31/%E5%90%8E%E7%AB%AF/PHP/LaravelCSRF%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>什么是 CSRF 攻击？<br>laravel 如何避免 CSRF 攻击？</p>
<span id="more"></span>

<h1 id="CSRF-攻击是什么"><a href="#CSRF-攻击是什么" class="headerlink" title="CSRF 攻击是什么"></a>CSRF 攻击是什么</h1><p>CSRF 攻击是跨站请求伪造(Cross-site request forgery)的英文缩写</p>
<p>Laravel 框架中避免 CSRF 攻击很简单，laravel 自动为每个用户 Session 生成一个 CSRF Token，该 Token 可用于验证登录用户和发起者请求是否是同一个人，如果不是则请求失败。</p>
<p>Laravel 提供了一个全局帮助函数 csrf token 来获取 Token 值，因此只需要在视图提交表单中添加如下 HTML 代码即可在请求中带上 Token：</p>
<pre class="language-none"><code class="language-none">&lt;input type&#x3D;”hidden” name&#x3D;”_token” value&#x3D;”&lt;?php csrf token();?&gt;”&gt;</code></pre>

<h1 id="避免-CSRF-攻击"><a href="#避免-CSRF-攻击" class="headerlink" title="避免 CSRF 攻击"></a>避免 CSRF 攻击</h1><p>案例：实现 CSRF 机制的验证</p>
<ol>
<li><p>创建两个路由，一个用于展示表单（get），一个用于处理请求（post）<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070819298.png" loading="lazy"></p>
</li>
<li><p>创建对应的方法<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070819678.png" loading="lazy"></p>
</li>
<li><p>创建需要的简易表单<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070820224.png" loading="lazy"></p>
<p>提交后报错，说明 laravel 中 csrf 验证机制是默认开启的</p>
</li>
<li><p>通过 CSRF 验证<br>解决方法：带上 csrf 需要的 token 值，随着请求传递给后续的方法<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070820984.png" loading="lazy"></p>
<p>在浏览器查看源码会发现 token<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070820285.png" loading="lazy"></p>
<p>提交效果：<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070820026.png" loading="lazy"></p>
</li>
</ol>
<p><strong>针对<code>csrf_token()</code>简化方法：</strong></p>
<pre class="language-none"><code class="language-none">&#123;&#123;csrf_field()&#125;&#125;</code></pre>

<p>两者的区别是：<br><code>csrf_token()</code>只是输出 token 的值<br><code>csrf_field</code>输出了一整个的 input 隐藏域</p>
<p>注意：当使用异步提交表单方式时，必须使用<code>csrf_token()</code></p>
<h1 id="从-CSRF-验证中排除例外路由"><a href="#从-CSRF-验证中排除例外路由" class="headerlink" title="从 CSRF 验证中排除例外路由"></a>从 CSRF 验证中排除例外路由</h1><p>并不是所有请求都需要去避免 CSRF 攻击，比如去第三方 API 获取数据的请求<br>可以通过在<code>VerifyCsrfToken（app/Http/Middleware/VerifyCsrfToken.php）</code>中间件中将要排除的请求添加到<code>$except</code>属性数组（白名单）中：<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070820722.png" loading="lazy"><br>例如：<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070820544.png" loading="lazy"></p>
<p>在<code>VerifyCsrfToken.php</code>中的<code>$except</code>编写 test7 的路由之后，再次提交表单后，提交成功<br>（排除单个路由）<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070820675.png" loading="lazy"><br>排除所有路由：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070823489.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel-数据分页</title>
    <url>/2020/08/31/%E5%90%8E%E7%AB%AF/PHP/Laravel%E6%95%B0%E6%8D%AE%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<p>Laravel-数据分页 步骤+案例</p>
<span id="more"></span>

<h1 id="分页效果的步骤"><a href="#分页效果的步骤" class="headerlink" title="分页效果的步骤"></a>分页效果的步骤</h1><ul>
<li>查询符合分页条件的总的记录数</li>
<li>计算总的页数（总记录数&#x2F;每页要显示的记录数，并且向上取整）</li>
<li>拼凑分页的连接</li>
<li>（核心）使用limit语法来限制分页的记录数</li>
<li>展示分页的页码和分页数据</li>
<li>分页样式</li>
</ul>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>创建路由，并且展示简易的列表页面</p>
<p>路由：</p>
<p> <img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070829746.png" loading="lazy"></p>
<p>创建列表文件：</p>
<p>编写控制器方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070829749.png" loading="lazy"></p>
<p>展示数据</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070830944.png" loading="lazy"></p>
<p>效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070829924.png" loading="lazy"></p>
<p>使用分页展示页面</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070829751.png" loading="lazy"></p>
<p>分页的基本语法：</p>
<pre class="language-none"><code class="language-none">Model::paginate(每页显示的记录数);</code></pre>

<p>Paginate()和get()方法一致，支持使用where，orderBy等辅助查询方法。</p>
<p> <img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070829779.png" loading="lazy"></p>
<ul>
<li><p>效果（不展示分页连接）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070829526.png" loading="lazy"></p>
</li>
<li><p>在页面中展示分页链接：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070829329.png" loading="lazy"></p>
<p>语法格式：<code>&#123;&#123;$保存数据的对象 -> links()&#125;&#125;</code> 生成的链接</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070829183.png" loading="lazy"></p>
<p>效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070829312.png" loading="lazy"></p>
</li>
</ul>
<p>将页面提示的&lt;&lt;和&gt;&gt; 该成文字的上一页与下一页（可选）</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070829397.png" loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070829315.png" loading="lazy"></p>
<p>修改后：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070829900.png" loading="lazy"></p>
<p>分页数据对象其他实用方法：</p>
<ul>
<li>分页数据对象 -&gt; <code>count()</code>						&#x2F;&#x2F;当前页数据条数</li>
<li>分页数据对象 -&gt; <code>correntPage()	</code>		&#x2F;&#x2F;当前页码</li>
<li>分页数据对象 -&gt; <code>firstltem()	</code>				&#x2F;&#x2F;当前页第一条数据的序号</li>
<li>分页数据对象 -&gt; <code>hasMorePages()</code>		&#x2F;&#x2F;是否有后续页码</li>
<li>分页数据对象 -&gt; <code>lastltem()</code>					&#x2F;&#x2F;当前页最后一条数据的序号</li>
<li>分页数据对象 -&gt; <code>lastlPage()</code>					&#x2F;&#x2F;最后页序号</li>
<li>分页数据对象 -&gt; <code>nextPageUrl()</code>			&#x2F;&#x2F;下一页的连接地址</li>
<li>分页数据对象 -&gt; <code>perPage()		</code>			&#x2F;&#x2F;每页显示数据条数</li>
<li>分页数据对象 -&gt; <code>previousPageUrl()</code>		&#x2F;&#x2F;上一页的连接地址</li>
<li>分页数据对象 -&gt; <code>total()</code>						&#x2F;&#x2F;记录总条数</li>
<li>分页数据对象 -&gt; <code>url()	</code>						&#x2F;&#x2F;制作指定页码的连接地址</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel-数据表迁移与填充</title>
    <url>/2020/09/07/%E5%90%8E%E7%AB%AF/PHP/Laravel%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%BF%81%E7%A7%BB%E4%B8%8E%E5%A1%AB%E5%85%85/</url>
    <content><![CDATA[<p>Laravel-数据表迁移与填充</p>
<span id="more"></span>

<p>创建模型与填充文件：</p>
<p>例如：创建一个文章数据表</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">php artisan make<span class="token operator">:</span>model Article <span class="token operator">-</span>m</code></pre>

<p>-m 是 –migration 的缩写，告知 Artisan 在创建模型同时创建与之对应的迁移文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070830770.png" loading="lazy"></p>
<p>迁移文件位置   <code>项目根目录\database\migrations</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Schema</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Schema<span class="token punctuation">\</span>Blueprint</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Migrations<span class="token punctuation">\</span>Migration</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateArticlesTable</span> <span class="token keyword">extends</span> <span class="token class-name">Migration</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">/**
   * Run the migrations.
   *
   * @return void
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'articles'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">increments</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//id</span>
      <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//文章标题</span>
      <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'outline'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//概要</span>
      <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'author'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//作者</span>
      <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内容</span>
      <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//html内容</span>
      <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'category'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//类别</span>
      <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//标签</span>
      <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">timestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/**
   * Reverse the migrations.
   *
   * @return void
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">dropIfExists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'articles'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</span></code></pre>

<p>列类型可<a href="https://blog.csdn.net/weixin_36934930/article/details/100693183">查看</a></p>
<p>执行迁移文件</p>
<pre class="language-php" data-language="php"><code class="language-php">php artisan migrate</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070830773.png" loading="lazy"></p>
<p>模型：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Admin</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Eloquent<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Article</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//定义模型关联的数据表 文章表</span>
    <span class="token keyword">protected</span> <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'articles'</span><span class="token punctuation">;</span>
    <span class="token comment">//定义主键</span>
    <span class="token keyword">protected</span> <span class="token variable">$primaryKey</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'id'</span><span class="token punctuation">;</span>
    <span class="token comment">//定义禁止操作时间</span>
    <span class="token keyword">public</span> <span class="token variable">$timestamps</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">//定义允许写入的数据字段</span>
    <span class="token keyword">protected</span> <span class="token variable">$fillable</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">'id'</span><span class="token punctuation">,</span> 
    <span class="token string single-quoted-string">'title'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'author'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'outline'</span><span class="token punctuation">,</span> 
    <span class="token string single-quoted-string">'content'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'html'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'category'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'tag'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'created_at'</span><span class="token punctuation">,</span> 
    <span class="token string single-quoted-string">'updated_at'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>创建填充器，生成随机测试数据</p>
<pre class="language-php" data-language="php"><code class="language-php">php artisan make<span class="token punctuation">:</span>seeder ArticlesTableSeeder</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070830192.png" loading="lazy"></p>
<p>填充器位置：<code>项目根目录下\database\seeds</code></p>
<p>使用faker库快速填充数据，<a href="https://www.cnblogs.com/jxl1996/p/10335920.html"><br>可查看</a></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Seeder</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Article</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ArticlesTableSeeder</span> <span class="token keyword">extends</span> <span class="token class-name">Seeder</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">/**
   * Run the database seeds.
   *
   * @return void
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token comment">// Let's truncate our existing records to start from scratch.</span>
    <span class="token class-name static-context">Article</span><span class="token operator">::</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$faker</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Faker<span class="token punctuation">\</span>Factory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$categoryList</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'前端'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'后端'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'网络'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$tagList</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'JAVA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'PHP'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Mysql'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Javascript'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Python'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// And now, let's create a few articles in our database:</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token class-name static-context">Article</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token variable">$faker</span><span class="token operator">-></span><span class="token property">sentence</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'outline'</span> <span class="token operator">=></span> <span class="token variable">$faker</span><span class="token operator">-></span><span class="token property">sentence</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'author'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'8963'</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'content'</span> <span class="token operator">=></span> <span class="token variable">$faker</span><span class="token operator">-></span><span class="token property">paragraph</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'html'</span> <span class="token operator">=></span> <span class="token variable">$faker</span><span class="token operator">-></span><span class="token property">paragraph</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'category'</span> <span class="token operator">=></span> <span class="token variable">$faker</span><span class="token operator">-></span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token variable">$categoryList</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'tag'</span> <span class="token operator">=></span> <span class="token variable">$faker</span><span class="token operator">-></span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token variable">$tagList</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>执行数据填充命令，生成数据</p>
<pre class="language-php" data-language="php"><code class="language-php">php artisan db<span class="token punctuation">:</span>seed <span class="token operator">--</span><span class="token keyword">class</span><span class="token operator">=</span>ArticlesTableSeeder</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070831552.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel-文件上传</title>
    <url>/2020/08/29/%E5%90%8E%E7%AB%AF/PHP/Laravel%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>Laravel-文件上传</p>
<span id="more"></span>

<p>前提工作：</p>
<p>创建数据库、连接数据库、创建表、创建字段</p>
<p>创建控制器、视图、上传按钮</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070827875.png" loading="lazy"></p>
<p>关于上传的本质就是文件的移动，业务逻辑</p>
<ol>
<li>先去判断文件是否正常和存在</li>
<li>获取相关的信息（可选）</li>
<li>保存文件（其实就是移动文件到新的目录）</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070827100.png" loading="lazy"></p>
<p>上传文件目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070827247.png" loading="lazy"></p>
<p>关于项目中使用路径的说明：</p>
<p>如果路径是给 php 代码使用的，则建议路径使用 ’ .&#x2F; ’ 的形式；如果路径是给浏览器使用的则建议使用 “ &#x2F; ” 形式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070827297.png" loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070827273.png" loading="lazy"></p>
<p>注意：如果要使用得是 create 方法添加数据到数据表中，则这里还要修改一下模型里面的 fillable 属性，代表允许插入到数据库的字段</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070827503.png" loading="lazy"></p>
<p>将数据写入数据表</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070828249.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel模块开发</title>
    <url>/2023/01/31/%E5%90%8E%E7%AB%AF/PHP/Laravel%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>Laravel模块开发</p>
<span id="more"></span>

<h1 id="安装Laravel"><a href="#安装Laravel" class="headerlink" title="安装Laravel"></a>安装Laravel</h1><ol>
<li>创建laravel项目</li>
<li>安装模块</li>
<li>发布配置文件</li>
</ol>
<pre class="language-none"><code class="language-none">composer create-project --prefer-dist laravel&#x2F;laravel server
cd server
composer require nwidart&#x2F;laravel-modules
php artisan vendor:publish --provider&#x3D;&quot;Nwidart\Modules\LaravelModulesServiceProvider&quot;</code></pre>

<p>生成项目模块</p>
<pre class="language-none"><code class="language-none">php artisan module:make Admin</code></pre>

<p>要让模块目录中定义的类可以自动加载，需要配置根目录下的composer.json。</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"autoload"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"psr-4"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"App\\"</span><span class="token operator">:</span> <span class="token string">"app/"</span><span class="token punctuation">,</span>
      <span class="token property">"Modules\\"</span><span class="token operator">:</span> <span class="token string">"Modules/"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>配置完成后运行以下命令让修改生效。</p>
<pre class="language-none"><code class="language-none">composer dump-autoload</code></pre>

<p>如果你使用 <code>Nginx</code> ，在你的站点配置中加入以下配置，所有的请求将会引导至<code>index.php</code>前端控制器：</p>
<pre class="language-none"><code class="language-none">location &#x2F; &#123;
    try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;
&#125;</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202305151534497.png" alt="image-20220910151806371" loading="lazy"></p>
<p>执行域名加模块名</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202305151534281.png" alt="image-20220910152632785" loading="lazy"></p>
<h1 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h1><p>拉取组件</p>
<p>默认laravel是没有带添加表注释组件的，这里需要安装zedisdog&#x2F;laravel-schema-extend包</p>
<blockquote>
<p>该组件包要求使用大于等于5.0版本的laravel</p>
</blockquote>
<pre class="language-none"><code class="language-none">composer require zedisdog&#x2F;laravel-schema-extend</code></pre>

<p>申明依赖</p>
<p>修改<code>./config/app.php-&gt;aliases</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'aliases'</span> <span class="token operator">=></span> <span class="token punctuation">[</span>
    <span class="token operator">...</span>
    <span class="token comment">// 'Schema' => Illuminate\Support\Facades\Schema::class,</span>
    <span class="token string single-quoted-string">'Schema'</span>    <span class="token operator">=></span> <span class="token class-name class-name-fully-qualified static-context">Jialeo<span class="token punctuation">\</span>LaravelSchemaExtend<span class="token punctuation">\</span>Schema</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>

<span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre>

<p>使用：默认创建的migration文件对应的“Schema”还是引用laravel自带的，需要修改为该组件包的引用</p>
<pre class="language-php" data-language="php"><code class="language-php"> <span class="token comment">//use Illuminate\\Support\\Facades\\Schema;</span>
 <span class="token keyword">use</span> Jialeo\\LaravelSchemaExtend\\Schema<span class="token punctuation">;</span>
<span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$table</span><span class="token operator">-></span><span class="token property">comment</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'用户表'</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>过程</p>
<ol>
<li>创建迁移文件：</li>
</ol>
  <pre class="language-none"><code class="language-none">php artisan module:make-migration  表名 模块名</code></pre>

<p>  例如：</p>
  <pre class="language-none"><code class="language-none">php artisan module:make-migration  create_auths_table Admin
php artisan make:migration add_images_to_articles_table --table&#x3D;articles</code></pre>

<ol start="2">
<li>执行迁移文件：</li>
</ol>
  <pre class="language-none"><code class="language-none">php artisan module:migrate Admin</code></pre>

<ol start="3">
<li>修改表字段：</li>
</ol>
  <pre class="language-none"><code class="language-none">php artisan module:make-migration update_moments_table</code></pre>

<ol start="4">
<li>重新执行迁移文件：</li>
</ol>
  <pre class="language-none"><code class="language-none">php artisan module:migrate-refresh Admin</code></pre>

<ol start="5">
<li>创建数据填充文件：</li>
</ol>
  <pre class="language-none"><code class="language-none">php artisan module:make-seed  auths_table_seeder AuthAdmin</code></pre>

<ol start="6">
<li>执行数据填充文件：</li>
</ol>
  <pre class="language-none"><code class="language-none">php artisan module:seed AuthAdmin</code></pre>

<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p><a href="https://learnku.com/docs/laravel/8.5/routing/10368">https://learnku.com/docs/laravel/8.5/routing/10368</a></p>
<p>api 接口开发中,路由应当定义在 <code>api.php</code>中 , 在请求时需要在 请求地址之后添加一个<code>api</code></p>
<p>如:</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202305151534443.png" alt="image-20220910155248133" loading="lazy"></p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>可选参数 \ 默认参数</p>
<p>获取请求的参数</p>
<pre class="language-none"><code class="language-none">Route::get(&#39;&#x2F;test&#x2F;&#123;id?&#125;&#39;, function (Request $request,$id &#x3D; 666) &#123;
    $data &#x3D; $request-&gt;all();
    $data[&#39;id&#39;]&#x3D;$id;
    return $data;
&#125;);</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202305151535491.png" alt="image-20220910162930953" loading="lazy"></p>
<h2 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h2><p>给一个路由定义多种请求方式</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'get'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'post'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/test/&#123;id?&#125;'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-></span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$id</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/test/&#123;id?&#125;'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-></span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$id</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/test'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 匹配 「/admin/users」URL</span>
        <span class="token keyword">return</span> <span class="token string single-quoted-string">'admin/test'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Route::prefix('gongzz')->group(function () &#123;</span>
<span class="token comment">//    Route::get('/test', function () &#123;</span>
<span class="token comment">//        // 匹配 「/admin/users」URL</span>
<span class="token comment">//        return 'gongzz/test';</span>
<span class="token comment">//    &#125;);</span>
<span class="token comment">//&#125;);</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"prefix"</span><span class="token operator">=></span><span class="token string double-quoted-string">"gongzz"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/test'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 匹配 「/admin/users」URL</span>
        <span class="token keyword">return</span> <span class="token string single-quoted-string">'gongzz/test/ '</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p><a href="https://learnku.com/docs/laravel/8.5/middleware/10369">https://learnku.com/docs/laravel/8.5/middleware/10369</a></p>
<p>路由中间件</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"prefix"</span><span class="token operator">=></span><span class="token string double-quoted-string">"gongzz"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"middleware"</span><span class="token operator">=></span><span class="token string double-quoted-string">"AdminApiAuth"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/test'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string single-quoted-string">'gongzz/test/ '</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>新建中间件文件<code>Modules\Admin\Http\Middleware\AdminApiAuth.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @name 后台权限中间件
 * @Auther 8963
 * @Date 2022/9/10 18:06
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">AdminApiAuth</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Closure</span> <span class="token variable">$next</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"中间件生效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>注册中间件<code>app\Http\Kernel.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> <span class="token variable">$routeMiddleware</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string single-quoted-string">'AdminApiAuth'</span> <span class="token operator">=></span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>AdminApiAuth</span><span class="token operator">::</span><span class="token keyword">class</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202305151535042.png" alt="image-20220910182102180" loading="lazy"></p>
<h2 id="v1"><a href="#v1" class="headerlink" title="v1"></a>v1</h2><p>新建控制器<code>Modules\Admin\Http\Controllers\v1\IndexController.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @name
 * @Auther 8963
 * @Date 2022/9/11 09:39
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>v1</span><span class="token punctuation">;</span>


<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">IndexController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string double-quoted-string">"This is v1"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p><code>Modules\Admin\Routes\api.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"prefix"</span><span class="token operator">=></span><span class="token string double-quoted-string">"v1/gongzz"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"middleware"</span><span class="token operator">=></span><span class="token string double-quoted-string">"AdminApiAuth"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"v1\IndexController@test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h1 id="验证器"><a href="#验证器" class="headerlink" title="验证器"></a>验证器</h1><p><a href="https://learnku.com/docs/laravel/8.5/validation/10378">https://learnku.com/docs/laravel/8.5/validation/10378</a></p>
<p>在控制器中<code>Modules\Admin\Http\Controllers\v1\IndexController.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @name
 * @Auther 8963
 * @Date 2022/9/11 09:39
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>v1</span><span class="token punctuation">;</span>


<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Validator</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">IndexController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$validated</span> <span class="token operator">=</span> <span class="token class-name static-context">Validator</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-></span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'required'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'body'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'required'</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">'title.required'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'666666'</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        打印错误信息</span>
        <span class="token keyword">return</span> <span class="token variable">$validated</span><span class="token operator">-></span><span class="token function">errors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">messages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$validated</span><span class="token operator">-></span><span class="token function">fails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token number">111</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token string double-quoted-string">"This is v1"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<h2 id="验证文件"><a href="#验证文件" class="headerlink" title="验证文件"></a>验证文件</h2><p>创建验证文件</p>
<pre class="language-none"><code class="language-none">php artisan make:request TestRequest</code></pre>

<p>创建模块化验证文件</p>
<pre class="language-none"><code class="language-none">php artisan modul:make-request TestRequest 模块名称</code></pre>

<p><code>/Modules/Admin/Http/Requests/TestRequest.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Requests</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Validation<span class="token punctuation">\</span>Validator</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>FormRequest</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">TestRequest</span> <span class="token keyword">extends</span> <span class="token class-name">FormRequest</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">//    用户验证权限</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">authorize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token comment">//    验证规则</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'required'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'body'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'required'</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token comment">//    定义验证信息</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">messages</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">'title.required'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'666666'</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token comment">//    输出验证信息</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">failedValidation</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Validator</span> <span class="token variable">$validator</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">dd</span><span class="token punctuation">(</span><span class="token variable">$validator</span><span class="token operator">-></span><span class="token function">errors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">messages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>使用:在控制器中</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @name
 * @Auther 8963
 * @Date 2022/9/11 09:39
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>v1</span><span class="token punctuation">;</span>


<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Validator</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Requests<span class="token punctuation">\</span>TestRequest</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">IndexController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TestRequest</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string double-quoted-string">"This is v1"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>



<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>先将验证文件中显示验证信息方法注释</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202305151535221.png" alt="image-20220911121000397" loading="lazy"></p>
<p><code>app\Exceptions\Handler.php</code></p>
<p>将异常处理抽离到模块中,新建文件<code>Modules\Common\Exceptions\Handler.php</code></p>
<p>修改配置<code>bootstrap\app.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//$app->singleton(</span>
<span class="token comment">//    Illuminate\Contracts\Debug\ExceptionHandler::class,</span>
<span class="token comment">//    App\Exceptions\Handler::class</span>
<span class="token comment">//);</span>
<span class="token variable">$app</span><span class="token operator">-></span><span class="token function">singleton</span><span class="token punctuation">(</span>
    <span class="token class-name class-name-fully-qualified static-context">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Debug<span class="token punctuation">\</span>ExceptionHandler</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name class-name-fully-qualified static-context">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>Handler</span><span class="token operator">::</span><span class="token keyword">class</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h1 id="用户模块-示例"><a href="#用户模块-示例" class="headerlink" title="用户模块 - 示例"></a>用户模块 - 示例</h1><h2 id="数据迁移-1"><a href="#数据迁移-1" class="headerlink" title="数据迁移"></a>数据迁移</h2><p>生成模块</p>
<pre class="language-none"><code class="language-none">php artisan module:make Admin</code></pre>

<p>创建迁移文件</p>
<blockquote>
<p>创建权限相关表</p>
</blockquote>
<pre class="language-none"><code class="language-none">php artisan module:make-migration  create_auths_table Admin</code></pre>

<p>管理员表\工作站表</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Schema</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Schema<span class="token punctuation">\</span>Blueprint</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Migrations<span class="token punctuation">\</span>Migration</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateAuthsTable</span> <span class="token keyword">extends</span> <span class="token class-name">Migration</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * Run the migrations.
     *
     * @return void
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">/**
         * 管理员表
         */</span>
        <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'auth_admins'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token property">comment</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'管理员表'</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">increments</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'管理员ID'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'名称'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'密码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'group_id'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'工作站ID'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">tinyInteger</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">default</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'状态:0=禁用,1=启用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'created_at'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'创建时间'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'updated_at'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'更新时间'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/**
         * 工作站表
         */</span>
        <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'auth_groups'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token property">comment</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'工作站表'</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">increments</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'工作站ID'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'工作站名称'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'image_id'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'图片id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'介绍'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">tinyInteger</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">default</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'状态:0=禁用,1=启用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'created_at'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'创建时间'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span><span class="token operator">-></span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'updated_at'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'更新时间'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>执行迁移文件</p>
<pre class="language-none"><code class="language-none">php artisan module:migrate Admin</code></pre>



<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="路由-1"><a href="#路由-1" class="headerlink" title="路由"></a>路由</h3><p>路由<code>Modules\Admin\Routes\api.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"prefix"</span><span class="token operator">=></span><span class="token string double-quoted-string">"v1/admin"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"middleware"</span><span class="token operator">=></span><span class="token string double-quoted-string">"AdminApiAuth"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//登录</span>
    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'login/login'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'v1\LoginController@login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="中间件-1"><a href="#中间件-1" class="headerlink" title="中间件"></a>中间件</h3><p><code>Modules\Admin\Http\Middleware\AdminApiAuth.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @name    后台权限验证中间件
 * @Auther 8963
 * @Date 2022/9/11 16:14
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware</span><span class="token punctuation">;</span>


<span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Services<span class="token punctuation">\</span>log<span class="token punctuation">\</span>OperationLogService</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>ApiException</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>MessageData</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>StatusData</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>JWTException</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>TokenExpiredException</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>TokenInvalidException</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>TokenBlacklistedException</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">JWTAuth</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">AdminApiAuth</span>
<span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Closure</span> <span class="token variable">$next</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Config</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'auth.defaults.guard'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'auth_admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Config</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'jwt.ttl'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$route_data</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-></span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token variable">$route_data</span><span class="token operator">-></span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'prefix'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$route_data</span><span class="token operator">-></span><span class="token property">uri</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$url_arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'login/login'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'index/getMain'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'index/refreshToken'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$api_key</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-></span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'apikey'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$api_key</span> <span class="token operator">!=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin.api_key'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token operator">=></span><span class="token class-name static-context">StatusData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_KEY</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'message'</span><span class="token operator">=></span><span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_KEY</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span><span class="token variable">$url_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">JWTAuth</span><span class="token operator">::</span><span class="token function">parseToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//获取到用户数据，并赋值给$user   'msg' => '用户不存在'</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token operator">=></span><span class="token class-name static-context">StatusData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_SET</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'message'</span><span class="token operator">=></span><span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_SET</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenBlacklistedException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 这个时候是老的token被拉到黑名单了</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token operator">=></span><span class="token class-name static-context">StatusData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_BLACK</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'message'</span><span class="token operator">=></span><span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_BLACK</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenExpiredException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//token已过期</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token operator">=></span><span class="token class-name static-context">StatusData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_EXPIRED</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'message'</span><span class="token operator">=></span><span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_EXPIRED</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenInvalidException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//token无效</span>

            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token operator">=></span><span class="token class-name static-context">StatusData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_JWT</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'message'</span><span class="token operator">=></span><span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_JWT</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JWTException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//'缺少token'</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token operator">=></span><span class="token class-name static-context">StatusData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_JTB</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'message'</span><span class="token operator">=></span><span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_JTB</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 写入日志</span>
        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperationLogService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">store</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        if(!in_array($url,['auth/index/refresh','auth/index/logout']))&#123;</span>
<span class="token comment">//            if($user['id'] != 1 &amp;&amp; $id = AuthRuleModel::where(['href'=>$url])->value('id'))&#123;</span>
<span class="token comment">//                $rules = AuthGroupModel::where(['id'=>$user['group_id']])->value('rules');</span>
<span class="token comment">//                if(!in_array($id,explode('|',$rules)))&#123;</span>
<span class="token comment">//                    throw new ApiException(['code'=>6781,'msg'=>'您没有权限！']);</span>
<span class="token comment">//                &#125;</span>
<span class="token comment">//            &#125;</span>
<span class="token comment">//        &#125;</span>
        <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>注册中间件</p>
<p>在 App\Http\Kernel 类中</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> <span class="token variable">$routeMiddleware</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">'AdminApiAuth'</span><span class="token operator">=></span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>AdminApiAuth</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'BlogApiAuth'</span><span class="token operator">=></span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Modules<span class="token punctuation">\</span>BlogApi<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>BlogApiAuth</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'HomeApiAuth'</span><span class="token operator">=></span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Modules<span class="token punctuation">\</span>Home<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Middleware<span class="token punctuation">\</span>HomeApiAuth</span><span class="token operator">::</span><span class="token keyword">class</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>



<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><h4 id="控制器基类"><a href="#控制器基类" class="headerlink" title="控制器基类"></a>控制器基类</h4><p><code>Modules\Admin\Http\Controllers\v1\BaseApiController.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @name 当前模块控制器基类
 * @Auther 8963
 * @Date 2022/9/11 16:10
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>v1</span><span class="token punctuation">;</span>


<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>BaseController</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">BaseApiController</span> <span class="token keyword">extends</span> <span class="token class-name">BaseController</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>公共库 - 控制器基类</p>
<p><code>Modules\Common\Controllers\BaseController.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/**
 * @Name 控制器基类
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">BaseController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>



<h4 id="验证器-1"><a href="#验证器-1" class="headerlink" title="验证器"></a>验证器</h4><p><code>Modules\Admin\Http\Requests\LoginRequest.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @name
 * @Auther 8963
 * @Date 2022/9/11 16:22
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Requests</span><span class="token punctuation">;</span>


<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>FormRequest</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">LoginRequest</span> <span class="token keyword">extends</span> <span class="token class-name">FormRequest</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * php artisan module:make-request LoginRequest AuthAdmin
     */</span>


    <span class="token comment">/**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">authorize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">'username'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'required'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'password'</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">'required'</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">messages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">'username.required'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'请输入账号！'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'password.required'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'请输入密码！'</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></span></code></pre>



<h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><h5 id="LoginService"><a href="#LoginService" class="headerlink" title="LoginService"></a>LoginService</h5><p><code>Modules\Admin\Services\auth\LoginService.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @name
 * @Auther 8963
 * @Date 2022/9/11 16:33
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Services<span class="token punctuation">\</span>auth</span><span class="token punctuation">;</span>


<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Services<span class="token punctuation">\</span>BaseApiService</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Models<span class="token punctuation">\</span>AuthAdmin</span> <span class="token keyword">as</span> AuthAdminModel<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">LoginService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseApiService</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * @name 用户登录
     * @description
     * @param data  Array 用户信息
     * @param data.username String 账号
     * @param data.password String 密码
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant boolean">true</span> <span class="token operator">==</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Auth</span><span class="token operator">::</span><span class="token function">guard</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'auth_admin'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">attempt</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$userInfo</span> <span class="token operator">=</span> <span class="token class-name static-context">AuthAdminModel</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token operator">=></span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$userInfo</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token variable">$user_info</span> <span class="token operator">=</span> <span class="token variable">$userInfo</span><span class="token operator">-></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$user_info</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TokenService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">setToken</span><span class="token punctuation">(</span><span class="token variable">$user_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiSuccess</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'登录成功！'</span><span class="token punctuation">,</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiError</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'账号或密码错误！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<h5 id="TokenService"><a href="#TokenService" class="headerlink" title="TokenService"></a>TokenService</h5><p><code>Modules\Admin\Services\auth\TokenService.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @name
 * @Auther 8963
 * @Date 2022/9/11 16:39
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Services<span class="token punctuation">\</span>auth</span><span class="token punctuation">;</span>


<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Services<span class="token punctuation">\</span>BaseApiService</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>ApiException</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>MessageData</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>StatusData</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>TokenBlacklistedException</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>JWTAuth</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">TokenService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseApiService</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * @name 设置token 生成机制
     * @description
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Config</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'auth.defaults.guard'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'auth_admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Config</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'jwt.ttl'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 设置token
     * @description
     * @param data  Array 用户信息
     * @param data.username String 账号
     * @param data.password String 密码$
     * @return JSON | Array
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setToken</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token class-name static-context">JWTAuth</span><span class="token operator">::</span><span class="token function">attempt</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiError</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'token生成失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">respondWithToken</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 刷新token
     * @description
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">refreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$oldToken</span> <span class="token operator">=</span> <span class="token class-name static-context">JWTAuth</span><span class="token operator">::</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token class-name static-context">JWTAuth</span><span class="token operator">::</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token variable">$oldToken</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenBlacklistedException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 这个时候是老的token被拉到黑名单了</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token operator">=></span><span class="token class-name static-context">StatusData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_BLACK</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'message'</span><span class="token operator">=></span><span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">TOKEN_ERROR_BLACK</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiSuccess</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">respondWithToken</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 管理员信息
     * @description
     * @return Array
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">my</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword return-type">Object</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name static-context">JWTAuth</span><span class="token operator">::</span><span class="token function">parseToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">touser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name
     * @description
     * @method  GET
     * @param
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">my</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiSuccess</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token operator">=></span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 退出登录
     * @description
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name static-context">JWTAuth</span><span class="token operator">::</span><span class="token function">parseToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiSuccess</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'退出成功！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * @name 组合token数据
     * @description
     * @return Array
     **/</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">respondWithToken</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword return-type">Array</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">'token'</span> <span class="token operator">=></span> <span class="token variable">$token</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'token_type'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'bearer'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'expires_in'</span> <span class="token operator">=></span> <span class="token class-name static-context">JWTAuth</span><span class="token operator">::</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getTTL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<h5 id="BaseApiService"><a href="#BaseApiService" class="headerlink" title="BaseApiService"></a>BaseApiService</h5><p><code>Modules\Admin\Services\BaseApiService.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @name 当前模块服务基类
 * @Auther 8963
 * @Date 2022/9/11 16:24
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Services</span><span class="token punctuation">;</span>


<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Services<span class="token punctuation">\</span>BaseService</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">BaseApiService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseService</span>
<span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span></span></code></pre>

<p><code>Modules\Common\Services\BaseService.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @Name  服务基类
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Services</span><span class="token punctuation">;</span>


<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>ApiException</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>CodeData</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>MessageData</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>StatusData</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">BaseService</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * @name 查询条件
     * @description
     * @method  GET
     * @param model Model 模型
     * @param params Array 查询参数
     * @param key String 模糊查询参数
     * @return Object
     **/</span>
    <span class="token keyword">function</span> <span class="token function-definition function">queryCondition</span><span class="token punctuation">(</span><span class="token keyword type-hint">object</span> <span class="token variable">$model</span><span class="token punctuation">,</span><span class="token keyword type-hint">array</span> <span class="token variable">$params</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword return-type">Object</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'created_at'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token variable">$model</span><span class="token operator">-></span><span class="token function">whereBetween</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'created_at'</span><span class="token punctuation">,</span><span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'created_at'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'updated_at'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token variable">$model</span><span class="token operator">-></span><span class="token function">whereBetween</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'updated_at'</span><span class="token punctuation">,</span><span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'updated_at'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token variable">$model</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'like'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'%'</span> <span class="token operator">.</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token variable">$model</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">,</span><span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token variable">$model</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name  成功返回
     * @description  用于所有的接口返回
     * @param status Int 自定义状态码
     * @param message String 提示信息
     * @param data Array 返回信息
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">apiSuccess</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword type-hint">int</span> <span class="token variable">$status</span> <span class="token operator">=</span> <span class="token class-name static-context">StatusData</span><span class="token operator">::</span><span class="token constant">Ok</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$message</span> <span class="token operator">==</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">Ok</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">'status'</span> <span class="token operator">=></span> <span class="token variable">$status</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'message'</span><span class="token operator">=></span> <span class="token variable">$message</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'data'</span><span class="token operator">=></span><span class="token variable">$data</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token class-name static-context">CodeData</span><span class="token operator">::</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * @name 失败返回
     * @description 用于所有的接口返回
     * @param status Int 自定义状态码
     * @param message String 提示信息
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">apiError</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">API_ERROR_EXCEPTION</span><span class="token punctuation">,</span><span class="token keyword type-hint">int</span> <span class="token variable">$status</span> <span class="token operator">=</span> <span class="token class-name static-context">StatusData</span><span class="token operator">::</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">'status'</span> <span class="token operator">=></span> <span class="token variable">$status</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'message'</span><span class="token operator">=></span> <span class="token variable">$message</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 添加公共方法
     * @description
     * @param model Model  当前模型
     * @param data array 添加数据
     * @param successMessage string 成功返回数据
     * @param errorMessage string 失败返回数据
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">commonCreate</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">,</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$successMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">ADD_API_SUCCESS</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$errorMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">ADD_API_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'created_at'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$model</span><span class="token operator">-></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiSuccess</span><span class="token punctuation">(</span><span class="token variable">$successMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiError</span><span class="token punctuation">(</span><span class="token variable">$errorMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 编辑公共方法
     * @description
     * @param model Model  当前模型
     * @param id   Int  修改id
     * @param data array 添加数据
     * @param successMessage string 成功返回数据
     * @param errorMessage string 失败返回数据
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">commonUpdate</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">,</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$successMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">UPDATE_API_SUCCESS</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$errorMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">UPDATE_API_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'updated_at'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$model</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiSuccess</span><span class="token punctuation">(</span><span class="token variable">$successMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiError</span><span class="token punctuation">(</span><span class="token variable">$errorMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 调整公共方法
     * @description
     * @param model Model  当前模型
     * @param id   Int  修改id
     * @param data array 添加数据
     * @param successMessage string 成功返回数据
     * @param errorMessage string 失败返回数据
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">commonStatusUpdate</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">,</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$successMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">STATUS_API_SUCCESS</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$errorMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">STATUS_API_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$model</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiSuccess</span><span class="token punctuation">(</span><span class="token variable">$successMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiError</span><span class="token punctuation">(</span><span class="token variable">$errorMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 排序公共方法
     * @description
     * @param model Model  当前模型
     * @param id   Int  修改id
     * @param data array 添加数据
     * @param successMessage string 成功返回数据
     * @param errorMessage string 失败返回数据
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">commonSortsUpdate</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">,</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$successMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">STATUS_API_SUCCESS</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$errorMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">STATUS_API_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$model</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiSuccess</span><span class="token punctuation">(</span><span class="token variable">$successMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiError</span><span class="token punctuation">(</span><span class="token variable">$errorMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 真删除公共方法
     * @description
     * @param model Model  当前模型
     * @param ArrId Array  删除id
     * @param successMessage string 成功返回数据
     * @param errorMessage string 失败返回数据
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">commonDestroy</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">,</span><span class="token keyword type-hint">array</span> <span class="token variable">$ArrId</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$successMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">DELETE_API_SUCCESS</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$errorMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">DELETE_API_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$model</span><span class="token operator">-></span><span class="token function">whereIn</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">,</span><span class="token variable">$ArrId</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiSuccess</span><span class="token punctuation">(</span><span class="token variable">$successMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiError</span><span class="token punctuation">(</span><span class="token variable">$errorMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 假删除公共方法
     * @description
     * @param model Model  当前模型
     * @param idArr Array  删除id
     * @param successMessage string 成功返回数据
     * @param errorMessage string 失败返回数据
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">commonIsDelete</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">,</span><span class="token keyword type-hint">array</span> <span class="token variable">$idArr</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$successMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">DELETE_API_SUCCESS</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$errorMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">DELETE_API_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$model</span><span class="token operator">-></span><span class="token function">whereIn</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">,</span><span class="token variable">$idArr</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'is_delete'</span><span class="token operator">=></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'deleted_at'</span><span class="token operator">=></span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiSuccess</span><span class="token punctuation">(</span><span class="token variable">$successMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiError</span><span class="token punctuation">(</span><span class="token variable">$errorMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 假删除恢复公共方法
     * @description
     * @param model Model  当前模型
     * @param idArr Array  删除id
     * @param successMessage string 成功返回数据
     * @param errorMessage string 失败返回数据
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">commonRecycleIsDelete</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">,</span><span class="token keyword type-hint">array</span> <span class="token variable">$idArr</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$successMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">DELETE_RECYCLE_API_SUCCESS</span><span class="token punctuation">,</span><span class="token keyword type-hint">string</span> <span class="token variable">$errorMessage</span> <span class="token operator">=</span> <span class="token class-name static-context">MessageData</span><span class="token operator">::</span><span class="token constant">DELETE_RECYCLE_API_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$model</span><span class="token operator">-></span><span class="token function">whereIn</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">,</span><span class="token variable">$idArr</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'is_delete'</span><span class="token operator">=></span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiSuccess</span><span class="token punctuation">(</span><span class="token variable">$successMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">apiError</span><span class="token punctuation">(</span><span class="token variable">$errorMessage</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 获取当前域名
     * @description
     * @return String
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword return-type">String</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$http</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTPS'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTPS'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'on'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_PROTO'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_PROTO'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string single-quoted-string">'https://'</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">'http://'</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$http</span><span class="token operator">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_HOST'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 将编辑器的content的图片转换为相对路径
     * @description
     * @param content String 内容
     * @return string
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getRemvePicUrl</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword return-type">String</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$con</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//提取图片路径的src的正则表达式 并把结果存入$matches中</span>
            <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/&lt;[img|IMG].*?src=[\'|\"](.*?(?:[\.gif|\.jpg|\.png]))[\'|\"].*?[\/]?>/"</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$img</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">//注意，上面的正则表达式说明src的值是放在数组的第三个中</span>
                <span class="token variable">$img</span> <span class="token operator">=</span> <span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$img</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$patterns</span><span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$replacements</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//$default = config('filesystems.disks.qiniu.domains.default</span><span class="token string single-quoted-string">');
                foreach($img as $imgItem)&#123;
                    //if (strpos($imgItem, $default) !== false) &#123;
                    //    $final_imgUrl = $imgItem;
                   // &#125; else &#123;
                        $final_imgUrl = str_replace($con,"",$imgItem);
                    //&#125;
                    $replacements[] = $final_imgUrl;
                    $img_new = "/".preg_replace("/\//i","\/",$imgItem)."/";
                    $patterns[] = $img_new;
                &#125;
                //让数组按照key来排序
                ksort($patterns);
                ksort($replacements);
                //替换内容
                $content = preg_replace($patterns, $replacements, $content);
            &#125;
        &#125;
        return $content;
    &#125;
    /**
     * @name 将编辑器的content的图片转换为绝对路径
     * @description
     * @param  content string 内容
     * @return String
     **/
    public function getReplacePicUrl(string $content = '</span><span class="token string single-quoted-string">'):String
    &#123;
        $con = $this->getHttp();
        if ($content)&#123;
            //提取图片路径的src的正则表达式 并把结果存入$matches中
            preg_match_all("/&lt;[img|IMG].*?src=[\'|\"](.*?(?:[\.gif|\.jpg|\.png]))[\'|\"].*?[\/]?>/",$content,$matches);
            $img = "";
            if(!empty($matches)) &#123;
                //注意，上面的正则表达式说明src的值是放在数组的第三个中
                $img = $matches[1];
            &#125;else &#123;
                $img = "";
            &#125;
            if (!empty($img)) &#123;
                $patterns= array();
                $replacements = array();
                //$default = config('</span>filesystems<span class="token operator">.</span>disks<span class="token operator">.</span>qiniu<span class="token operator">.</span>domains<span class="token operator">.</span><span class="token keyword">default</span><span class="token string single-quoted-string">');
                foreach($img as $imgItem)&#123;
                    //if (strpos($imgItem, $default) !== false) &#123;
                    //    $final_imgUrl = $imgItem;
                    //&#125; else &#123;
                        $final_imgUrl = $con.$imgItem;
                    //&#125;
                    $replacements[] = $final_imgUrl;
                    $img_new = "/".preg_replace("/\//i","\/",$imgItem)."/";
                    $patterns[] = $img_new;
                &#125;
                //让数组按照key来排序
                ksort($patterns);
                ksort($replacements);
                //替换内容
                $content = preg_replace($patterns, $replacements, $content);
            &#125;
        &#125;
        return $content;
    &#125;
    /**
     * @name 生成随机字符串
     * @description
     * @param length Int 生成字符串长度
     * @return String
     **/
    public function GetRandStr(int $length = 11):String
    &#123;
        //字符组合
        $str = '</span>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789<span class="token string single-quoted-string">';
        $len = strlen($str)-1;
        $randstr = '</span><span class="token string single-quoted-string">';
        for ($i=0;$i&lt;$length;$i++) &#123;
            $num=mt_rand(0,$len);
            $randstr .= $str[$num];
        &#125;
        return $randstr;
    &#125;
    /**
     * @name  处理二维数组转为json字符串乱码问题
     * @description
     * @param data Array  需要转为json字符串的数组
     * @return String
     **/
    public function setJsonEncodes($data):String
    &#123;
        $count = count($data);
        for($k=0;$k&lt;$count;$k++)&#123;
            foreach($data[$k] as $key => $value)&#123;
                $data[$k][$key] = urlencode($value);
            &#125;
        &#125;
        return urldecode(json_encode($data));
    &#125;

    /**
     * @name 传入时间戳,计算距离现在的时间
     * @description
     * @param theTime Int 时间戳
     * @return String
     **/
    public function format_time(int $theTime = 0):String
    &#123;
        $nowTime = time();
        $dur = $nowTime - $theTime;
        if ($dur &lt; 0) &#123;
            return $theTime;
        &#125; else &#123;
            if ($dur &lt; 60) &#123;
                return $dur . '</span>秒前<span class="token string single-quoted-string">';
            &#125; else &#123;
                if ($dur &lt; 3600) &#123;
                    return floor($dur / 60) . '</span>分钟前<span class="token string single-quoted-string">';
                &#125; else &#123;
                    if ($dur &lt; 86400) &#123;
                        return floor($dur / 3600) . '</span>小时前<span class="token string single-quoted-string">';
                    &#125; else &#123;//昨天
                        //获取今天凌晨的时间戳
                        $day = strtotime(date('</span><span class="token constant">Y</span><span class="token operator">-</span>m<span class="token operator">-</span>d<span class="token string single-quoted-string">', time()));
                        //获取昨天凌晨的时间戳
                        $pday = strtotime(date('</span><span class="token constant">Y</span><span class="token operator">-</span>m<span class="token operator">-</span>d<span class="token string single-quoted-string">', strtotime('</span><span class="token operator">-</span><span class="token number">1</span> day<span class="token string single-quoted-string">')));
                        if ($theTime > $pday &amp;&amp; $theTime &lt; $day) &#123;//是否昨天
                            return $t = '</span>昨天 <span class="token string single-quoted-string">' . date('</span><span class="token constant">H</span><span class="token punctuation">:</span>i<span class="token string single-quoted-string">', $the_time);
                        &#125; else &#123;
                            if ($dur &lt; 172800) &#123;
                                return floor($dur / 86400) . '</span>天前<span class="token string single-quoted-string">';
                            &#125; else &#123;
                                return date('</span><span class="token constant">Y</span><span class="token operator">-</span>m<span class="token operator">-</span>d <span class="token constant">H</span><span class="token punctuation">:</span>i<span class="token string single-quoted-string">', $the_time);
                            &#125;
                        &#125;
                    &#125;
                &#125;
            &#125;
        &#125;
    &#125;
    /**
     * @name 处理递归数据
     * @description
     * @param array Array  总数据
     * @param pid Int  父级id
     * @return Array
     **/
    public function tree(array $array,int $pid=0):Array
    &#123;
        $tree = array();
        foreach ($array as $key => $value) &#123;
            if ($value['</span>pid<span class="token string single-quoted-string">'] == $pid) &#123;
                $value['</span>children<span class="token string single-quoted-string">'] = $this->tree($array, $value['</span>id<span class="token string single-quoted-string">']);
                if (!$value['</span>children<span class="token string single-quoted-string">']) &#123;
                    unset($value['</span>children<span class="token string single-quoted-string">']);
                &#125;
                $tree[] = $value;
            &#125;
        &#125;
        return $tree;
    &#125;
    /**
     * @name 获取用户真实 ip
     * @description
     * @return array|false|mixed|string
     **/
    public function getClientIp()
    &#123;
        if (getenv('</span><span class="token constant">HTTP_CLIENT_IP</span><span class="token string single-quoted-string">')) &#123;
            $ip = getenv('</span><span class="token constant">HTTP_CLIENT_IP</span><span class="token string single-quoted-string">');
        &#125;
        if (getenv('</span><span class="token constant">HTTP_X_REAL_IP</span><span class="token string single-quoted-string">')) &#123;
            $ip = getenv('</span><span class="token constant">HTTP_X_REAL_IP</span><span class="token string single-quoted-string">');
        &#125; elseif (getenv('</span><span class="token constant">HTTP_X_FORWARDED_FOR</span><span class="token string single-quoted-string">')) &#123;
            $ip = getenv('</span><span class="token constant">HTTP_X_FORWARDED_FOR</span><span class="token string single-quoted-string">');
            $ips = explode('</span><span class="token punctuation">,</span><span class="token string single-quoted-string">', $ip);
            $ip = $ips[0];
        &#125; elseif (getenv('</span><span class="token constant">REMOTE_ADDR</span><span class="token string single-quoted-string">')) &#123;
            $ip = getenv('</span><span class="token constant">REMOTE_ADDR</span><span class="token string single-quoted-string">');
        &#125; else &#123;
            $ip = '</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token string single-quoted-string">';
        &#125;
        if(!$ip)&#123;
            return '</span><span class="token string single-quoted-string">';
        &#125;
        return $ip;
    &#125;
    /**
     * @name PHP格式化字节大小
     * @description
     * @param size Int  字节数
     * @param delimiter string  数字和单位分隔符
     * @return String 格式化后的带单位的大小
     **/
    public function formatBytes(int $size,string $delimiter = '</span><span class="token string single-quoted-string">'):String
    &#123;
        $units = array('</span><span class="token constant">B</span><span class="token string single-quoted-string">', '</span><span class="token constant">KB</span><span class="token string single-quoted-string">', '</span><span class="token constant">MB</span><span class="token string single-quoted-string">', '</span><span class="token constant">GB</span><span class="token string single-quoted-string">', '</span><span class="token constant">TB</span><span class="token string single-quoted-string">', '</span><span class="token constant">PB</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$size</span> <span class="token operator">>=</span> <span class="token number">1024</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token variable">$size</span> <span class="token operator">/=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$delimiter</span> <span class="token operator">.</span> <span class="token variable">$units</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>



<h4 id="models"><a href="#models" class="headerlink" title="models"></a>models</h4><p><code>Modules\Admin\Models\AuthAdmin.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @name
 * @Auther 8963
 * @Date 2022/9/11 16:34
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Models</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">DateTimeInterface</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>JWTSubject</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Notifications<span class="token punctuation">\</span>Notifiable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>User</span> <span class="token keyword">as</span> Authenticatable<span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">AuthAdmin</span> <span class="token keyword">extends</span> <span class="token class-name">Authenticatable</span> <span class="token keyword">implements</span> <span class="token class-name">JWTSubject</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">Notifiable</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$guard</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'auth_admin'</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$hidden</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">'password'</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * @name jwt标识
     * @description
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getJWTIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name jwt自定义声明
     * @description
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getJWTCustomClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 更新时间为null时返回
     * @description
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getUpdatedAtAttribute</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token operator">?</span><span class="token variable">$value</span><span class="token punctuation">:</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name  关联权限组表   多对一
     * @description
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">auth_groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Modules\Admin\Models\AuthGroup'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'group_id'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name  关联平台项目表   多对一
     * @description
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">auth_projects</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Modules\Admin\Models\AuthProject'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'project_id'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * @name 时间格式传唤
     * @description
     **/</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">serializeDate</span><span class="token punctuation">(</span><span class="token class-name type-declaration">DateTimeInterface</span> <span class="token variable">$date</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$date</span><span class="token operator">-></span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>



<h4 id="LoginController"><a href="#LoginController" class="headerlink" title="LoginController"></a>LoginController</h4><p><code>Modules\Admin\Http\Controllers\v1\LoginController.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * @name
 * @Auther 8963
 * @Date 2022/9/11 16:08
 * @Description
 */</span>

<span class="token keyword">namespace</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>v1</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Requests<span class="token punctuation">\</span>LoginRequest</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Modules<span class="token punctuation">\</span>Admin<span class="token punctuation">\</span>Services<span class="token punctuation">\</span>auth<span class="token punctuation">\</span>LoginService</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">LoginController</span> <span class="token keyword">extends</span> <span class="token class-name">BaseApiController</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * @name 用户登录
     * @description
     * @method  POST
     * @param username String 账号
     * @param password String 密码
     * @return JSON
     **/</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token class-name type-declaration">LoginRequest</span> <span class="token variable">$request</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-></span><span class="token function">only</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>



<h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202305151535406.png" alt="image-20220912100925701" loading="lazy"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel-项目初始化</title>
    <url>/2020/08/29/%E5%90%8E%E7%AB%AF/PHP/Laravel%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<p>Laravel-项目初始化<br>创建项目、连接数据库、项目设置</p>
<span id="more"></span>

<h1 id="1-创建-laravel-项目"><a href="#1-创建-laravel-项目" class="headerlink" title="1.创建 laravel 项目"></a>1.创建 laravel 项目</h1><p>使用 composer 下载 Laravel</p>
<blockquote>
<p>composer create-project laravel&#x2F;laravel&#x3D;(版本号).* –prefer-dist .&#x2F;</p>
</blockquote>
<pre class="language-none"><code class="language-none">composer create-project --prefer-dist laravel&#x2F;laravel blog 5.6.*</code></pre>

<h1 id="2-创建、连接数据库"><a href="#2-创建、连接数据库" class="headerlink" title="2.创建、连接数据库"></a>2.创建、连接数据库</h1><p>创建数据库，修改.env 文件，配置数据库连接操作</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070824831.png" loading="lazy"></p>
<h1 id="3-设置本地站点为中文"><a href="#3-设置本地站点为中文" class="headerlink" title="3.设置本地站点为中文"></a>3.设置本地站点为中文</h1><p>下载语言包：</p>
<blockquote>
<p>composer require caouecs&#x2F;laravel-lang:~3.0</p>
</blockquote>
<p>找到语言包下载目录，复制到指定位置，修改 config&#x2F;app.php 配置文件<br>指定位置</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070824437.png" loading="lazy"></p>
<p>修改配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070824269.png" loading="lazy"></p>
<h1 id="4-设置项目的使用时区"><a href="#4-设置项目的使用时区" class="headerlink" title="4. 设置项目的使用时区"></a>4. 设置项目的使用时区</h1><p>修改系统默认的时区，在 config&#x2F;app.php 文件中：</p>
<p>配置项：timezone</p>
<p>配置项的值：Aisa&#x2F;sahnghai、Aisa&#x2F;chongqing、PRC（People&#96;s Republic of China）</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070824695.png" loading="lazy"></p>
<h1 id="5-清理项目（删除不需要的文件）"><a href="#5-清理项目（删除不需要的文件）" class="headerlink" title="5. 清理项目（删除不需要的文件）"></a>5. 清理项目（删除不需要的文件）</h1><p>控制器</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070825819.png" loading="lazy"></p>
<p>迁移、填充器文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070825710.png" loading="lazy"></p>
<p>视图文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070825926.png" loading="lazy"></p>
<h1 id="6-安装-debugbar-工具条"><a href="#6-安装-debugbar-工具条" class="headerlink" title="6.安装 debugbar 工具条"></a>6.安装 debugbar 工具条</h1><p>（可选，开发时可以使用，上线时要去掉）</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070825126.png" loading="lazy"></p>
<p>注意：laravel&lt;5.5 使用<a href="https://github.com/barryvdh/laravel-debugbar/tree/2.4">https://github.com/barryvdh/laravel-debugbar/tree/2.4</a></p>
<p>添加提供者</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070826122.png" loading="lazy"><br>debugbar 效果</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070826799.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel-缓存操作</title>
    <url>/2020/08/31/%E5%90%8E%E7%AB%AF/PHP/Laravel%E7%BC%93%E5%AD%98%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>Laravel-缓存操作，设置、获取、删除</p>
<span id="more"></span>

<p>主要方法：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">Cache</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token literal-property property">Cache</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token literal-property property">Cache</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token literal-property property">Cache</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">forever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token literal-property property">Cache</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">forget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token literal-property property">Cache</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>系统默认是使用文件缓存，其缓存文件的存储位置位于stroage&#x2F;framework&#x2F;cache&#x2F;data.</p>
<h1 id="设置缓存"><a href="#设置缓存" class="headerlink" title="设置缓存"></a>设置缓存</h1><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">Cache</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">,</span>$minutes<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>注意：如果已经存在，则直接覆盖原来的值，有效期必须设置，单位是分钟</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">Cache</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">,</span>$minutes<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>add方法只会在缓存不存在的情况下添加到数据到缓存，如果数据被成功添加到缓存则返回true，否则，返回false</p>
<p>永久存储数据：fover 方法用于持久化存储数据到缓存，这些值必须通过forget方法手动从缓存中移除</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">Cache</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">fover</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">)</span></code></pre>

<p> 1.创建路由<br><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070831563.png" loading="lazy"><br>2.创建test19方法实现相关代码<br>如果要使用cache提供的方法，则需要先引入</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070831569.png" loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070832487.png" loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070831017.png" loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070831574.png" loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070831597.png" loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070831363.png" loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070831479.png" loading="lazy"></p>
<h1 id="获取缓存"><a href="#获取缓存" class="headerlink" title="获取缓存"></a>获取缓存</h1><p> Cache 门面 get 方法用于从缓存中获取缓存项，如果缓存项不存在，返回null。如果需要的话，可以传递第二个参数到get方法指定缓存项不存在时返回的自定义默认值：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">$value <span class="token operator">=</span> Cache<span class="token operator">:</span><span class="token operator">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">//获取指定的 key 值</span>
$value <span class="token operator">=</span> Cache<span class="token operator">:</span><span class="token operator">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span><span class="token string">'defaule'</span><span class="token punctuation">)</span> <span class="token comment">//获取指定的 key 值，如果不存在，则使用默认值</span></code></pre>

<p>可以传递一个匿名函数作为默认值，如果缓存项不存在的话闭包的结果将会被返回。传递匿名函数允许你可以从数据库或其他外部服务获取默认值：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">$value <span class="token operator">=</span> Cache<span class="token operator">:</span><span class="token operator">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token constant">DB</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>检查缓存项是否存在：has方法用于检查缓存项是否存在</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>Cache<span class="token operator">:</span><span class="token operator">:</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">//</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070831772.png" loading="lazy"></p>
<h1 id="删除存缓"><a href="#删除存缓" class="headerlink" title="删除存缓"></a>删除存缓</h1><p>语法：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">$value <span class="token operator">=</span> Cache<span class="token operator">:</span><span class="token operator">:</span><span class="token function">pull</span><span class="token punctuation">(</span>“key”<span class="token punctuation">)</span><span class="token punctuation">;</span>从缓存中获取缓存项然后删除，如果缓存项不存在的话返回<span class="token keyword">null</span>，一般设置一次性的存储数据
<span class="token literal-property property">Cache</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">forget</span><span class="token punctuation">(</span>“key”<span class="token punctuation">)</span><span class="token punctuation">;</span>使用forget方法从缓存中移除缓存项数据
<span class="token literal-property property">Cache</span><span class="token operator">:</span><span class="token operator">:</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>使用flush方法清除所有存缓，并且删除对应的目录</code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础知识</title>
    <url>/2022/03/18/%E5%90%8E%E7%AB%AF/Java/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>Java 基础知识</p>
<span id="more"></span>

<h1 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>基本数据类型：</p>
<ul>
<li>整数类型：byte，short，int，long</li>
<li>浮点数类型：float，double</li>
<li>字符类型：char</li>
<li>布尔类型：boolean</li>
</ul>
<p>除了上述基本类型的变量，剩下的都是引用类型。引用类型最常用的就是<code>String</code>字符串。</p>
<p>使用<code>final</code>修饰符定义常量。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//  整数类型：byte，short，int，long</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>
<span class="token comment">//  浮点数类型：float，double</span>
    <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">4.52f</span><span class="token punctuation">;</span>  <span class="token comment">//  需要加上f后缀</span>
<span class="token comment">//  字符类型：char</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span> <span class="token comment">//  单引号，单个字符</span>
<span class="token comment">//  布尔类型：boolean</span>
    <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment">//  引用类型</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token comment">//  常量</span>
    <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span></code></pre>

<h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><p><strong>break</strong></p>
<p>在循环过程中，可以使用<code>break</code>语句跳出当前循环。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    sum <span class="token operator">=</span> sum <span class="token operator">+</span>i<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>注意：<code>brreak</code>只会跳出自己所在的循环。</p>
</blockquote>
<p><strong>continue</strong></p>
<p><code>break</code>会跳出当前循环，也就是整个循环都不会执行了。而<code>continue</code>则是提前结束本次循环，直接继续执行下次循环。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    sum <span class="token operator">=</span> sum <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//99</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>在多层嵌套的循环中，<code>continue</code>语句同样是结束本次自己所在的循环。</p>
</blockquote>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><p>定义一个数组类型的变量，使用数组类型“类型[]”，Java的数组有几个特点：</p>
<ul>
<li>数组所有元素初始化为默认值，整型都是<code>0</code>，浮点型是<code>0.0</code>，布尔型是<code>false</code>；</li>
<li>数组一旦创建后，大小就不可改变。</li>
</ul>
<p>访问元素，需要使用索引</p>
<p>修改元素，使用赋值语句，<code>ns[0]=1</code></p>
<p>获取数组大小，<code>数组变量.length</code></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">68</span><span class="token punctuation">;</span>
ns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">79</span><span class="token punctuation">;</span>
ns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">91</span><span class="token punctuation">;</span>
ns<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">85</span><span class="token punctuation">;</span>
ns<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">62</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ns<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>可以在定义数组时直接指定初始化的元素，这样就不必写出数组大小，而是由编译器自动推算数组大小</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ns2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4</span></code></pre>

<blockquote>
<p>简写声明数组：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
</blockquote>
<p>注意数组是引用类型，并且数组大小不可变</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">62</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
ns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ns<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span></code></pre>

<p>对于数组<code>ns</code>来说，执行<code>ns = new int[] &#123; 68, 79, 91, 85, 62 &#125;;</code>时，它指向一个5个元素的数组，执行<code>ns = new int[] &#123; 1, 2, 3 &#125;;</code>时，它指向一个新的3个元素的数组。</p>
<p>但是，原有的5个元素的数组并没有改变，只是无法通过变量<code>ns</code>引用到它们而已。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070858858.png" loading="lazy"></p>
<p><strong>字符串数组</strong></p>
<p>关于s是“111”还是“444”</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"111"</span><span class="token punctuation">,</span><span class="token string">"222"</span><span class="token punctuation">,</span><span class="token string">"333"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"444"</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>图解：</p>
<p><code>String[] names=&#123;&quot;111&quot;,&quot;222&quot;,&quot;333&quot;&#125;;</code></p>
<p>数组为引用类型，每一个索引存储的都是实际内容在内存中的地址。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070858530.png" loading="lazy"></p>
<p><code>String s = names[2];</code></p>
<p>字符串类型变量<code>s</code>是引用类型，实际上存储的是“333”的地址</p>
<p><img src="F:\8963repository\img\202112040148375.png" loading="lazy"></p>
<p><code>names[2] = &quot;444&quot;;</code></p>
<p>names索引2存储“444”实际在内存中地址为 <code>x04</code></p>
<p>变量s存储的地址指向未发生改变，因此s还是“333”</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070859655.png" loading="lazy"></p>
<p><strong>定义数组总结</strong></p>
<p>数组是同一数据类型的集合，数组一旦创建后，大小就不可变；</p>
<p>可以通过索引访问数组元素，但索引超出范围将报错；</p>
<p>数组元素可以是值类型（如int）或引用类型（如String），但数组本身是引用类型；</p>
<h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p>方法一：<code>for</code>循环</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>方法二：<code>for each</code>循环</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>ns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>打印数组内容：使用Java标准库提供的<code>Arrays.toString()</code></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>

<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>练习：</p>
<p>倒序打印数组</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>ns<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><p>冒泡排序算法</p>
<p>冒泡排序的特点是，每一轮循环后，最大的一个数被交换到末尾，因此，下一轮循环就可以“刨除”最后的数，每一轮循环都比上一轮循环的结束位置靠前一位。</p>
<p><a href="https://visualgo.net/zh/sorting">可视化冒泡排序</a></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前："</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ns<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>ns<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ns<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>ns<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">int</span> tem <span class="token operator">=</span> ns<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      ns<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ns<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      ns<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tem<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后："</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>Java的标准库已经内置了排序功能，我们只需要调用JDK提供的<code>Arrays.sort()</code>就可以排序：</p>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>二维数组就是数组的数组</p>
<p>打印一个二维数组，可以使用两层嵌套的for循环</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> n<span class="token operator">:</span>ns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">:</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>打印二维数组还可以使用Java标准库的<code>Arrays.deepToString()</code>：（推荐）</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="三维数组"><a href="#三维数组" class="headerlink" title="三维数组"></a>三维数组</h3><p>三维数组就是二维数组的数组。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<p><strong>练习</strong></p>
<p>使用二维数组可以表示一组学生的各科成绩，请计算所有学生的平均分：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#123;</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">91</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">64</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">60</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">85</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> average <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>scores<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    average<span class="token operator">+=</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    num<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
average <span class="token operator">=</span> average<span class="token operator">/</span>num<span class="token punctuation">;</span>
<span class="token class-name">Systrintln</span><span class="token punctuation">(</span>average<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p><code>List</code>是最基础的一种集合：它是一种有序列表。</p>
<p><code>List</code>的行为和数组几乎完全相同：<code>List</code>内部按照放入元素的先后顺序存放，每个元素都可以通过索引确定自己的位置，<code>List</code>的索引和数组一样，从<code>0</code>开始。</p>
<p><code>List&lt;E&gt;</code>主要的接口方法：</p>
<ul>
<li>在末尾添加一个元素：<code>boolean add(E e)</code></li>
<li>在指定索引添加一个元素：<code>boolean add(int index, E e)</code></li>
<li>删除指定索引的元素：<code>E remove(int index)</code></li>
<li>删除某个元素：<code>boolean remove(Object e)</code></li>
<li>获取指定索引的元素：<code>E get(int index)</code></li>
<li>获取链表大小（包含元素的个数）：<code>int size()</code></li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// size=1</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// size=2</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 允许重复添加元素，size=3</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p><code>Map</code>是键值（key-value）映射表的数据结构，能高效通过<code>key</code>快速查找<code>value</code>（元素）</p>
<p>操作</p>
<pre class="language-none"><code class="language-none">Map&lt;String, List&gt; map &#x3D; new HashMap&lt;&gt;();</code></pre>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面向对象</title>
    <url>/2022/03/18/%E5%90%8E%E7%AB%AF/Java/JAVA%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>Java 面向对象</p>
<span id="more"></span>

<h1 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h1><p>面向对象编程，是一种通过对象的方式，把现实世界映射到计算机模型的一种编程方法。</p>
<h2 id="class-x2F-instance"><a href="#class-x2F-instance" class="headerlink" title="class&#x2F;instance"></a>class&#x2F;instance</h2><p>class是一种对象模版，它定义了如何创建实例，因此，class本身就是一种数据类型，而instance是对象实例，instance是根据class创建的实例，可以创建多个instance，每个instance类型相同，但各自属性可能不相同。</p>
<p><strong>定义Class</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>通过<code>class</code>，把一组数据汇集到一个对象上，实现了数据封装。</p>
<p><code>public</code>是用来修饰字段的，它表示这个字段可以被外部访问。</p>
<p><strong>创建实例</strong></p>
<p>使用<code>new</code>操作符根据对象模板创建出对象实例。需要定义一个引用类型变量指向这个实例。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">class_instance_01</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">String<span class="token punctuation">[</span><span class="token punctuation">]</span> args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">;</span>
    p1<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>
    Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p2<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"小红"</span><span class="token punctuation">;</span>
    p2<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> int age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>注意：一个Java源文件可以包含多个类的定义，但只能定义一个public类，且public类名必须与文件名一致。如果要定义多个public类，必须拆到多个Java源文件中。</p>
</blockquote>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>直接把<code>field</code>用<code>public</code>暴露给外部可能会破坏封装性，使用<code>private</code>修饰<code>field</code>，拒绝外部访问，通过方法去操作类私有的<code>field</code>。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> func_02 <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>虽然外部代码不能直接修改<code>private</code>字段，但是，外部代码可以调用方法<code>setName()</code>和<code>setAge()</code>来间接修改<code>private</code>字段。</p>
<p>这样的好处是，我们可以在方法内部检查参数</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> age<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//      抛出这个异常说明方法传入一个非法的或者不合适的参数。</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"年龄输入错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>一个类通过定义方法，就可以给外部代码暴露一些操作的接口，同时，内部自己保证逻辑一致性。</p>
<p><strong>定义方法</strong></p>
<pre class="language-none"><code class="language-none">修饰符 方法返回类型 方法名(方法参数列表) &#123;
    若干方法语句;
    return 方法返回值;
&#125;</code></pre>

<p>方法返回值通过<code>return</code>语句实现，如果没有返回值，返回类型设置为<code>void</code>，可以省略<code>return</code>。</p>
<p><strong>private方法</strong></p>
<p><code>private</code>方法不允许外部调用，那我们定义<code>private</code>方法有什么用？</p>
<p>定义<code>private</code>方法的理由是内部方法是可以调用<code>private</code>方法的。</p>
<p><strong>this变量</strong></p>
<p>在方法内部，可以使用一个隐含的变量<code>this</code>，它始终指向当前实例。如果没有命名冲突，可以省略<code>this</code>。</p>
<p>但是，如果有局部变量和字段重名，那么局部变量优先级更高，就必须加上<code>this</code></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment">// 前面的this不可少，少了就变成局部变量name了</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><strong>方法参数</strong></p>
<p>方法可以包含0个或任意个参数。方法参数用于接收传递给方法的变量值。调用方法时，必须严格按照参数的定义一一传递。</p>
<p><strong>可变参数</strong></p>
<p>可变参数用<code>类型...</code>定义，可变参数相当于数组类型：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNames</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> names<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>names <span class="token operator">=</span> names<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><strong>参数绑定</strong></p>
<p>调用方把参数传递给实例方法时，调用时传递的值会按参数位置一一绑定。</p>
<p>基本类型参数的传递，是调用方值的复制。双方各自的后续修改，互不影响。</p>
<p>引用类型参数的传递，调用方的变量，和接收方的参数变量，指向的是同一个对象。双方任意一方对这个对象的修改，都会影响对方（因为指向同一个对象嘛）。</p>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造方法可以在创建对象实例时就把内部字段全部初始化为合适的值。</p>
<p>创建实例的时候，实际上是通过构造方法来初始化实例的。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> constructed_05 <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">Person5</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Person5</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>关于构造方法：</p>
<ul>
<li>构造方法的名称就是类名。</li>
<li>构造方法的参数没有限制。</li>
<li>构造方法没有返回值（也没有<code>void</code>），调用构造方法，必须用<code>new</code>操作符。</li>
</ul>
<h3 id="默认构造方法"><a href="#默认构造方法" class="headerlink" title="默认构造方法"></a>默认构造方法</h3><p>任何<code>class</code>都有构造方法，如果一个类没有定义构造方法，编译器会自动为我们生成一个默认构造方法，它没有参数，也没有执行语句。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>如果我们自定义了一个构造方法，那么，编译器就<em>不再</em>自动创建默认构造方法。</p>
<p>如果既要能使用带参数的构造方法，又想保留不带参数的构造方法，那么只能把两个构造方法都定义出来</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> constructed_05 <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">Person5</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Person5</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>没有在构造方法中初始化字段时，引用类型的字段默认是<code>null</code>，数值类型的字段用默认值，<code>int</code>类型默认值是<code>0</code>，布尔类型默认值是<code>false</code>，也可以对字段直接进行初始化</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span><span class="token comment">// 默认初始化为null</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 默认初始化为0</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在Java中，创建对象实例的时候，按照如下顺序进行初始化：</p>
<ol>
<li>先初始化字段，例如，<code>int age = 10;</code>表示字段初始化为<code>10</code>，<code>String name;</code>表示引用类型字段默认初始化为<code>null</code>；</li>
<li>执行构造方法的代码进行初始化。</li>
</ol>
<p>因此，构造方法的代码由于后运行，所以字段的初试值由构造方法确定各。</p>
<h3 id="多构造方法"><a href="#多构造方法" class="headerlink" title="多构造方法"></a>多构造方法</h3><p>可以定义多个构造方法，在通过<code>new</code>操作符调用的时候，编译器通过构造方法的参数数量、位置和类型自动区分：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> constructed_05 <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">Person5</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Person5</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>p2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Person5</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>当两个构造函数的参数相同时，会根据参数类型来确认调用的构造函数，当两个构造函数参数的数量、类型一致时会报错。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person5</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person5</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Person5</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>一个构造方法可以调用其他构造方法，这样做的目的是便于代码复用。调用其他构造方法的语法是<code>this(…)</code>：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person5</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小明18</span>
<span class="token keyword">class</span> <span class="token class-name">Person5</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用Person5(String name,int age)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用Person5(String name)</span>
  <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><strong>总结</strong></p>
<p>实例在创建时通过<code>new</code>操作符会调用其对应的构造方法，构造方法用于初始化实例；</p>
<p>没有定义构造方法时，编译器会自动创建一个默认的无参数构造方法；</p>
<p>可以定义多个构造方法，编译器根据参数自动判断；</p>
<p>可以在一个构造方法内部调用另一个构造方法，便于代码复用。</p>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>在一个类中，我们可以定义多个方法。如果有一系列方法，它们的功能都是类似的，只有参数有所不同，那么，可以把这一组方法名做成<strong>同名方法</strong>。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> ffcz_06 <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">Hello</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    h<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    h<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    h<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>age<span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi, "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这种方法名相同，但各自的参数不同，称为方法重载（<code>Overload</code>）。</p>
<p>注意：方法重载的返回值类型通常都是相同的。</p>
<p>方法重载的目的是，功能类似的方法使用同一名字，更容易记住，因此，调用起来更简单。</p>
<p>举个例子，<code>String</code>类提供了多个重载方法<code>indexOf()</code>，可以查找子串：</p>
<ul>
<li><code>int indexOf(int ch)</code>：根据字符的Unicode码查找；</li>
<li><code>int indexOf(String str)</code>：根据字符串查找；</li>
<li><code>int indexOf(int ch, int fromIndex)</code>：根据字符查找，但指定起始位置；</li>
<li><code>int indexOf(String str, int fromIndex)</code>根据字符串查找，但指定起始位置。</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>如何在之前<code>Person</code>类的基础上，添加一个<code>score</code>字段及其方法，成为新的<code>Student</code>类。</p>
<p>继承是面向对象编程中非常强大的一种机制，它首先可以复用代码。</p>
<p>当我们让<code>Student</code>从<code>Person</code>继承时，<code>Student</code>就获得了<code>Person</code>的所有功能，我们只需要为<code>Student</code>编写新增的功能。</p>
<p>使用<code>extends</code>关键字来实现继承</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> extends_class_07 <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s1<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>s1<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Person07</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> score<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>通过继承，<code>Student</code>只需要编写额外的功能，不再需要重复代码。</p>
<blockquote>
<p> 注意：子类自动获得了父类的所有字段，严禁定义与父类重名的字段！</p>
</blockquote>
<p>在面向对象（OOP）的术语中，我们把<code>Person</code>称为超类（super class），父类（parent class），基类（base class），把<code>Student</code>称为子类（subclass），扩展类（extended class）。</p>
<blockquote>
<p>超类 &#x3D; 父类 &#x3D; 基类</p>
<p>子类 &#x3D; 扩展类</p>
</blockquote>
<h3 id="继承树"><a href="#继承树" class="headerlink" title="继承树"></a>继承树</h3><p>注意到我们在定义<code>Person</code>的时候，没有写<code>extends</code>。在Java中，没有明确写<code>extends</code>的类，编译器会自动加上<code>extends Object</code>。所以，任何类，除了<code>Object</code>，都会继承自某个类。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070859592.png" loading="lazy"></p>
<p>Java只允许一个class继承自一个类，因此，一个类有且仅有一个父类。只有<code>Object</code>特殊，它没有父类。</p>
<h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><p>继承有个特点，就是子类无法访问父类的<code>private</code>字段或者<code>private</code>方法。例如，<code>Student</code>类就无法访问<code>Person</code>类的<code>name</code>和<code>age</code>字段</p>
<p>将父类的字段属性改为<code>protected</code>就可以让子类访问</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">protected</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>&#x3D;&#x3D;<strong>protected</strong>关键字可以把字段和方法的访问权限控制在继承树内部&#x3D;&#x3D;</p>
<h3 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h3><p><code>super</code>关键字表示父类（超类）。子类引用父类的字段时，可以用<code>super.fieldName</code>。</p>
<p>其实，这里使用<code>this.name</code>，或者<code>name</code>都是一样的</p>
<p>但是当父类的构造函数时，就必须使用<code>super()</code>，还需要使用<code>super()</code>向父类构造函数传递参数。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">protected</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person07</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> score<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> score<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="阻止继承"><a href="#阻止继承" class="headerlink" title="阻止继承"></a>阻止继承</h3><blockquote>
<p>正常情况下，只要某个class没有<code>final</code>修饰符，那么任何类都可以从该class继承。从Java 15开始，允许使用<code>sealed</code>修饰class，并通过<code>permits</code>明确写出能够从该class继承的子类名称。</p>
</blockquote>
<p>当定义一个<code>Shape</code>类：</p>
<ul>
<li>只允许指定的3个类继承它（Rect, Circle, Triangle）</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token keyword">permits</span> <span class="token class-name">Rect</span><span class="token punctuation">,</span> <span class="token class-name">Circle</span><span class="token punctuation">,</span> <span class="token class-name">Triangle</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>
<span class="token comment">// 正确</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Rect</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>
<span class="token comment">// 错误</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Ellipse</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>
<span class="token comment">// Compile error: class is not allowed to extend sealed class: Shape</span></code></pre>

<h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p><code>Student</code>是从<code>Person</code>继承下来的，引用类型为<code>Person</code>的变量，能指向<code>Student</code>类型的实例</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>

<p>把一个子类类型安全地变为父类类型的赋值，被称为向上转型（upcasting）。</p>
<p>向上转型实际上是把一个子类型安全地变为更加抽象的父类型</p>
<h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>把一个父类类型强制转型为子类类型，就是向下转型（downcasting）。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// upcasting, ok</span>
<span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> p1<span class="token punctuation">;</span> <span class="token comment">// ok</span>
<span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> p2<span class="token punctuation">;</span> <span class="token comment">// runtime error! ClassCastException!</span></code></pre>

<p>Java提供了<code>instanceof</code>操作符，可以先判断一个实例究竟是不是某种类型：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token class-name">Student</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre>

<p><code>instanceof</code>实际上判断一个变量所指向的实例是否是指定类型，或者这个类型的子类。如果一个引用变量为<code>null</code>，那么对任何<code>instanceof</code>的判断都为<code>false</code>。</p>
<p>利用<code>instanceof</code>，在向下转型前可以先判断：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 只有判断成功才会向下转型:</span>
    <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> p<span class="token punctuation">;</span> <span class="token comment">// 一定会成功</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>继承是面向对象编程的一种强大的代码复用方式；</li>
<li>Java只允许单继承，所有类最终的根类是<code>Object</code>；</li>
<li><code>protected</code>允许子类访问父类的字段和方法；</li>
<li>子类的构造方法可以通过<code>super()</code>调用父类的构造方法；</li>
<li>可以安全地向上转型为更抽象的类型；</li>
<li>可以强制向下转型，最好借助<code>instanceof</code>判断；</li>
<li>子类和父类的关系是is，has关系不能用继承。</li>
</ul>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>在继承关系中，子类如果定义了一个与父类方法签名完全相同的方法，被称为覆写（Override）。</p>
<p>如：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person.run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student.run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>Override和Overload不同的是，如果方法签名不同，就是Overload，Overload方法是一个新方法；</p>
<p>如果方法签名相同，并且返回值也相同，就是<code>Override</code>。</p>
<p>加上<code>@Override</code>可以让编译器帮助检查是否进行了正确的覆写。</p>
<blockquote>
<p> 注意：方法名相同，方法参数相同，但方法返回值不同，也是不同的方法。在Java程序中，出现这种情况，编译器会报错。</p>
</blockquote>
<p>Java的实例方法调用是基于运行时的实际类型的动态调用，而非变量的声明类型。这个非常重要的特性在面向对象编程中称之为&#x3D;&#x3D;多态&#x3D;&#x3D;。它的英文拼写非常复杂：Polymorphic。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> overrided_08 <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Person08</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Person08</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person.run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Student08</span> <span class="token keyword">extends</span> <span class="token class-name">Person08</span><span class="token punctuation">&#123;</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student.run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<p>&#x3D;&#x3D;多态&#x3D;&#x3D;是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。</p>
<p>多态这种不确定性的方法调用，究竟有什么作用？</p>
<p>假设我们定义一种收入，需要给它报税，那么先定义一个<code>Income</code>类：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> overrided_08 <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Income</span><span class="token punctuation">[</span><span class="token punctuation">]</span> incomes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Income</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">Income</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">Salary</span><span class="token punctuation">(</span><span class="token number">7500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">StateCouncilSpecialAllowance</span><span class="token punctuation">(</span><span class="token number">15000</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">totalTax</span><span class="token punctuation">(</span>incomes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">totalTax</span><span class="token punctuation">(</span><span class="token class-name">Income</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> incomes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Income</span> income<span class="token operator">:</span> incomes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      total <span class="token operator">=</span> total <span class="token operator">+</span> income<span class="token punctuation">.</span><span class="token function">getTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//税收</span>
<span class="token keyword">class</span> <span class="token class-name">Income</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">protected</span> <span class="token keyword">double</span> income<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">Income</span><span class="token punctuation">(</span><span class="token keyword">double</span> income<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>income <span class="token operator">=</span> income<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> income <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span> <span class="token comment">// 税率10%</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//减去基数</span>
<span class="token keyword">class</span> <span class="token class-name">Salary</span> <span class="token keyword">extends</span> <span class="token class-name">Income</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token class-name">Salary</span><span class="token punctuation">(</span><span class="token keyword">double</span> income<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>income<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>income<span class="token operator">&lt;=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>income <span class="token operator">-</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.2</span><span class="token punctuation">;</span><span class="token comment">// 多于5000部分收20%税率</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//津贴</span>
<span class="token keyword">class</span> <span class="token class-name">StateCouncilSpecialAllowance</span> <span class="token keyword">extends</span> <span class="token class-name">Income</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token class-name">StateCouncilSpecialAllowance</span><span class="token punctuation">(</span><span class="token keyword">double</span> income<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>income<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>可见，多态具有一个非常强大的功能，就是允许添加更多类型的子类实现功能扩展，却不需要修改基于父类的代码。</p>
<h3 id="覆写Object方法"><a href="#覆写Object方法" class="headerlink" title="覆写Object方法"></a>覆写Object方法</h3><p>因为所有的<code>class</code>最终都继承自<code>Object</code>，而<code>Object</code>定义了几个重要的方法：</p>
<ul>
<li><code>toString()</code>：把instance输出为<code>String</code>；</li>
<li><code>equals()</code>：判断两个instance是否逻辑相等；</li>
<li><code>hashCode()</code>：计算一个instance的哈希值。</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// 显示更有意义的字符串:</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"Person:name="</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 比较是否相等:</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 当且仅当o为Person类型:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
            <span class="token comment">// 并且name字段相同时，返回true:</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 计算hash:</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="调用super"><a href="#调用super" class="headerlink" title="调用super()"></a>调用super()</h3><p>在子类的覆写方法中，如果要调用父类的被覆写的方法，可以通过<code>super</code>来调用。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 调用父类的hello()方法:</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>继承可以允许子类覆写父类的方法。如果一个父类不允许子类对它的某个方法进行覆写，可以把该方法标记为<code>final</code>。</p>
<p>用<code>final</code>修饰的方法不能被<code>Override</code></p>
<p>类的实例字段用<code>final</code>修饰的字段在初始化后不能被修改,可以在构造方法中初始化final字段</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  	<span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// compile error: 不允许覆写</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>final</code>修饰符有多种作用：</p>
<ul>
<li><code>final</code>修饰的方法可以阻止被覆写；</li>
<li><code>final</code>修饰的class可以阻止被继承；</li>
<li><code>final</code>修饰的field必须在创建对象时初始化，随后不可修改。</li>
</ul>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>如果父类的方法本身不需要实现任何功能，仅仅是为了定义方法签名，目的是让子类去覆写它，那么，可以把父类的方法声明为抽象方法.</p>
<p>把一个方法声明为<code>abstract</code>，表示它是一个抽象方法，本身没有实现任何方法语句。</p>
<p>因为这个抽象方法本身是无法执行的，所以，<code>Person</code>类也无法被实例化。必须把<code>Person</code>类本身也声明为<code>abstract</code>，才能正确编译它</p>
<pre class="language-Java" data-language="Java"><code class="language-Java">abstract class Person &#123;
    public abstract void run();
&#125;</code></pre>

<p>无法实例化的抽象类有什么用？</p>
<p>因为抽象类本身被设计成只能用于被继承，因此，抽象类可以强迫子类实现其定义的抽象方法，否则编译会报错。因此，<strong>抽象方法实际上相当于定义了“规范”</strong>。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person11</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Student11</span> <span class="token keyword">extends</span> <span class="token class-name">Person11</span><span class="token punctuation">&#123;</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run!run!run!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="面向抽象编程"><a href="#面向抽象编程" class="headerlink" title="面向抽象编程"></a>面向抽象编程</h3><p>当我们定义了抽象类<code>Person</code>，以及具体的<code>Student</code>、<code>Teacher</code>子类的时候，我们可以通过抽象类<code>Person</code>类型去引用具体的子类的实例，我们对其进行方法调用，并不关心<code>Person</code>类型变量的具体子类型。</p>
<p>这种尽量引用高层类型，避免引用实际子类型的方式，称之为面向抽象编程。</p>
<p>面向抽象编程的本质就是：</p>
<ul>
<li>上层代码只定义规范（例如：<code>abstract class Person</code>）；</li>
<li>不需要子类就可以实现业务逻辑（正常编译）；</li>
<li>具体的业务逻辑由不同的子类实现，调用者并不关心。</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>用抽象类给一个有工资收入和稿费收入的小伙伴算税。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> abstract_lx_12 <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Gzsr</span> gz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gzsr</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Gaof</span> gf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gaof</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gz<span class="token punctuation">.</span><span class="token function">getTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gf<span class="token punctuation">.</span><span class="token function">getTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Inconme</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">protected</span> <span class="token keyword">double</span> income<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Inconme</span><span class="token punctuation">(</span><span class="token keyword">double</span> income<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>income <span class="token operator">=</span> income<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">getTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Gzsr</span> <span class="token keyword">extends</span> <span class="token class-name">Inconme</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token class-name">Gzsr</span><span class="token punctuation">(</span><span class="token keyword">double</span> income<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>income<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> income <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Gaof</span> <span class="token keyword">extends</span> <span class="token class-name">Inconme</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token class-name">Gaof</span><span class="token punctuation">(</span><span class="token keyword">double</span> income<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>income<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> income <span class="token operator">*</span> <span class="token number">0.05</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>在抽象类中，抽象方法本质上是定义接口规范：即规定高层类的接口，从而保证所有子类都有相同的接口实现，如果一个抽象类没有字段，所有方法全部都是抽象方法，就可以把该抽象类改写为接口：<code>interface</code>。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>所谓<code>interface</code>，就是比抽象类还要抽象的纯抽象接口，因为它连字段都不能有，接口定义的所有方法默认都是<code>public abstract</code>，所以这两个修饰符不需要写出来。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Person12</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Student12</span> <span class="token keyword">implements</span> <span class="token class-name">Person12</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Student12</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Run "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<p>一个类可以实现多个<code>interface</code></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 实现了两个interface</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="default-方法"><a href="#default-方法" class="headerlink" title="default 方法"></a>default 方法</h3><p>在接口中，可以定义<code>default</code>方法。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Person12</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token operator">+</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Student12</span> <span class="token keyword">implements</span> <span class="token class-name">Person12</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Student12</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>注意区分术语：</p>
<p>Java的接口特指<code>interface</code>的定义，表示一个接口类型和一组方法签名，而编程接口泛指接口规范，如方法签名，数据格式，网络协议等</p>
<p>抽象类和接口的对比如下：</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">abstract class</th>
<th align="left">interface</th>
</tr>
</thead>
<tbody><tr>
<td align="left">继承</td>
<td align="left">只能extends一个class</td>
<td align="left">可以implements多个interface</td>
</tr>
<tr>
<td align="left">字段</td>
<td align="left">可以定义实例字段</td>
<td align="left">不能定义实例字段</td>
</tr>
<tr>
<td align="left">抽象方法</td>
<td align="left">可以定义抽象方法</td>
<td align="left">可以定义抽象方法</td>
</tr>
<tr>
<td align="left">非抽象方法</td>
<td align="left">可以定义非抽象方法</td>
<td align="left">可以定义default方法</td>
</tr>
</tbody></table>
<h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><p>一个<code>interface</code>可以继承自另一个<code>interface</code>。<code>interface</code>继承自<code>interface</code>使用<code>extends</code>，它相当于扩展了接口的方法。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Hello</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Hello</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>公共逻辑适合放在<code>abstract class</code>中，具体逻辑放到各个子类，而接口层次代表抽象程度。可以参考Java的集合类定义的一组接口、抽象类以及具体子类的继承关系：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070859072.png" loading="lazy"></p>
<h2 id="静态字段和静态方法"><a href="#静态字段和静态方法" class="headerlink" title="静态字段和静态方法"></a>静态字段和静态方法</h2><h3 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h3><p>在一个<code>class</code>中定义的字段，我们称之为实例字段。</p>
<p>用<code>static</code>修饰的字段，称为静态字段：<code>static field</code>。</p>
<p>实例字段在每个实例中都有自己的一个独立“空间”，但是静态字段只有一个共享“空间”，所有实例都会共享该字段。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> static_13 <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Person13</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person13</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Person13</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person13</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p2<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Person13</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person13</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>对于静态字段，无论修改哪个实例的静态字段，效果都是一样的：所有实例的静态字段都被修改了，原因是静态字段并不属于实例</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070915600.png" loading="lazy"></p>
<p>推荐用类名来访问静态字段。可以把静态字段理解为描述<code>class</code>本身的字段（非实例字段）。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>用<code>static</code>修饰的方法称为静态方法。</p>
<p>调用实例方法必须通过一个实例变量，而调用静态方法则不需要实例变量，通过类名就可以调用。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        number <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>静态方法属于<code>class</code>而不属于实例，因此，静态方法内部，无法访问<code>this</code>变量，也无法访问实例字段，它只能访问静态字段。</p>
<p>静态方法经常用于工具类。例如：</p>
<ul>
<li>Arrays.sort()</li>
<li>Math.random()</li>
</ul>
<p>静态方法也经常用于辅助方法。注意到Java程序的入口<code>main()</code>也是静态方法。</p>
<h3 id="接口的静态字段"><a href="#接口的静态字段" class="headerlink" title="接口的静态字段"></a>接口的静态字段</h3><p>因为<code>interface</code>是一个纯抽象类，所以它不能定义实例字段。但是，<code>interface</code>是可以有静态字段的，并且静态字段必须为<code>final</code>类型</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MALE</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">FEMALE</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 简写</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 编译器会自动加上public statc final:</span>
    <span class="token keyword">int</span> <span class="token constant">MALE</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">FEMALE</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>在Java中使用<code>package</code>来解决名字冲突。</p>
<p>Java定义了一种名字空间，称之为包：<code>package</code>。一个类总是属于某个包，类名（比如<code>Person</code>）只是一个简写，真正的完整类名是<code>包名.类名</code>。</p>
<p>没有定义包名的<code>class</code>，它使用的是默认包，非常容易引起名字冲突</p>
<blockquote>
<p>注意：包没有父子关系。java.util和java.util.zip是不同的包，两者没有任何继承关系。</p>
</blockquote>
<h3 id="包作用域"><a href="#包作用域" class="headerlink" title="包作用域"></a>包作用域</h3><p>位于同一个包的类，可以访问包作用域的字段和方法。不用<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法就是包作用域</p>
<p><code>Person</code>类定义在<code>hello</code>包下面：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以调用，因为Main和Person在同一个包</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 包作用域:</span>
    <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>在一个<code>class</code>中，我们总会引用其他的<code>class</code>。</p>
<p>在写<code>import</code>的时候，可以使用<code>*</code>，表示把这个包下面的所有<code>class</code>都导入进来（但不包括子包的<code>class</code>）</p>
<p><code>import static</code>的语法，它可以导入可以导入一个类的静态字段和静态方法：</p>
<p>Java编译器最终编译出的<code>.class</code>文件只使用<em>完整类名</em>，因此，在代码中，当编译器遇到一个<code>class</code>名称时：</p>
<ul>
<li>如果是完整类名，就直接根据完整类名查找这个<code>class</code>；</li>
<li>如果是简单类名，按下面的顺序依次查找：<ul>
<li>查找当前<code>package</code>是否存在这个<code>class</code>；</li>
<li>查找<code>import</code>的包是否包含这个<code>class</code>；</li>
<li>查找<code>java.lang</code>包是否包含这个<code>class</code>。</li>
</ul>
</li>
</ul>
<p>如果按照上面的规则还无法确定类名，则编译报错。</p>
<p>如果有两个<code>class</code>名称相同，例如，<code>mr.jun.Arrays</code>和<code>java.util.Arrays</code>，那么只能<code>import</code>其中一个，另一个必须写完整类名。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Java内建的<code>package</code>机制是为了避免<code>class</code>命名冲突；</p>
<p>JDK的核心类使用<code>java.lang</code>包，编译器会自动导入；</p>
<p>JDK的其它常用类定义在<code>java.util.*</code>，<code>java.math.*</code>，<code>java.text.*</code>，……；</p>
<p>包名推荐使用倒置的域名，例如<code>org.apache</code>。</p>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>我们经常看到<code>public</code>、<code>protected</code>、<code>private</code>这些修饰符。在Java中，这些修饰符可以用来限定访问作用域。</p>
<p><strong>public</strong></p>
<p>定义为<code>public</code>的<code>class</code>、<code>interface</code>可以被其他任何类访问：</p>
<p><strong>private</strong></p>
<p>定义为<code>private</code>的<code>field</code>、<code>method</code>无法被其他类访问</p>
<p><code>private</code>访问权限被限定在<code>class</code>的内部，而且与方法声明顺序无关，建议把<code>private</code>的声明放到最后。</p>
<p>由于Java支持嵌套类，如果一个类内部还定义了嵌套类，那么，嵌套类拥有访问<code>private</code>的权限。</p>
<p><strong>protected</strong></p>
<p><code>protected</code>作用于继承关系。定义为<code>protected</code>的字段和方法可以被子类访问，以及子类的子类。</p>
<p>包作用域是指一个类允许访问同一个<code>package</code>的没有<code>public</code>、<code>private</code>修饰的<code>class</code>，以及没有<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">abc</span><span class="token punctuation">;</span>
<span class="token comment">// package权限的类:</span>
<span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// package权限的方法:</span>
    <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>只要在同一个包，就可以访问<code>package</code>权限的<code>class</code>、<code>field</code>和<code>method</code></p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>在方法内部定义的变量称为局部变量，局部变量作用域从变量声明处开始到对应的块结束。方法参数也是局部变量。</p>
<h3 id="final-1"><a href="#final-1" class="headerlink" title="final"></a>final</h3><p>Java还提供了一个<code>final</code>修饰符。<code>final</code>与访问权限不冲突</p>
<ul>
<li>用<code>final</code>修饰<code>class</code>可以阻止被继承</li>
<li>用<code>final</code>修饰<code>method</code>可以阻止被子类覆写</li>
<li>用<code>final</code>修饰<code>field</code>可以阻止被重新赋值</li>
<li>用<code>final</code>修饰局部变量可以阻止被重新赋值</li>
</ul>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>如果不确定是否需要<code>public</code>，就不声明为<code>public</code>，即尽可能少地暴露对外的字段和方法。</p>
<p>把方法定义为<code>package</code>权限有助于测试，因为测试类和被测试类只要位于同一个<code>package</code>，测试代码就可以访问被测试类的<code>package</code>权限方法。</p>
<p>一个<code>.java</code>文件只能包含一个<code>public</code>类，但可以包含多个非<code>public</code>类。如果有<code>public</code>类，文件名必须和<code>public</code>类的名字相同。</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>Java内建的访问权限包括<code>public</code>、<code>protected</code>、<code>private</code>和<code>package</code>权限；</p>
<p>Java在方法内部定义的变量是局部变量，局部变量的作用域从变量声明开始，到一个块结束；</p>
<p><code>final</code>修饰符不是访问权限，它可以修饰<code>class</code>、<code>field</code>和<code>method</code>；</p>
<p>一个<code>.java</code>文件只能包含一个<code>public</code>类，但可以包含多个非<code>public</code>类。</p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>被定义在另一个类的内部，所以称为内部类（Nested Class）。Java的内部类分为好几种</p>
<h3 id="Inner-Class"><a href="#Inner-Class" class="headerlink" title="Inner Class"></a>Inner Class</h3><p>一个类定义在另一个类的内部，这个类就是Inner Class</p>
<pre class="language-none"><code class="language-none">class Outer &#123;
    class Inner &#123;
        &#x2F;&#x2F; 定义了一个Inner Class
    &#125;
&#125;</code></pre>

<p>与普通类有个最大的不同，就是Inner Class的实例不能单独存在，必须依附于一个Outer Class的实例</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Outer</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    inner<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>Inner Class还可以修改Outer Class的<code>private</code>字段</p>
<h3 id="Anonymous-Class"><a href="#Anonymous-Class" class="headerlink" title="Anonymous Class"></a>Anonymous Class</h3><p>还有一种定义Inner Class的方法，它不需要在Outer Class中明确地定义这个Class，而是在方法内部，通过匿名类（Anonymous Class）来定义。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot Excel操作</title>
    <url>/2023/01/18/%E5%90%8E%E7%AB%AF/Java/SpringBoot%20Excel%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>SpringBoot Excel操作</p>
<span id="more"></span>

<h1 id="poi"><a href="#poi" class="headerlink" title="poi"></a>poi</h1><p>依赖</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- excel --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.xmlunit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>xmlunit-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--    poi对于excel 2007的支持依赖--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--    poi对于excel 2007的支持依赖--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml-schemas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>

<p>entity</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>health<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">IdType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>activerecord<span class="token punctuation">.</span></span><span class="token class-name">Model</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableId</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableField</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">EqualsAndHashCode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span></span><span class="token class-name">Accessors</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * &lt;p>
 * 
 * &lt;/p>
 *
 * @author 8963
 * @since 2022-06-08
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"createDate"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createDate<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"stuId"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> stuId<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> national<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> school<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> grade<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> className<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> guardian<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> guardianTelephone<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> check_status<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span> createDate<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> stuId<span class="token punctuation">,</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">,</span> <span class="token class-name">String</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">,</span> <span class="token class-name">String</span> national<span class="token punctuation">,</span> <span class="token class-name">String</span> address<span class="token punctuation">,</span> <span class="token class-name">String</span> school<span class="token punctuation">,</span> <span class="token class-name">String</span> grade<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token class-name">String</span> guardian<span class="token punctuation">,</span> <span class="token class-name">String</span> guardianTelephone<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>createDate <span class="token operator">=</span> createDate<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stuId <span class="token operator">=</span> stuId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>national <span class="token operator">=</span> national<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> className<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>guardian <span class="token operator">=</span> guardian<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>guardianTelephone <span class="token operator">=</span> guardianTelephone<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span> createDate<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> stuId<span class="token punctuation">,</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">,</span> <span class="token class-name">String</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">,</span> <span class="token class-name">String</span> national<span class="token punctuation">,</span> <span class="token class-name">String</span> address<span class="token punctuation">,</span> <span class="token class-name">String</span> school<span class="token punctuation">,</span> <span class="token class-name">String</span> grade<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token class-name">String</span> guardian<span class="token punctuation">,</span> <span class="token class-name">String</span> guardianTelephone<span class="token punctuation">,</span><span class="token class-name">String</span> check_status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>createDate <span class="token operator">=</span> createDate<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stuId <span class="token operator">=</span> stuId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>national <span class="token operator">=</span> national<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> className<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>guardian <span class="token operator">=</span> guardian<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>guardianTelephone <span class="token operator">=</span> guardianTelephone<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>check_status <span class="token operator">=</span> check_status<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/** DecimalFormat 用法
         * https://www.jianshu.com/p/b3699d73142e
         * Integer.valueOf 返回的时包装类  Integer.parseInt() 返回的是int
         */</span>
        <span class="token comment">//因为传进来的args 的赋值是从1开始的</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stuId <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>national <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span>  args<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>guardian <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>guardianTelephone <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>controller</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"下载"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/studentDown"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downExcel</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"school"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> school<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">HSSFWorkbook</span> workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建HSSFWorkbook对象,  excel的文档对象</span>
        <span class="token class-name">HSSFSheet</span> sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"学生学籍表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//excel的表单</span>
        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>school<span class="token operator">!=</span><span class="token string">""</span><span class="token operator">&amp;&amp;</span> school<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"school"</span><span class="token punctuation">,</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> iStudentService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        List&lt;Student> list = iStudentService.list();</span>
        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">"StudentInfo.xls"</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> rowNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"学号"</span><span class="token punctuation">,</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span><span class="token string">"性别"</span><span class="token punctuation">,</span><span class="token string">"民族"</span><span class="token punctuation">,</span> <span class="token string">"学校"</span><span class="token punctuation">,</span> <span class="token string">"年级"</span><span class="token punctuation">,</span><span class="token string">"班级"</span><span class="token punctuation">,</span><span class="token string">"生日"</span><span class="token punctuation">,</span><span class="token string">"年龄"</span><span class="token punctuation">,</span><span class="token string">"家庭地址"</span><span class="token punctuation">,</span><span class="token string">"联系人"</span><span class="token punctuation">,</span><span class="token string">"联系人电话"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token comment">//headers表示excel表中第一行的表头</span>
        <span class="token class-name">HSSFRow</span> row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//在excel表中添加表头</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>headers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">HSSFCell</span> cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">HSSFRichTextString</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFRichTextString</span><span class="token punctuation">(</span>headers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//在表中存放查询到的数据放入对应的列</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">HSSFRow</span> row1 <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getStuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getNational</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getGuardian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            row1<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getGuardianTelephone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rowNum<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">flushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"导入"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Workbook</span> wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Sheet</span> sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最后一行的下标 :"</span> <span class="token operator">+</span> sheet<span class="token punctuation">.</span><span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rowNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> rowNum <span class="token operator">&lt;=</span> sheet<span class="token punctuation">.</span><span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> rowNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Row</span> row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据索引获取每一个行</span>
            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>row<span class="token punctuation">.</span><span class="token function">getLastCellNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cellNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cellNum <span class="token operator">&lt;</span> row<span class="token punctuation">.</span><span class="token function">getLastCellNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cellNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Cell</span> cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>cellNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token function">getCellValue</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
                values<span class="token punctuation">[</span>cellNum<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//3.批量保存用户</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> item<span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            item<span class="token punctuation">.</span><span class="token function">setCheck_status</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            item<span class="token punctuation">.</span><span class="token function">setCreateDate</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>iStudentService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token function">addStuUser</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"导入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token comment">//    添加学生用户</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addStuUser</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>student<span class="token punctuation">.</span><span class="token function">getStuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getStuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> grade <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>student<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>student<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> unit <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>password<span class="token punctuation">,</span><span class="token string">"学生"</span><span class="token punctuation">,</span><span class="token string">"student"</span><span class="token punctuation">,</span>grade<span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>iUserService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getCellValue</span><span class="token punctuation">(</span><span class="token class-name">Cell</span> cell<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//1.获取到单元格的属性类型</span>
        <span class="token class-name">CellType</span> cellType <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.根据单元格数据类型获取数据</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>cellType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token constant">STRING</span><span class="token operator">:</span>
                value <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getStringCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">BOOLEAN</span><span class="token operator">:</span>
                value <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getBooleanCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">NUMERIC</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">isCellDateFormatted</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">//日期格式</span>
                    value <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getDateCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">//数字</span>
                    value <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getNumericCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">FORMULA</span><span class="token operator">:</span> <span class="token comment">//公式</span>
                value <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">getCellFormula</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></code></pre>



]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot项目</title>
    <url>/2023/01/18/%E5%90%8E%E7%AB%AF/Java/springboot%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>springboot项目模板</p>
<span id="more"></span>

<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202303171306433.png" alt="image-20221116104212647" loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202303171306049.png" alt="image-20221116104353934" loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202303171306036.png" alt="image-20221116104424473" loading="lazy"></p>
<p>选择项目位置，完成</p>
<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">CorsConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">UrlBasedCorsConfigurationSource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">CorsFilter</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">CorsConfiguration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//允许所有域名进行跨域调用</span>
        config<span class="token punctuation">.</span><span class="token function">addAllowedOriginPattern</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//替换这个</span>
        <span class="token comment">//允许跨越发送cookie</span>
        config<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//放行全部原始头信息</span>
        config<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//允许所有请求方法跨域调用</span>
        config<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h1 id="mybatis-plu"><a href="#mybatis-plu" class="headerlink" title="mybatis-plu"></a>mybatis-plu</h1><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">PaginationInterceptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * mybatis-plus.分页插件
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">PaginationInterceptor</span> <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<h2 id="自动填充时间"><a href="#自动填充时间" class="headerlink" title="自动填充时间"></a>自动填充时间</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">MetaObjectHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span></span><span class="token class-name">MetaObject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Primary</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Primary</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 插入元对象字段填充（用于插入时对公共字段的填充）
     *
     * @param metaObject 元对象
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createAt"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateAt"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 更新元对象字段填充（用于更新时对公共字段的填充）
     *
     * @param metaObject 元对象
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在实体中配置</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">FieldFill</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">IdType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>activerecord<span class="token punctuation">.</span></span><span class="token class-name">Model</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableId</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableField</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonFormat</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">EqualsAndHashCode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span></span><span class="token class-name">Accessors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>format<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormat</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * &lt;p>
 * 用户表
 * &lt;/p>
 *
 * @author chq
 * @since 2022-11-17
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysUser</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 主键
     */</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 用户名
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 密码
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 创建时间
     */</span>
    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"createdAt"</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createdAt<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 更新时间
     */</span>
    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"updatedAt"</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updatedAt<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h1 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h1><p>安装依赖</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>

<p>拦截器</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">PassToken</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">boolean</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>



<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">AlgorithmMismatchException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">InvalidClaimException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">SignatureVerificationException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span><span class="token class-name">TokenExpiredException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>method<span class="token punctuation">.</span></span><span class="token class-name">HandlerMethod</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 添加拦截器
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//        System.out.println("preHandle");</span>
        <span class="token comment">//如果不是映射到方法直接放行</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">HandlerMethod</span> handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span>handler<span class="token punctuation">;</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">PassToken</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//方法上面是否有注解？</span>
            <span class="token class-name">PassToken</span> passToken <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">PassToken</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>passToken<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Response</span> res<span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">verifyToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SignatureVerificationException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    res <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">errorAuth</span><span class="token punctuation">(</span><span class="token string">"签名不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenExpiredException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    res <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">errorAuth</span><span class="token punctuation">(</span><span class="token string">"令牌过期异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AlgorithmMismatchException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    res <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">errorAuth</span><span class="token punctuation">(</span><span class="token string">"算法不匹配异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidClaimException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    res <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">errorAuth</span><span class="token punctuation">(</span><span class="token string">"失效的claim异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    res <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">errorAuth</span><span class="token punctuation">(</span><span class="token string">"token无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token class-name">String</span> resultJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
                response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resultJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">Response</span> res<span class="token punctuation">;</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">verifyToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SignatureVerificationException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">errorAuth</span><span class="token punctuation">(</span><span class="token string">"签名不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenExpiredException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">errorAuth</span><span class="token punctuation">(</span><span class="token string">"令牌过期异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AlgorithmMismatchException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">errorAuth</span><span class="token punctuation">(</span><span class="token string">"算法不匹配异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidClaimException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">errorAuth</span><span class="token punctuation">(</span><span class="token string">"失效的claim异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">errorAuth</span><span class="token punctuation">(</span><span class="token string">"token无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">String</span> resultJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resultJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span>
                           <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//        System.out.println("postHandle");</span>
        <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>
                                <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//        System.out.println("afterCompletion");</span>
        <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<p>配置拦截</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>chq<span class="token punctuation">.</span>club<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">TokenInterceptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span></span><span class="token punctuation">;</span>


<span class="token comment">//配置拦截事件</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenWebMvcConfigurer</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TokenInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>



<h1 id="参数效验"><a href="#参数效验" class="headerlink" title="参数效验"></a>参数效验</h1><p>安装依赖</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.0.20.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>

<h2 id="单个类参数校验"><a href="#单个类参数校验" class="headerlink" title="单个类参数校验"></a>单个类参数校验</h2><p>定义要校验参数的实体类，在属性前添加注解</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">IdType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>activerecord<span class="token punctuation">.</span></span><span class="token class-name">Model</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableId</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableField</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiModelProperty</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">EqualsAndHashCode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span></span><span class="token class-name">Accessors</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotBlank</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysUser</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 主键
     */</span>
    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 用户名
     */</span>
    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 密码
     */</span>
    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"密码不能为空"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在控制器中添加效验注解<code>@Validated</code></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"添加"</span><span class="token punctuation">,</span>  notes <span class="token operator">=</span> <span class="token string">"添加"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResultInfo</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token class-name">SysUser</span> entity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	iSysUserService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token class-name">ResultInfo</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>内置校验注解：</p>
<pre class="language-none"><code class="language-none">@AssertFalse	必须是false
@AssertTrue	必须是true
@DecimalMax	小于等于给定的值
@DecimalMin	大于等于给定的值
@Digits	可设定最大整数位数和最大小数位数
@Email	校验是否符合Email格式
@Future	必须是将来的时间
@FutureOrPresent	当前或将来时间
@Max	最大值
@Min	最小值
@Negative	负数（不包括0）
@NegativeOrZero	负数或0
@NotBlank	不为null并且包含至少一个非空白字符
@NotEmpty	不为null并且不为空
@NotNull	不为null
@Null	为null
@Past	必须是过去的时间
@PastOrPresent	必须是过去的时间，包含现在
@PositiveOrZero	正数或0
@Size	校验容器的元素个数</code></pre>



<h2 id="对单个参数进行校验"><a href="#对单个参数进行校验" class="headerlink" title="对单个参数进行校验"></a>对单个参数进行校验</h2><p>在控制器中</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"登录"</span><span class="token punctuation">,</span>  notes <span class="token operator">=</span> <span class="token string">"用户登录"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResultInfo</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不能为空"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span> <span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"密码不能为空"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">SystemException</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">JSONObject</span> res <span class="token operator">=</span> iSysUserService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token class-name">ResultInfo</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    	<span class="token keyword">return</span> <span class="token class-name">ResultInfo</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h1 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h1><p>定义抛出异常类</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseError</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/**
     * 获取错误码
     * @return
     */</span>
    <span class="token keyword">int</span> <span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 获取错误信息
     * @return
     */</span>
    <span class="token class-name">String</span> <span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">/**
     * 设置错误信息
     * @param message
     * @return
     */</span>
    <span class="token class-name">BaseError</span> <span class="token function">setErrorMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

</code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SystemCodeEnum</span>  <span class="token keyword">implements</span> <span class="token class-name">BaseError</span> <span class="token punctuation">&#123;</span>
    <span class="token function">PARAMETER_ERROR</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">,</span><span class="token string">"参数不合法"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">TOKEN_ERROR</span><span class="token punctuation">(</span><span class="token number">50001</span><span class="token punctuation">,</span><span class="token string">"用户未认证"</span><span class="token punctuation">)</span>
            <span class="token punctuation">;</span>

    <span class="token comment">/** 错误码 */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> errorCode<span class="token punctuation">;</span>

    <span class="token comment">/** 错误描述 */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> errorMsg<span class="token punctuation">;</span>

    <span class="token class-name">SystemCodeEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> errorCode<span class="token punctuation">,</span> <span class="token class-name">String</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">BaseError</span> <span class="token function">setErrorMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg<span class="token operator">=</span>errorMsg<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token keyword">implements</span> <span class="token class-name">BaseError</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//所有实现了BaseError的ErrorEnum.</span>
    <span class="token keyword">private</span> <span class="token class-name">BaseError</span> baseError<span class="token punctuation">;</span>

    <span class="token comment">//直接构造错误消息的构造异常</span>
    <span class="token keyword">public</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token class-name">BaseError</span> baseError<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>baseError<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>baseError<span class="token operator">=</span>baseError<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//自定义错误消息的构造异常</span>
    <span class="token keyword">public</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token class-name">BaseError</span> baseError<span class="token punctuation">,</span><span class="token class-name">String</span> customErrorMessage<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>customErrorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>baseError<span class="token operator">=</span>baseError<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>baseError<span class="token punctuation">.</span><span class="token function">setErrorMsg</span><span class="token punctuation">(</span>customErrorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseError<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseError<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">BaseError</span> <span class="token function">setErrorMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>baseError<span class="token punctuation">.</span><span class="token function">setErrorMsg</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>全局异常处理</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">BindException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">FieldError</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">MethodArgumentNotValidException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestControllerAdvice</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">ConstraintViolation</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">ConstraintViolationException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span>



<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">GlobalExceptionHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BAD_REQUEST_MSG</span> <span class="token operator">=</span> <span class="token string">"参数检验不通过"</span><span class="token punctuation">;</span>

    <span class="token comment">//  处理单个参数校验失败抛出的异常</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResultInfo</span> <span class="token function">constraintViolationExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConstraintViolation</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> constraintViolations <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getConstraintViolations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> constraintViolations<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-></span> o<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">BAD_REQUEST_MSG</span><span class="token punctuation">,</span> collect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//处理 form data方式调用接口校验失败抛出的异常</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BindException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResultInfo</span> <span class="token function">bindExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BindException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FieldError</span><span class="token punctuation">></span></span> fieldErrors <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> fieldErrors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-></span> o<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">BAD_REQUEST_MSG</span><span class="token punctuation">,</span> collect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//  处理 json 请求体调用接口校验失败抛出的异常</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResultInfo</span> <span class="token function">methodArgumentNotValidExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FieldError</span><span class="token punctuation">></span></span> fieldErrors <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> fieldErrors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-></span> o<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">BAD_REQUEST_MSG</span><span class="token punctuation">,</span> collect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 处理以上处理不了的其他异常</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResultInfo</span> <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">BAD_REQUEST_MSG</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<p>使用举例<code>UserServiceImpl</code></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">JSONObject</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">SystemException</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 查询用户</span>
	<span class="token class-name">SysUser</span> u <span class="token operator">=</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 用户存在操作</span>
	<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemException</span><span class="token punctuation">(</span><span class="token class-name">SystemCodeEnum</span><span class="token punctuation">.</span><span class="token constant">PARAMETER_ERROR</span><span class="token punctuation">,</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>返回</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202303171305784.png" alt="image-20221119001421447" loading="lazy"></p>
<h1 id="通用返回"><a href="#通用返回" class="headerlink" title="通用返回"></a>通用返回</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ResultInfo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token class-name">ResultInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span><span class="token class-name">E</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultInfo</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>msg<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token class-name">ResultInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultInfo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token class-name">ResultInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span><span class="token class-name">E</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultInfo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>msg<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token class-name">ResultInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultInfo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs内置模块</title>
    <url>/2021/07/18/%E5%90%8E%E7%AB%AF/Node.js/%E5%9F%BA%E7%A1%80/1.Nodejs%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="浏览器中JavaScript的运行环境"><a href="#浏览器中JavaScript的运行环境" class="headerlink" title="浏览器中JavaScript的运行环境"></a>浏览器中JavaScript的运行环境</h1><p>不同的浏览器使用不同的 JavaScript 解析引擎：</p>
<ul>
<li>Chrome  - V8</li>
<li>Firefox - OdinMonkey（奥丁猴）</li>
<li>Safri - JSCore</li>
<li>IE - Chakra（查克拉）</li>
</ul>
<blockquote>
<p>V8 解析引擎的性能最好</p>
</blockquote>
<h2 id="Nodejs可以做什么？"><a href="#Nodejs可以做什么？" class="headerlink" title="Nodejs可以做什么？"></a>Nodejs可以做什么？</h2><ol>
<li>基于Express框架(<a href="http://www.expressjs.com.cn/)%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAWeb%E5%BA%94%E7%94%A8">http://www.expressjs.com.cn/)，可以快速构建Web应用</a></li>
<li>基于Electron框架(<a href="https://electronjs.org/)%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%9E%84%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8">https://electronjs.org/)，可以构建跨平台的桌面应用</a></li>
<li>基于restify框架(<a href="http://restify.com/)%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAAPI%E6%8E%A5%E5%8F%A3%E9%A1%B9%E7%9B%AE">http://restify.com/)，可以快速构建API接口项目</a></li>
</ol>
<h1 id="fs-文件系统模块"><a href="#fs-文件系统模块" class="headerlink" title="fs 文件系统模块"></a>fs 文件系统模块</h1><p>fs模块是Node.js 官方提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求。</p>
<p>导入 <code>fs</code> 模块</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p><code>fs.readFile()</code>方法，读取指定文件中的内容，语法格式：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>参数说明：</p>
<ul>
<li>必选，字符串，表示文件的路径</li>
<li>可选，表示以什么编码格式来读取文件</li>
<li>必选，文件读取完成之后，通过回调函数来拿到读取的结果</li>
</ul>
<p>使用：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./data.json"</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>



<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p><code>fs.writeFile()</code>方法，向指定文件中写入内容，语法：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span></code></pre>

<p>参数说明：</p>
<ul>
<li>必选，表示文件的存放路径</li>
<li>必选，表示要写入的内容</li>
<li>可选，表示以什么格式写入文件，默认 utf-8</li>
<li>必选，文件写入完成后的回调函数</li>
</ul>
<p>使用：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"./data.txt"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"写入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>



<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>将cj.txt文件内的</p>
<pre class="language-none"><code class="language-none">aaa&#x3D;99 bbb&#x3D;55 ccc&#x3D;84 ddd&#x3D;69 eee&#x3D;95 fff&#x3D;84</code></pre>

<p>转成</p>
<pre class="language-none"><code class="language-none">1 aaa:99
2 bbb:55
3 ccc:84
4 ddd:69
5 eee:95
6 fff:84</code></pre>

<p>这种格式并保存在新文件cj-ok.txt中.</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./cj.txt"</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> dealedData <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> dealData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  dealData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dealData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dealedData <span class="token operator">+=</span> count <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> e <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"./cj-ok.txt"</span><span class="token punctuation">,</span> dealedData<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="路径动态拼接"><a href="#路径动态拼接" class="headerlink" title="路径动态拼接"></a>路径动态拼接</h2><p>在使用fs 模块操作文件时，如果提供的操作路径是以<code>./</code>或<code>../</code>开头的相对路径时，很容易出现路径动态拼接错误的问题。</p>
<p>原因:代码在运行的时候，<strong>会以执行node命令时所处的目录</strong>，动态拼接出被操作文件的完整路径。</p>
<p>解决方案:在使用fs模块操作文件时，直接提供完整的路径，不要提供<code>./</code>或<code>../</code>开头的相对路径，从而防止路径动态拼接的问题.</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// __dirname 表示当前文件所处的路径</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">"/data.txt"</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h1 id="path-路径模块"><a href="#path-路径模块" class="headerlink" title="path 路径模块"></a>path 路径模块</h1><p>path模块是Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求。</p>
<p>导入 path 模块</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="路径拼接"><a href="#路径拼接" class="headerlink" title="路径拼接"></a>路径拼接</h2><p><code>path.join()</code>，将多个路径片段拼接成一个完整的路径字符串</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>paths<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<ul>
<li>…paths 路径片段的序列</li>
</ul>
<p>使用</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> pathStr <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"/a"</span><span class="token punctuation">,</span> <span class="token string">"/b/b"</span><span class="token punctuation">,</span> <span class="token string">"../"</span><span class="token punctuation">,</span> <span class="token string">"./d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pathStr2 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">"./1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathStr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>

<h2 id="获取路径中的文件名"><a href="#获取路径中的文件名" class="headerlink" title="获取路径中的文件名"></a>获取路径中的文件名</h2><p><code>path.basename()</code>，从路径字符串中将文件名解析出来</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">[</span>ext<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<ul>
<li>path 必选 ， 表示一个路径的字符串</li>
<li>ext 可选，表示文件扩展名</li>
</ul>
<p>使用：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> PassThrough <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fsPath <span class="token operator">=</span> <span class="token string">"a/b/c/d/index.html"</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fsPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// index.html</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fsPath<span class="token punctuation">,</span> <span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// index</span>
</code></pre>

<h1 id="Http-模块"><a href="#Http-模块" class="headerlink" title="Http 模块"></a>Http 模块</h1><p>http模块是Node.js官方提供的、用来创建web服务器的模块。通过http模块提供的<code>http.createServer()</code>方法，就能方便的把一台普通的电脑， 变成一台Web服务器，从而对外提供Web资源服务。</p>
<h2 id="创建-web-服务器"><a href="#创建-web-服务器" class="headerlink" title="创建 web 服务器"></a>创建 web 服务器</h2><ol>
<li>导入 http 模块</li>
<li>创建 web 服务器实例</li>
<li>为服务器绑定 request 事件，监听客户端的请求</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"对于"</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">"的"</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>method <span class="token operator">+</span> <span class="token string">"请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>
    <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">"success!"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>



<h3 id="req"><a href="#req" class="headerlink" title="req"></a>req</h3><p>只要服务器接收到了客户端的请求，就会调用通过<code>server.on()</code>为服务器绑定的 request事件处理函数。</p>
<p>如果想在事件处理函数中，访问与客户端相关的数据或属性，可以使用如下的方式:</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"对于"</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">"的"</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>method <span class="token operator">+</span> <span class="token string">"请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h3 id="res"><a href="#res" class="headerlink" title="res"></a>res</h3><p>在服务器的request事件处理函数中，如果想访问与服务器相关的数据或属性，可以使用如下的方式:</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>
    <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">"success!"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>针对中文乱码问题，设置响应头编码格式;</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>express基本使用</title>
    <url>/2021/09/18/%E5%90%8E%E7%AB%AF/Node.js/%E5%9F%BA%E7%A1%80/3.express/</url>
    <content><![CDATA[<h1 id="Express-简介"><a href="#Express-简介" class="headerlink" title="Express 简介"></a>Express 简介</h1><p>Express 是基于 node.js 平台，快速、开放、极简的 Web 开发框架。</p>
<h1 id="Express-创建web服务器"><a href="#Express-创建web服务器" class="headerlink" title="Express 创建web服务器"></a>Express 创建web服务器</h1><p>安装express</p>
<pre class="language-none"><code class="language-none">npm i express@4.17.1</code></pre>

<p>创建web服务器</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>

<h2 id="GET-POST请求"><a href="#GET-POST请求" class="headerlink" title="GET POST请求"></a>GET POST请求</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/http"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"get请求成功"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发起get请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/http"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"post请求成功"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发起post请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>req：请求对象（请求相关的属性与方法）</p>
<p>res：响应对象（响应相关的属性与方法）</p>
<h2 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h2><p>get：[<a href="http://127.0.0.1/http?username=postman&amp;password=123456%5D">http://127.0.0.1/http?username=postman&amp;password=123456]</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/http"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"get请求成功"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// &#123; username: 'postman', password: '123456' &#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>获取post请求的参数：</p>
<p>安装 body-parser 模块</p>
<pre class="language-none"><code class="language-none">npm install --save body-parser</code></pre>

<p>获取参数</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"body-parser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// parse application/x-www-form-urlencoded</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//parse application/json</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/http"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"post请求成功"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="获取url中的动态参数"><a href="#获取url中的动态参数" class="headerlink" title="获取url中的动态参数"></a>获取url中的动态参数</h2><p>通过req.params对象，可以访问到URL中，通过:匹配到的动态参数:</p>
<p>get：[<a href="http://127.0.0.1/user/2]">http://127.0.0.1:80/user/2]</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/:id"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"请求成功"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// &#123; id: '2' &#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h1 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h1><p>通过 <code>express.static() </code>我们可以非常方便地创建一个静态资源服务器</p>
<p>例如，通过如下代码就可以将static目录下的图片、CSS文件、JavaScript文件对外开放访问了:</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">"./static"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">81</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:81"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070836738.png" loading="lazy"></p>
<h2 id="托管多个静态资源目录"><a href="#托管多个静态资源目录" class="headerlink" title="托管多个静态资源目录"></a>托管多个静态资源目录</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">"./static"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>根据目录的添加顺序查找查找所需要的文件</p>
<h2 id="挂在路径前缀"><a href="#挂在路径前缀" class="headerlink" title="挂在路径前缀"></a>挂在路径前缀</h2><p>在托管的静态资源访问路径之前，挂载路径前缀</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/static'</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">"./static"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>在Express 中，路由指的是客户端的请求与服务器处理函数之间的映射关系。</p>
<p>Express 中的路由分3部分组成，分别是请求的类型、请求的URL地址、处理函数，格式如下:</p>
<pre class="language-none"><code class="language-none">app.METHOD(PATH,HANDLER)</code></pre>

<h2 id="路由的匹配过程"><a href="#路由的匹配过程" class="headerlink" title="路由的匹配过程"></a>路由的匹配过程</h2><p>每当一个请求到达服务器之后，需要先经过路由的匹配，只有匹配成功之后，才会调用对应的处理函数。</p>
<p>在匹配时，会按照路由的顺序进行匹配，如果请求类型和请求的URL同时匹配成功，则 Express 会将这次请求，转交给对应的function函数进行处理。</p>
<ul>
<li>按照定义的先后顺序进行匹配</li>
<li>请求类型和请求的URL同时匹配成功,才会调用对应的处理函数</li>
</ul>
<h2 id="路由模块化"><a href="#路由模块化" class="headerlink" title="路由模块化"></a>路由模块化</h2><p>将路由抽离为单独的模块</p>
<ol>
<li>创建路由模块对应的.js 文件</li>
<li>调用express.Router)函数创建路由对象</li>
<li>向路由对象上挂载具体的路由</li>
<li>使用module.exports向外共享路由对象</li>
<li>使用app.use(函数注册路由模块</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// router.js</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建路由对象</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 挂在路由</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/list"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"get /user/list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"post /user/add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 向外导出路由对象</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  router<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</code></pre>

<p>注册路由</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// index.js </span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 导入路由模块</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./router/router"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 注册路由模块</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:80"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<blockquote>
<p><code>app.use()</code> 函数得作用，注册全局中间件</p>
</blockquote>
<h2 id="为路由模块添加前缀"><a href="#为路由模块添加前缀" class="headerlink" title="为路由模块添加前缀"></a>为路由模块添加前缀</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入路由模块</span>
<span class="token keyword">const</span> UserRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./router/router"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 注册路由模块</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>





<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>中间件（Middleware），特指业务流程的中间处理环节</p>
<h1 id="Express-中间件的调用流程"><a href="#Express-中间件的调用流程" class="headerlink" title="Express 中间件的调用流程"></a>Express 中间件的调用流程</h1><p>当一个请求到达 Express 的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070836604.png" loading="lazy"></p>
<h2 id="Express-中间件的格式"><a href="#Express-中间件的格式" class="headerlink" title="Express 中间件的格式"></a>Express 中间件的格式</h2><p>Express 的中间件本质就是一个 function处理函数，Express 中间件格式：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>其中</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>就是中间件函数，中间件函数的形参的列表中，必须包含 next参数 ，而路由处理函数只需要包含 req和res</p>
<h2 id="next-函数作用"><a href="#next-函数作用" class="headerlink" title="next 函数作用"></a>next 函数作用</h2><p>next 函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或者路由。</p>
<p>在一个中间件中调用<code>next（）</code>表示此中间件已经处理完毕，需要将处理结果转交给下一个中间件或者路由。</p>
<h2 id="定义中间件函数"><a href="#定义中间件函数" class="headerlink" title="定义中间件函数"></a>定义中间件函数</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">mv</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一个中间件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 把流转关系转交</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h2 id="全局生效的中间件"><a href="#全局生效的中间件" class="headerlink" title="全局生效的中间件"></a>全局生效的中间件</h2><p>客户端发起的任何请求，到达服务器之后，都会触发的中间件，叫做全局中间件。</p>
<p>定义全局生效的中间:</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>中间函数<span class="token punctuation">)</span></code></pre>

<p>例子：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">mw</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一个中间件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 把流转关系转交</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>mw<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">rq<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'get - /'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'get - /user '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:80'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>这样不管客户端哪个请求路由，都会执行中间件函数<code>mw</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070836355.png" loading="lazy"></p>
<h2 id="中间件的作用"><a href="#中间件的作用" class="headerlink" title="中间件的作用"></a>中间件的作用</h2><p>多个中间件之间，共享同一份req和res。基于这样的特性，我们可以在上游的中间件中，统一为req或res 对象添加自定义的属性或方法，供下游的中间件或路由进行使用。</p>
<p>例子：</p>
<p>获取请求到达服务器的时间</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">getDate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  req<span class="token punctuation">.</span>date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 把流转关系转交</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>getDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get - /'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'get - /'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get - /user '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'get - /user '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:80'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</code></pre>









]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化与包</title>
    <url>/2021/07/18/%E5%90%8E%E7%AB%AF/Node.js/%E5%9F%BA%E7%A1%80/2.%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8E%E5%8C%85/</url>
    <content><![CDATA[<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>概念：模块化是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元。</p>
<p>编程领域中的模块化，就是遵守固定的规则，把一个大文件拆成独立并互相依赖的多个小模块。</p>
<p>把代码进行模块化拆分的好处:</p>
<ol>
<li>提高了代码的复用性</li>
<li>提高了代码的可维护性</li>
<li>可以实现按需加载</li>
</ol>
<p>模块化规范：</p>
<p>模块化规范就是对代码进行模块化的拆分和组合时，需要遵守的规则</p>
<h1 id="Nodejs中的模块化"><a href="#Nodejs中的模块化" class="headerlink" title="Nodejs中的模块化"></a>Nodejs中的模块化</h1><p>Node.js 中根据模块来源的不同，将模块分为了3大类，分别是:</p>
<ul>
<li><strong>内置模块</strong>(内置模块是由Node.js 官方提供的，例如fs、path、http等)<br>心</li>
<li><strong>自定义模块</strong>(用户创建的每个.js文件，都是自定义模块)</li>
<li><strong>第三方模块</strong>(由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载)</li>
</ul>
<h2 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h2><p>使用强大的<code>require()</code>方法，可以加载需要的内置模块、用户自定义模块、第三方模块进行使用。</p>
<h2 id="模块作用域"><a href="#模块作用域" class="headerlink" title="模块作用域"></a>模块作用域</h2><p>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域。</p>
<h2 id="module对象"><a href="#module对象" class="headerlink" title="module对象"></a>module对象</h2><p>可向外共享模块作用域中的成员</p>
<p>在每个.js自定义模块中都有一个module对象，它里面存储了和当前模块有关的信息</p>
<p><strong>module.exports</strong></p>
<p>在自定义模块中，可以使用module.exports 对象，将模块内的成员共享出去，供外界使用。</p>
<p>自定义模块</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"zs"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,my name is "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token punctuation">,</span>
  sayHello<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</code></pre>

<p>使用自定义模块</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./module.exports"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h2 id="exports-对象"><a href="#exports-对象" class="headerlink" title="exports 对象"></a>exports 对象</h2><p>由于<code>module.exports</code>单词写起来比较复杂，为了简化向外共享成员的代码，Node提供了<code>exports</code>对象。默认情况下，<code>exports</code>和<code>module.exports</code> 指向同一个对象。最终共享的结果，还是以<code>module.exports</code> 指向的对象为准。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">===</span> exports<span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre>



<h1 id="Common-JS"><a href="#Common-JS" class="headerlink" title="Common JS"></a>Common JS</h1><p>Node.,js 遵循了CommonJS模块化规范，CommonJS规定了模块的特性和各模块之间如何相互依赖。</p>
<p>CommonJS规定:</p>
<ul>
<li>每个模块内部，module变量代表当前模块。</li>
<li>module变量是一个对象，它的exports属性(即module.exports）是对外的接口。</li>
<li>加载某个模块，其实是加载该模块的module.exports属性。</li>
<li>require()方法用于加载模块。</li>
</ul>
<h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>在Nodejs中<strong>第三方模块</strong>又叫做包</p>
<p>包是基于内置模块封装出来的，提供了更高级、更方便的APl，极大的提高了开发效率。</p>
<h2 id="包的来源"><a href="#包的来源" class="headerlink" title="包的来源"></a>包的来源</h2><p>包是由第三方个人或者团队开发出来的，免费供所有人使用</p>
<h2 id="npm包使用"><a href="#npm包使用" class="headerlink" title="npm包使用"></a>npm包使用</h2><h3 id="格式化时间-传统做法"><a href="#格式化时间-传统做法" class="headerlink" title="格式化时间 - 传统做法"></a>格式化时间 - 传统做法</h3><ol>
<li>创建格式化时间的自定义模块</li>
<li>定义格式化时间的方法</li>
<li>创建补零函数</li>
<li>从自定义模块中导出格式化时间的函数</li>
<li>导入格式化时间的自定义模块</li>
<li>调用格式化时间的函数</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// dateFormat</span>
<span class="token comment">// 定义时间格式化</span>
<span class="token keyword">function</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token parameter">dtStr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dtStr<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> y <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> hh <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> mm <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> ss <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>y<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>m<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hh<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>mm<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>ss<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 补零函数</span>
<span class="token keyword">function</span> <span class="token function">padZero</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> n <span class="token operator">:</span> <span class="token string">"0"</span> <span class="token operator">+</span> n<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  dateFormat<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<p>使用<code>dateFormat</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">TIME</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./dateFormat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// console.log(dt);</span>

<span class="token keyword">const</span> newDt <span class="token operator">=</span> <span class="token constant">TIME</span><span class="token punctuation">.</span><span class="token function">dateFormat</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newDt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2022-01-24</span></code></pre>

<h3 id="使用第三方包进行格式化"><a href="#使用第三方包进行格式化" class="headerlink" title="使用第三方包进行格式化"></a>使用第三方包进行格式化</h3><ol>
<li>安装格式化时间包 - <code>monent</code></li>
<li>使用require()导入格式化时间的包</li>
<li>参考moment的<a href="http://momentjs.cn/">官方API文档</a>对时间进行格式化</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"moment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> dt <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="npm包注意"><a href="#npm包注意" class="headerlink" title="npm包注意"></a>npm包注意</h2><p>初次装包完成后，在项目文件夹下多一个叫做<code>node_modules</code>的文件夹和 <code>package-lock.json</code>的配置文件。</p>
<blockquote>
<p><code>node_modules</code>文件夹用来存放所有已安装到项目中的包。require()导入第三方包时，就是从这个目录中查找并加载包。</p>
<p><code>package-lock.json</code>配置文件用来记录node modules 目录下的每一个包的下载信息，例效包的名字、版本号、下载地址等。</p>
</blockquote>
<p>默认情况下，使用npm install 命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包，可以在包名之后，通过@符号指定具体的版本，例如:</p>
<pre class="language-none"><code class="language-none">npm i moment@2.22.2</code></pre>



<p>包的语义化版本规范</p>
<p>包的版本号是以“点分十进制”形式进行定义的，总共有三位数字，例如2.24.0其中每一位数字所代表的的含义如下:</p>
<ul>
<li>第1位数字:大版本</li>
<li>第2位数字:功能版本</li>
<li>第3位数字:Bug修复版本</li>
</ul>
<h2 id="包管理配置文件"><a href="#包管理配置文件" class="headerlink" title="包管理配置文件"></a>包管理配置文件</h2><p>npm 规定，在项目根目录中，必须提供一个叫做 <code>package.json</code>的包管理配置文件。用来记录与项目有关的一些配置信息。例如:</p>
<ul>
<li>项目的名称、版本号、描述等</li>
<li>项目中使用的包</li>
<li>对包进行分类：开发和部署</li>
</ul>
<p>创建 <code>package.json</code>的包管理配置文件</p>
<pre class="language-none"><code class="language-none">npm init -y</code></pre>

<h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><p>package.json文件中，有一个dependencies节点，专门用来记录您使用npm install命令安装了哪些包。</p>
<h3 id="devDependcies"><a href="#devDependcies" class="headerlink" title="devDependcies"></a>devDependcies</h3><p>如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录到<code>devDependencies</code>节点中。</p>
<pre class="language-none"><code class="language-none">npm i moment -D
# or
npm i moment --save-dev</code></pre>

<p>与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到<code>dependencies</code> 节点中。</p>
<p>查看npm各项配置</p>
<pre class="language-none"><code class="language-none">npm config get</code></pre>

<p>查看当前下包的镜像源：</p>
<pre class="language-none"><code class="language-none">npm config get registry</code></pre>

<h2 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h2><p>为了更方便的切换下包的镜像源，我们可以安装nrm这个小工具，利用nrm提供的终端命令，可以快速查看和切换下包的镜像源。</p>
<pre class="language-none"><code class="language-none"># #通过npm包管理器，将nrm安装为全局可用的工具
npm i nrm -g
# #查看所有可用的镜像源nrm ls
nrm ls
# #将下包的镜像源切换为taobao镜像
nrm use taobao</code></pre>



<h2 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h2><p>项目包又分为两类，分别是:</p>
<ul>
<li><p>开发依赖包</p>
<p>被记录到<code>devDependencies</code>节点中的包，只在开发期间会用到</p>
<pre class="language-none"><code class="language-none">npm i 包名 -D</code></pre>


</li>
<li><p>核心依赖包</p>
<p>被记录到<code>dependencies</code>节点中的包，在开发期间和项目上线之后都会用到</p>
<pre class="language-none"><code class="language-none">npm i 包名 []</code></pre></li>
</ul>
<blockquote>
<p>全局包 -g</p>
<p><code>--save</code> &#x3D; <code>-S</code></p>
<p>项目（运行时、发布到生产环境时）依赖 , devDependencies</p>
<p><code>--save-dev</code> &#x3D; <code>-D</code></p>
<p>工程构建（开发时、“打包”时）依赖 , dependencies</p>
</blockquote>
<h2 id="规范的包文件"><a href="#规范的包文件" class="headerlink" title="规范的包文件"></a>规范的包文件</h2><ol>
<li>包必须以单独的目录而存在</li>
<li>包的顶级目录下要必须包含 package.json这个包管理配置文件</li>
<li>package.json中必须包含name，version，main这三个属性，分别代表包的名字、版本号、包的入口。</li>
</ol>
<h1 id="开发自己的包"><a href="#开发自己的包" class="headerlink" title="开发自己的包"></a>开发自己的包</h1><p>尝试开发自己的包：</p>
<ol>
<li>格式化日期</li>
<li>转义HTML中的特殊字符</li>
<li>还原HTML中的特殊字符</li>
</ol>
<h2 id="初始化包基本结构"><a href="#初始化包基本结构" class="headerlink" title="初始化包基本结构"></a>初始化包基本结构</h2><ol>
<li><p>新建8963-tools 文件夹，作为包的根目录</p>
</li>
<li><p>在8963-tools文件夹中，新建如下三个文件:</p>
<ul>
<li>package.json(包管理配置文件)</li>
</ul>
</li>
</ol>
<ul>
<li>index.js(包的入口文件)</li>
</ul>
<ol start="3">
<li>README.md(包的说明文档)</li>
</ol>
<h2 id="将包发布到npm"><a href="#将包发布到npm" class="headerlink" title="将包发布到npm"></a>将包发布到npm</h2><p>将终端切换到包的根目录之后，运行npm publish 命令，即可将包发布到npm上(注意:包名不能雷同)。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070835908.png" loading="lazy"></p>
<p>删除已经发布的包</p>
<pre class="language-none"><code class="language-none">npm unpublish 包名 --force</code></pre>

<p>注意：</p>
<ul>
<li>npm unpublish命令只能删除72小时以内发布的包</li>
<li>npm unpublish 删除的包,在24小时内不允许重复发布</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070836403.png" loading="lazy"></p>
<h1 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h1><p>模块在第一次加载后会被缓存。这也意味着多次调用require)不会导致模块的代码被执行多次。</p>
<p>注意:不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率。</p>
<h2 id="内置模块加载机制"><a href="#内置模块加载机制" class="headerlink" title="内置模块加载机制"></a>内置模块加载机制</h2><p>内置模块是由Node.js 官方提供的模块，内置模块的加载优先级最高。</p>
<p>例如，require(‘fs’)始终返回内置的fs模块，即使在node modules目录下有名字相同的包也叫做fs。</p>
<h2 id="自定义模块加载机制"><a href="#自定义模块加载机制" class="headerlink" title="自定义模块加载机制"></a>自定义模块加载机制</h2><p>使用require()加载自定义模块时，必须指定以<code>./</code>或<code>../</code>开头的路径标识符。</p>
<p>在加载自定义模块时，如果没有指定<code>./</code>或<code>../</code>这样的路径标识符，则node会把它当作内置模块或第三方模块进行加载。</p>
<p>同时，在使用require()导入自定义模块时，如果省略了文件的扩展名，则Node.js 会按顺序分别尝试加载以下的文件:</p>
<ol>
<li><p>按照确切的文件名进行加载</p>
</li>
<li><p>补全<code>.js</code>扩展名进行加载</p>
</li>
<li><p>补全<code>.json</code>扩展名进行加载</p>
</li>
<li><p>补全<code>.node</code>扩展名进行加载</p>
</li>
</ol>
<h2 id="第三方模块加载机制"><a href="#第三方模块加载机制" class="headerlink" title="第三方模块加载机制"></a>第三方模块加载机制</h2><p>如果传递给<code>require()</code>的模块标识符不是一个内置模块，也没有以<code>./</code>或‘<code>../</code>开头，则Nodejs 会从当前模块的父目录开始，尝试从<code>/node_modules</code>文件夹中加载第三方模块。</p>
<p>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。</p>
<h2 id="把目录当作模块加载"><a href="#把目录当作模块加载" class="headerlink" title="把目录当作模块加载"></a>把目录当作模块加载</h2><p>当把目录作为模块标识符，传递给require()进行加载的时候，有三种加载方式:</p>
<ol>
<li>在被加载的目录下查找一个叫做package.json的文件，并寻找 main属性，作为require()加载的入口</li>
<li>如果目录里没有package.json文件，或者main入口不存在或无法解析，则Node,js,将会试图加载目录下的 indexjs文件。</li>
<li>如果以上两步都失败了，则Node.,js 会在终端打印错误消息，报告模块的缺失;Error: Cannot find module ‘xo’</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>koa2基本使用</title>
    <url>/2022/03/12/%E5%90%8E%E7%AB%AF/Node.js/%E5%9F%BA%E7%A1%80/4.koa2/</url>
    <content><![CDATA[<h1 id="安装-Koa2"><a href="#安装-Koa2" class="headerlink" title="安装 Koa2"></a>安装 Koa2</h1><pre class="language-none"><code class="language-none">npm init -y
npm i koa2 -S</code></pre>

<h1 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h1><p>创建<code>app.js</code>并修改<code>package.json</code>文件</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"start"</span><span class="token operator">:</span><span class="token string">"node app.js"</span><span class="token punctuation">,</span>
  <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre>

<p>在<code>app.js</code>中</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9000</span>

<span class="token comment">// 调用中间件，app.use() 返回 this</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'Hello,Koa'</span>
  <span class="token comment">// ctx.body是ctx.response.body的简写</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://localhost:'</span> <span class="token operator">+</span> port<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>



<h1 id="洋葱模型"><a href="#洋葱模型" class="headerlink" title="洋葱模型"></a>洋葱模型</h1><p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070836038.jpg" loading="lazy"></p>
<p><code>Koa</code> 和 <code>Express</code> 都会使用到中间件，Express的中间件是顺序执行，从第一个中间件执行到最后一个中间件，发出响应：</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070837804.jpg" loading="lazy"></p>
<p>Koa是从第一个中间件开始执行，遇到 <code>next</code> 进入下一个中间件，一直执行到最后一个中间件，在逆序，执行上一个中间件 <code>next</code> 之后的代码，一直到第一个中间件执行结束才发出响应。</p>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070837992.jpg" loading="lazy"></p>
<p>使用代码解释洋葱模型</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070837696.png" loading="lazy"></p>
<p>通过 <code>next</code>可以先运行下个中间件，等中间件结束后，再继续运行当前 <code>next()</code> 之后的代码。</p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>安装</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">npm i koa<span class="token operator">-</span>router</code></pre>

<p>引入使用</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入</span>
<span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 使用路由</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'首页'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'列表'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// 注册路由</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>关于 <code>allowedMethods</code></p>
<h2 id="路由拆分"><a href="#路由拆分" class="headerlink" title="路由拆分"></a>路由拆分</h2><p>将路由拆分</p>
<p>app.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入路由</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router/index.js'</span><span class="token punctuation">)</span>
<span class="token comment">// 注册路由</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>index.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> home <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./home'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./list'</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</code></pre>

<p>home.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> home <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

home<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'首页'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> home</code></pre>

<p>list.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'列表页'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> list</code></pre>

<h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><p>从 <code>localhost:9000</code> 重定向到 <code>localhost:9000/home</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'/home'</span><span class="token punctuation">)</span></code></pre>

<h2 id="404"><a href="#404" class="headerlink" title="404"></a>404</h2><p>404.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> errorPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

errorPage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'404'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> errorPage</code></pre>

<p>router&#x2F;index.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> errorPage <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./404'</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/404'</span><span class="token punctuation">,</span> errorPage<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorPage<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>app.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 404</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/404'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token comment">// 注册</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>



<h1 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h1><p>避免每次都要自己手写404或200进行返回，因此可以创建 <code>utils/errorHandler.js</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 统一异常处理</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> fileName <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      status <span class="token operator">=</span> ctx<span class="token punctuation">.</span>status
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      status <span class="token operator">=</span> <span class="token number">500</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">>=</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token number">400</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">404</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">500</span><span class="token operator">:</span>
          fileName <span class="token operator">=</span> status
          <span class="token keyword">break</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
          fileName <span class="token operator">=</span> <span class="token string">'other'</span>
          <span class="token keyword">break</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">=</span> status
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在<code>app.js</code>中引入</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 统一异常处理</span>
<span class="token keyword">const</span> errorHeader <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils/errorHeader'</span><span class="token punctuation">)</span>
<span class="token comment">// 注册路由</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">errorHeader</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>
</code></pre>

<h1 id="操作mysql"><a href="#操作mysql" class="headerlink" title="操作mysql"></a>操作mysql</h1><p>安装操作库</p>
<pre class="language-none"><code class="language-none">npm i mysql</code></pre>

<p>utils&#x2F;db.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">'koa_dome'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">//对数据库进行增删改查操作的基础</span>
<span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">sql<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> connection</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> rows</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> rows<span class="token punctuation">)</span>
      connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

exports<span class="token punctuation">.</span>query <span class="token operator">=</span> query</code></pre>

<p>router&#x2F;list.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> sqlLang <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">select * from users</span><span class="token template-punctuation string">`</span></span>
    db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlLang<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// 返回拿到的数据</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> data
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<h1 id="后端跨域"><a href="#后端跨域" class="headerlink" title="后端跨域"></a>后端跨域</h1><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 安装koa2-cors</span>
npm i koa2<span class="token operator">-</span>cors

<span class="token comment">// 这里cors中间件一定要写在路由之前</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<h1 id="读取静态资源文件"><a href="#读取静态资源文件" class="headerlink" title="读取静态资源文件"></a>读取静态资源文件</h1><p>创建图片资源<code>assets\images\diudiu.png</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 安装koa-static</span>
cnpm install koa<span class="token operator">-</span><span class="token keyword">static</span>

<span class="token comment">// 引入</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-static'</span><span class="token punctuation">)</span>

<span class="token comment">// 获取静态资源文件夹</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">'/assets'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>访问<a href="http://localhost:8181/images/diudiu.png">http://localhost:8181/images/diudiu.png</a></p>
<blockquote>
<p>路径上不需要写assets，因为我们已经指定了访问资源时， <a href="http://localhost:8181/">http://localhost:8181</a> 自动指向 assets 文件夹。</p>
<p>由此，数据库中图片的地址只需要填写 <code>/images/banner1.png</code> 即可。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/K8963/Imageshack@main/blog/202209070837026.png" loading="lazy"></p>
<h1 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h1><p>前端发送 账号+密码 到后端，如果账号不存在于数据库，则注册账号</p>
<p>如果账号存在于数据库中，则验证密码。</p>
<p>验证密码通过或注册账号成功，都返回token给前端。</p>
<h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p>设定字段</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> users <span class="token punctuation">(</span>
	id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	account <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'账号'</span><span class="token punctuation">,</span>
	pwd <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>
  token <span class="token keyword">LONGTEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'令牌'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="from-表单"><a href="#from-表单" class="headerlink" title="from 表单"></a>from 表单</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入账号<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录/注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"/login/register"</span><span class="token punctuation">,</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token literal-property property">account</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.account'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token literal-property property">pwd</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.pwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>

<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><pre class="language-none"><code class="language-none">npm i koa-bodyparser jsonwebtoken</code></pre>

<h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p>在用户登录的路由中使用 jwt.sign 来生成token，参数</p>
<ul>
<li>存入 token 的信息</li>
<li>token 的钥匙，与config&#x2F;password.js 配置的钥匙相同</li>
<li>保存时间，3600一小时</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">myaccount</span><span class="token operator">:</span> myaccount<span class="token punctuation">,</span> <span class="token literal-property property">mypwd</span><span class="token operator">:</span> mypwd <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'secret'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token number">3600</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  token<span class="token punctuation">,</span>
  <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'登录成功'</span>
<span class="token punctuation">&#125;</span>
<span class="token function">resolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre>

<h2 id="登录注册"><a href="#登录注册" class="headerlink" title="登录注册"></a>登录注册</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/db'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span>

login<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

login<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// console.log(ctx.request.body)</span>
  <span class="token keyword">let</span> userAccount <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>account
  <span class="token keyword">let</span> userPwd <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>pwd
  <span class="token comment">// 账号是否存在</span>
  <span class="token keyword">let</span> sqlLang <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SELECT * FROM users WHERE account=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userAccount<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token keyword">let</span> isExist <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlLang<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
      data<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>isExist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 验证密码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isExist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pwd <span class="token operator">==</span> userPwd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">token</span><span class="token operator">:</span> isExist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>token<span class="token punctuation">,</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">account</span><span class="token operator">:</span> userAccount<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'密码错误'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">account</span><span class="token operator">:</span> userAccount<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建新用户</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 生成 token</span>
      <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>
        <span class="token punctuation">&#123;</span> <span class="token literal-property property">userAccount</span><span class="token operator">:</span> userAccount<span class="token punctuation">,</span> <span class="token literal-property property">userPwd</span><span class="token operator">:</span> userPwd <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token string">'secret'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span> <span class="token literal-property property">expiresIn</span><span class="token operator">:</span> <span class="token number">3600</span> <span class="token punctuation">&#125;</span>
      <span class="token punctuation">)</span>
      <span class="token keyword">let</span> sqlLang <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">INSERT INTO users (account,pwd,token) values ('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userAccount<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>userPwd<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">')</span><span class="token template-punctuation string">`</span></span>
      <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlLang<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
          token<span class="token punctuation">,</span>
          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'注册成功'</span><span class="token punctuation">,</span>
          <span class="token literal-property property">account</span><span class="token operator">:</span> userAccount<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> res
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> login</code></pre>

<p>至此登录注册完成</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
</search>
